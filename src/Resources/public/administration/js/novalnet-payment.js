!function(){var e={332:function(){},379:function(){},607:function(){},233:function(){Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"orders",key:"novalnet_extension",roles:{viewer:{privileges:["novalnet_transaction_details:read"],dependencies:[]},editor:{privileges:["novalnet_transaction_details:update","order_transaction:read","order_transaction:update"],dependencies:["novalnet_extension.viewer","order.editor"]},creator:{privileges:["novalnet_transaction_details:create"],dependencies:["novalnet_extension.viewer","novalnet_extension.editor"]},deleter:{privileges:["novalnet_transaction_details:delete"],dependencies:["novalnet_extension.viewer"]}}}),Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"novalnet_payment",key:"novalnet_payment",roles:{viewer:{privileges:["system_config:read","sales_channel:read"],dependencies:[]},editor:{privileges:["system_config:update","system_config:create","system_config:delete","sales_channel:update"],dependencies:["novalnet_payment.viewer"]}}})},394:function(){let{Component:e,State:t,Mixin:n,Filter:a,Context:o,ContextSwitchParameters:i}=Shopware,s=Shopware.Data.Criteria,{currency:l}=Shopware.Utils.format;e.override("sw-order-create-general",{inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:[n.getByName("notification")],data(){return{isLoading:!1}},computed:{customer(){return t.get("swOrder").customer},cart(){return t.get("swOrder").cart},currency(){return t.get("swOrder").context.currency},cartPrice(){return this.cart.price},salesChannelContext(){return t.get("swOrder").context}},watch:{salesChannelContext:{deep:!0,handler(){if(!this.customer)return;this.isLoading=!0;let e=this.repositoryFactory.create("payment_method"),t=new s(1,1);t.addFilter(s.equals("id",this.salesChannelContext.paymentMethod.id)),e.search(t,o.api).then(e=>{let t=e.first();t&&(this.novalnetPayment=!1,null!=t.customFields&&"novalnetpay"==t.customFields.novalnet_payment_method_name&&this.onWindowLoad())})}},customer:{deep:!0,handler(){if(null==this.customer)return},immediate:!0}},methods:{onWindowLoad(){document.querySelector(".sw-button-process").disabled=!0}}})},515:function(e,t,n){var a=n(332);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(534).A)("07b065ea",a,!0,{})},650:function(e,t,n){var a=n(379);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(534).A)("1290a577",a,!0,{})},816:function(e,t,n){var a=n(607);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(534).A)("799bcc12",a,!0,{})},534:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},o=0;o<t.length;o++){var i=t[o],s=i[0],l={id:e+":"+o,css:i[1],media:i[2],sourceMap:i[3]};a[s]?a[s].parts.push(l):n.push(a[s]={id:s,parts:[l]})}return n}n.d(t,{A:function(){return g}});var o,i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},l=i&&(document.head||document.getElementsByTagName("head")[0]),r=null,c=0,d=!1,m=function(){},u=null,p="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(e,t,n,o){d=n,u=o||{};var i=a(e,t);return y(i),function(t){for(var n=[],o=0;o<i.length;o++){var l=s[i[o].id];l.refs--,n.push(l)}t?y(i=a(e,t)):i=[];for(var o=0;o<n.length;o++){var l=n[o];if(0===l.refs){for(var r=0;r<l.parts.length;r++)l.parts[r]();delete s[l.id]}}}}function y(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](n.parts[o]);for(;o<n.parts.length;o++)a.parts.push(f(n.parts[o]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var i=[],o=0;o<n.parts.length;o++)i.push(f(n.parts[o]));s[n.id]={id:n.id,refs:1,parts:i}}}}function v(){var e=document.createElement("style");return e.type="text/css",l.appendChild(e),e}function f(e){var t,n,a=document.querySelector("style["+p+'~="'+e.id+'"]');if(a){if(d)return m;a.parentNode.removeChild(a)}if(h){var o=c++;t=_.bind(null,a=r||(r=v()),o,!1),n=_.bind(null,a,o,!0)}else t=w.bind(null,a=v()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var b=(o=[],function(e,t){return o[e]=t,o.filter(Boolean).join("\n")});function _(e,t,n,a){var o=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function w(e,t){var n=t.css,a=t.media,o=t.sourceMap;if(a&&e.setAttribute("media",a),u.ssrId&&e.setAttribute(p,t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/novalnetpayment/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/novalnetpayment/"),function(){"use strict";n(816);let{Component:e,Mixin:t,Defaults:a,Context:o}=Shopware,{Criteria:i}=Shopware.Data;e.register("novalnet-payment-settings",{template:'{% block novalnet_payment_settings %}\n	<sw-page class="novalnet-payment">\n		\n		{% block novalnet_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="regular-chevron-right-xs" small></sw-icon>\n                    {{ $tc(\'novalnet-payment.settingForm.title\') }}\n                </h2>\n            </template>\n        {% endblock %}\n		\n		{% block novalnet_payment_settings_actions %}\n            <template #smart-bar-actions>\n            \n				{% block novalnet_payment_actions_save %}\n                    <sw-button-process v-model:value="isSaveSuccessful" class="sw-settings-login-registration__save-action"\n									   variant="primary"\n                                       :isLoading="isLoading"\n                                       :disabled="isLoading || !acl.can(\'novalnet_payment.editor\')"\n                                       @click="onSave">\n                        {{ $tc(\'novalnet-payment.settingForm.buttons.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n            \n            </template>\n        {% endblock %}\n    \n        {% block novalnet_payment_content %}\n			<template #content>\n			\n				{% block novalnet_payment_content_card_view %}\n					<sw-card-view>\n						{% block novalnet_payment_content_sales_channel_config %}\n							<sw-sales-channel-config v-model:value="config" \n													 ref="configComponent" \n													 domain="NovalnetPayment.settings">\n								\n								{% block novalnet_payment_content_sales_channelconfig_card %}\n								  <template #select="{ onInput, selectedSalesChannelId, salesChannel}">\n									{% block novalnet_payment_content_sales_channelconfig_card_sales_channel %}\n										<sw-container class="novalnet-sales-channel">\n											<sw-single-select v-model:value="selectedSalesChannelId"\n															  labelProperty="translated.name"\n															  valueProperty="id"\n															  :disabled="!acl.can(\'novalnet_payment.editor\')"\n															  :options="salesChannel"\n															  show-clearable-button\n															  @update:value="onInput">\n											</sw-single-select>\n										</sw-container>\n									{% endblock %}\n								  </template>\n								{% endblock %}\n								\n								{% block novalnet_payment_config_content_channel_config_cards %}\n									<template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }">\n										{% block novalnet_payment_config_content_tabs %}\n											<sw-tabs>\n												{% block novalnet_payment_content_card_channel_config_credentials_card %}\n													<sw-tabs-item class="novalnet-payment-configuration-global-config"\n														:route="{ name: \'novalnet.payment.detail.credentials\', params: { id: $route.params.id }}"\n														:title="$tc(\'novalnet-payment.module.globalTitle\')">\n														{{ $tc(\'novalnet-payment.module.globalTitle\') }}\n													</sw-tabs-item>\n												{% endblock %}\n											</sw-tabs>\n										{% endblock %}\n										\n										{% block novalnet_payment_configuration_content_router_view %}\n												<router-view v-slot="{ Component }">\n													<component\n														:is="Component"													\n														:actualConfigData="actualConfigData"\n														:allConfigs="allConfigs"\n														:selectedSalesChannelId="selectedSalesChannelId"\n													/>\n												</router-view>\n										{% endblock %}\n										\n									</template>\n								{% endblock %}\n								\n							</sw-sales-channel-config>\n						{% endblock %}\n						\n						{% block novalnet_payment_content_card_loading %}\n                            <sw-loader v-if="isLoading"></sw-loader>\n                        {% endblock %}\n                        \n					</sw-card-view>\n				{% endblock %}\n				\n			</template>\n        {% endblock %}\n	</sw-page>\n{% endblock %}\n',mixins:[t.getByName("notification"),t.getByName("sw-inline-snippet")],inject:["acl","NovalPaymentApiCredentialsService","repositoryFactory"],data(){return{isLoading:!1,config:{},salesChannels:[],isSaveSuccessful:!1,clientIdFilled:!1,clientSecretFilled:!1}},computed:{salesChannelRepository(){return this.repositoryFactory.create("sales_channel")}},created(){this.createdComponent()},watch:{config:{handler(e){if(!e)return;let t=this.$refs.configComponent.allConfigs.null;null===this.$refs.configComponent.selectedSalesChannelId||(this.config["NovalnetPayment.settings.clientId"]||(this.config["NovalnetPayment.settings.clientId"]=t["NovalnetPayment.settings.clientId"]),this.config["NovalnetPayment.settings.accessKey"]||(this.config["NovalnetPayment.settings.accessKey"]=t["NovalnetPayment.settings.accessKey"])),this.$emit("salesChannelChanged"),this.$emit("update:value",e)},deep:!0}},methods:{createdComponent(){this.isLoading=!0;let e=new i;e.addFilter(i.equalsAny("typeId",[a.storefrontSalesChannelTypeId,a.apiSalesChannelTypeId])),this.salesChannelRepository.search(e,Shopware.Context.api).then(e=>{e.add({id:null,translated:{name:this.$tc("sw-sales-channel-switch.labelDefaultOption")}}),this.salesChannels=e}).finally(()=>{this.isLoading=!1})},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0;let e=this.getConfigValue("clientId"),t=this.getConfigValue("accessKey");if(""!==this.getConfigValue("clientId")&&void 0!==this.getConfigValue("clientId")&&this.getConfigValue("clientId").replace(/\s/g,""),""!==this.getConfigValue("accessKey")&&void 0!==this.getConfigValue("accessKey")&&this.getConfigValue("accessKey").replace(/\s/g,""),void 0===e||""==e){this.isLoading=!1,this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.emptyMessage")});return}if(void 0===t||""==t){this.isLoading=!1,this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.emptyAccessKeyMessage")});return}this.checkBackendConfiguration()},getConfigValue(e){let t=this.$refs.configComponent.allConfigs.null;return null===this.$refs.configComponent.selectedSalesChannelId?this.config[`NovalnetPayment.settings.${e}`]:this.config[`NovalnetPayment.settings.${e}`]||t[`NovalnetPayment.settings.${e}`]},checkBackendConfiguration(){let e=this.getConfigValue("clientId").replace(/\s/g,""),t=this.getConfigValue("accessKey").replace(/\s/g,"");this.NovalPaymentApiCredentialsService.validateApiCredentials(e,t).then(e=>{if(void 0==e.serverResponse||""==e.serverResponse){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}if(100!=e.serverResponse.result.status_code){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:e.serverResponse.result.status_text});return}e.tariffResponse.forEach(e=>{(void 0==this.config["NovalnetPayment.settings.tariff"]||""==this.config["NovalnetPayment.settings.tariff"])&&(this.config["NovalnetPayment.settings.tariff"]=e.id)}),this.config["NovalnetPayment.settings.clientKey"]=e.serverResponse.merchant.client_key,this.$refs.configComponent.save().then(e=>{this.isSaveSuccessful=!0,e&&(this.config=e),this.isLoading=!1}).catch(()=>{this.isLoading=!1}),this.createNotificationSuccess({title:this.$tc("novalnet-payment.settingForm.titleSuccess"),message:this.$tc("novalnet-payment.settingForm.successMessage")})}).catch(e=>{this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.errorMessage")}),this.isLoading=!1,this.isTestSuccessful=!1})}},metaInfo(){return{title:this.$createTitle()}}}),n(515);let{Context:s,Component:l,Mixin:r}=Shopware,{Criteria:c}=Shopware.Data,{object:d,types:m}=Shopware.Utils;l.register("novalnet-payment-credentials",{template:'{% block novalnet_payment_content_card_channel_config_credentials %}\n	<sw-card class="sw-card--grid" \n			 :title="$tc(\'novalnet-payment.settingForm.credentials.cardTitle\')">\n				 \n		{% block novalnet_payment_content_card_channel_config_credentials_card_container %}\n			<sw-container>\n				\n				{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings %}\n					<div v-if="actualConfigData" class="novalnet_payment-settings-credentials">\n						\n							<sw-alert v-if="projectMode" variant="info" appearance="default" :showIcon="true" :closable="false">\n								{{ $tc(\'novalnet-payment.module.projectInfo\') }}\n							</sw-alert>\n						\n							<div v-html = "$tc(\'novalnet-payment.module.generalInfo\')" class="novalnet_payment-settings-project">\n							</div>\n							<div v-html = "$tc(\'novalnet-payment.module.PaymentConfiguration\')" class="novalnet_payment-settings-project">\n							</div>\n						\n\n						{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_id %}\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.clientId\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.clientId\']"\n												:customInheritationCheckFunction="checkTextFieldInheritance">\n								<template #content="props">\n									<sw-text-field name="NovalnetPayment.settings.clientId"\n												   :value="apiActivationKey == null ? props.currentValue : apiActivationKey"\n												   :label="$tc(\'novalnet-payment.settingForm.credentials.activationKey.label\')"\n												   :helpText="$tc(\'novalnet-payment.settingForm.credentials.activationKey.tooltipText\')"\n												   :disabled="!acl.can(\'novalnet_payment.editor\')"\n												   @update:value="onCheckApi">\n									</sw-text-field>\n								</template>\n							</sw-inherit-wrapper>\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.accessKey\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.accessKey\']"\n												:customInheritationCheckFunction="checkTextFieldInheritance">\n								<template #content="props">\n									<sw-text-field name="NovalnetPayment.settings.accessKey"\n												   :value="paymentAccessKey == null ? props.currentValue : paymentAccessKey"\n												    autocomplete="off"\n												   :label="$tc(\'novalnet-payment.settingForm.credentials.accessKey.label\')"\n												   :helpText="$tc(\'novalnet-payment.settingForm.credentials.accessKey.tooltipText\')"\n												   :disabled="!acl.can(\'novalnet_payment.editor\')"\n												   @update:value="onCheckApi">\n									</sw-text-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n						\n						{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_break %}\n							<br>\n						{% endblock %}\n						\n						{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_secret %}\n						\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.clientKey\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.clientKey\']"\n												:customInheritationCheckFunction="checkTextFieldInheritance">\n								<template #content="props">\n									<sw-text-field name="NovalnetPayment.settings.clientKey"\n												   v-show="shouldDisable"\n												   :value="props.currentValue"\n												   :disabled="!acl.can(\'novalnet_payment.editor\')"\n												   @update:value="props.updateCurrentValue">\n									</sw-text-field>\n								</template>\n							</sw-inherit-wrapper>\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.tariff\']"\n											:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.tariff\']"\n											>\n								<template #content="props">\n									<sw-single-select name="NovalnetPayment.settings.tariff"\n													  :options="tariffOptions"\n													  :label="$tc(\'novalnet-payment.settingForm.credentials.tariff.label\')"\n													  :helpText="$tc(\'novalnet-payment.settingForm.credentials.tariff.tooltipText\')"\n													  :disabled="!acl.can(\'novalnet_payment.editor\')"\n													  :value="props.currentValue"\n													  @update:value="props.updateCurrentValue">\n									</sw-single-select>\n								</template>\n							</sw-inherit-wrapper>\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.emailMode\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.deactivateIp\']"\n											    :customInheritationCheckFunction="checkBoolFieldInheritance">\n								<template #content="props">\n									<sw-switch-field name="NovalnetPayment.settings.emailMode"\n												   :mapInheritance="props"\n												   :label="$tc(\'novalnet-payment.settingForm.credentials.orderEmailMode.label\')"\n												   :helpText="$tc(\'novalnet-payment.settingForm.credentials.orderEmailMode.tooltipText\')"\n												   :value="props.currentValue"\n												   :disabled="props.isInherited || !acl.can(\'novalnet_payment.editor\')"\n												   @update:value="props.updateCurrentValue">\n									</sw-switch-field>\n								</template>\n							</sw-inherit-wrapper>\n							\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.onHoldStatus\']"\n													:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.onHoldStatus\']">\n									<template #content="props">\n										<sw-single-select name="NovalnetPayment.settings.onHoldStatus"\n														  :options="onHoldOptions"\n														  :label="$tc(\'novalnet-payment.settingForm.credentials.onHold.label\')"\n														  :helpText="$tc(\'novalnet-payment.settingForm.credentials.onHold.tooltipText\')"\n														  :placeholder="$tc(\'novalnet-payment.onhold.select\')"\n														  :value="props.currentValue != null ? props.currentValue : onhold"\n														  @update:value="props.updateCurrentValue">\n														  \n										</sw-single-select>\n									</template>\n							</sw-inherit-wrapper>\n							\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.completeStatus\']"\n													:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.completeStatus\']">\n									<template #content="props">\n										<sw-single-select name="NovalnetPayment.settings.completeStatus"\n														  :options="completeOptions"\n														  :label="$tc(\'novalnet-payment.settingForm.credentials.complete.label\')"\n														  :placeholder="$tc(\'novalnet-payment.onhold.select\')"\n														  :helpText="$tc(\'novalnet-payment.settingForm.credentials.complete.tooltipText\')"\n														  :value="props.currentValue != null ? props.currentValue : completed"\n														  @update:value="props.updateCurrentValue">\n														  \n										</sw-single-select>\n									</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n					</div>\n				{% endblock %}\n			</sw-container>\n		{% endblock %}\n\n		{% block novalnet_payment_content_card_channel_loading %}\n            <sw-loader v-if="isLoading"></sw-loader>\n        {% endblock %}\n	</sw-card>\n{% endblock %}\n\n{% block novalnet_payment_content_card_channel_config_merchant_credentials %}\n	<sw-card class="sw-card--grid"\n			 :title="$tc(\'novalnet-payment.settingForm.merchantSettings.cardTitle\')">\n		\n		{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container %}\n			<sw-container>\n			\n				{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings %}\n					<div v-if="actualConfigData" class="novalnet_payment-settings-merchant-credentials">\n\n						{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings_ip %}\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.callbackUrl\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.callbackUrl\']"\n                                                >\n								<template #content="props">\n									<sw-text-field name="NovalnetPayment.settings.callbackUrl"\n												   class="novalnet-payment-callback-field"\n												   :label="$tc(\'novalnet-payment.settingForm.merchantSettings.callbackUrl.label\')"\n												   :helpText="$tc(\'novalnet-payment.settingForm.merchantSettings.callbackUrl.tooltipText\')"\n												   :value="props.currentValue"\n												   @update:value="props.updateCurrentValue">\n									</sw-text-field>\n								</template>\n							</sw-inherit-wrapper>\n							<sw-button-process :disabled="false || !acl.can(\'novalnet_payment.editor\')" :isLoading="buttonLoad"  @click="configureWebhookUrl()">\n										{{ $tc(\'novalnet-payment.settingForm.merchantSettings.callbackUrl.button\') }}\n							</sw-button-process>\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.deactivateIp\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.deactivateIp\']"\n												>\n								<template #content="props">\n									<sw-switch-field name="NovalnetPayment.settings.deactivateIp"\n									                 :mapInheritance="props"\n													 :label="$tc(\'novalnet-payment.settingForm.merchantSettings.deactivateIp.label\')"\n													 :helpText="$tc(\'novalnet-payment.settingForm.merchantSettings.deactivateIp.tooltipText\')"\n													 :disabled="props.isInherited || !acl.can(\'novalnet_payment.editor\')"\n													 :value="props.currentValue"\n													 @update:value="props.updateCurrentValue">\n									</sw-switch-field>\n								</template>\n							</sw-inherit-wrapper>\n							<sw-inherit-wrapper v-model:value="actualConfigData[\'NovalnetPayment.settings.mailTo\']"\n												:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'NovalnetPayment.settings.mailTo\']"\n												:customInheritationCheckFunction="checkTextFieldInheritance" >\n								<template #content="props">\n									<sw-text-field name="NovalnetPayment.settings.mailTo"\n												   :mapInheritance="props"\n												   :isInherited="props.isInherited"\n												   :label="$tc(\'novalnet-payment.settingForm.merchantSettings.mailTo.label\')"\n												   :helpText="$tc(\'novalnet-payment.settingForm.merchantSettings.mailTo.tooltipText\')"\n												   :disabled="props.isInherited || !acl.can(\'novalnet_payment.editor\')"\n												   :value="props.currentValue"\n												   @update:value="props.updateCurrentValue">\n									</sw-text-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n					</div>\n				{% endblock %}\n			</sw-container>\n		{% endblock %}\n	</sw-card>\n{% endblock %}\n',mixins:[r.getByName("notification"),r.getByName("sw-inline-snippet")],inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl","systemConfigApiService"],name:"NovalnetPaymentCredentials",icon:"default-action-settings",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},data(){return{onHoldOptions:[],completeOptions:[],onhold:"authorized",completed:"paid",shouldDisable:!1,projectMode:!1,apiActivationKey:"",paymentAccessKey:"",isLoading:!1,isRequested:"",showMessage:!1,buttonLoad:!1,tariffId:"",tariffOptions:[],NovalnetPaymentCallBackUrl:(window.location.protocol+"//"+window.location.host+window.location.pathname).split("/admin").join("")+"/novalnet/callback"}},inject:["repositoryFactory","NovalPaymentApiCredentialsService","systemConfigApiService","acl"],watch:{actualConfigData:{handler(e){e&&this.$emit("update:value",e)},deep:!0}},computed:{actualConfigData:{get(){return this.allConfigs[this.selectedSalesChannelId]},set(e){this.allConfigs={...this.allConfigs,[this.selectedSalesChannelId]:e}}}},created(){this.createdComponent()},updated(){this.createdComponent()},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},getInheritValue(e){return null==this.selectedSalesChannelId?this.actualConfigData[e]:this.allConfigs.null[e]},onCheckApi(){if("NovalnetPayment.settings.clientId"===event.target.name?this.apiActivationKey=this.actualConfigData["NovalnetPayment.settings.clientId"]=event.target.value:"NovalnetPayment.settings.accessKey"===event.target.name&&(this.paymentAccessKey=this.actualConfigData["NovalnetPayment.settings.accessKey"]=event.target.value),""===this.apiActivationKey&&""===this.paymentAccessKey){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}this.isRequested="",this.showMessage=!0,this.createdComponent()},createdComponent(){let e=this;void 0!==this.actualConfigData&&this.isRequested!==this.selectedSalesChannelId&&(this.isRequested=this.selectedSalesChannelId,this.apiActivationKey=this.actualConfigData["NovalnetPayment.settings.clientId"]||this.allConfigs.null["NovalnetPayment.settings.clientId"],this.paymentAccessKey=this.actualConfigData["NovalnetPayment.settings.accessKey"]||this.allConfigs.null["NovalnetPayment.settings.accessKey"],void 0!==this.apiActivationKey&&""!==this.apiActivationKey&&void 0!==this.paymentAccessKey&&""!==this.paymentAccessKey&&(this.apiActivationKey=this.apiActivationKey.replace(/\s/g,""),this.paymentAccessKey=this.paymentAccessKey.replace(/\s/g,""),this.isLoading=!0,this.NovalPaymentApiCredentialsService.validateApiCredentials(this.apiActivationKey,this.paymentAccessKey).then(t=>{let n=t.serverResponse.result.status_code;this.isLoading=!1,100!==n?(!0===this.showMessage&&this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:t.serverResponse.result.status_text,autoClose:!0}),this.showMessage=!1):(e.tariffOptions=[],t.tariffResponse.forEach(n=>{this.actualConfigData["NovalnetPayment.settings.clientKey"]=t.serverResponse.merchant.client_key,e.tariffOptions.push({value:n.id,label:n.name}),(void 0===this.tariffId||""===this.tariffId)&&(this.tariffId={value:n.id,label:n.name}),!0===this.showMessage&&this.createNotificationSuccess({title:this.$tc("novalnet-payment.settingForm.titleSuccess"),message:this.$tc("novalnet-payment.settingForm.successMessage"),autoClose:!0}),this.showMessage=!1,1===t.serverResponse.merchant.test_mode&&(this.projectMode=!0)}))}).catch(e=>{this.isLoading=!1})),void 0===this.actualConfigData["NovalnetPayment.settings.callbackUrl"]&&(this.actualConfigData["NovalnetPayment.settings.callbackUrl"]=this.NovalnetPaymentCallBackUrl)),this.onHoldOptions=[{value:"open",label:this.$tc("novalnet-payment.onhold.open")},{value:"process",label:this.$tc("novalnet-payment.onhold.process")},{value:"authorized",label:this.$tc("novalnet-payment.onhold.authorized")},{value:"cancel",label:this.$tc("novalnet-payment.onhold.cancel")},{value:"failed",label:this.$tc("novalnet-payment.onhold.failed")}],this.completeOptions=[{value:"paid",label:this.$tc("novalnet-payment.onhold.paid")},{value:"paidPartially",label:this.$tc("novalnet-payment.onhold.paidPartially")},{value:"cancel",label:this.$tc("novalnet-payment.onhold.cancel")},{value:"failed",label:this.$tc("novalnet-payment.onhold.failed")}]},configureWebhookUrl(){let e=this.actualConfigData["NovalnetPayment.settings.clientId"]||this.allConfigs.null["NovalnetPayment.settings.clientId"],t=this.actualConfigData["NovalnetPayment.settings.accessKey"]||this.allConfigs.null["NovalnetPayment.settings.accessKey"],n=this.actualConfigData["NovalnetPayment.settings.callbackUrl"]||this.allConfigs.null["NovalnetPayment.settings.callbackUrl"];if(void 0===e||""===e||void 0===t||""===t){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}if(n){if(!1===/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,}(:[0-9]{1,5})?(\/.*)?$/i.test(n))return this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.webhookUrlFailure")}),!1;this.buttonLoad=!0,this.NovalPaymentApiCredentialsService.configureWebhookUrl(n,e,t).then(e=>{void 0!==e.result.status&&null!=e.result.status&&""!==e.result.status&&"SUCCESS"===e.result.status?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.webhookUrlSuccess")}):void 0!==e.result.status_text&&null!=e.result.status_text&&""!==e.result.status_text?this.createNotificationError({message:e.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.webhookUrlFailure")}),this.buttonLoad=!1}).catch(e=>{this.buttonLoad=!1})}}}});let{Component:u}=Shopware;u.register("novalnet-payment-settings-icon",{template:'{% block novalnet_payment_settings_icon %}\n    <img class="sw-settings-index__novalnet-payment-icon" :src="assetFilter(\'novalnetpayment/administration/plugin.png\')" alt="">\n{% endblock %}\n',computed:{assetFilter(){return Shopware.Filter.getByName("asset")}}});let{Component:p,Mixin:h}=Shopware,{Criteria:g}=Shopware.Data;p.override("sw-customer-base-info",{template:'{% block sw_customer_base_metadata_default_payment_content %}\n	 <dd v-if="!customerEditMode"\n        class="sw-customer-base__label-default-payment-method" >       \n            {{ paymentMethod }}\n    </dd>\n{% endblock %}\n',inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[h.getByName("notification")],props:{customer:{type:Object,required:!0}},data(){return{paymentMethod:""}},watch:{customer:{deep:!0,handler(){""!=this.customer&&(null!=this.customer.defaultPaymentMethod.customFields&&void 0!=this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name&&"novalnetpay"==this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name?this.NovalPaymentApiCredentialsService.getCustomerPaymentMethod(this.customer.customerNumber).then(e=>{void 0!=e&&null!=e&&void 0!=e.paymentName&&null!=e.paymentName?this.paymentMethod=e.paymentName:this.paymentMethod=this.customer.defaultPaymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.customer.defaultPaymentMethod.translated.distinguishableName)},immediate:!0}}}),n(650);let{Context:y,Component:v,Filter:f,Utils:b}=Shopware,{Criteria:_}=Shopware.Data,{currency:w}=Shopware.Utils.format;v.override("sw-order-detail-details",{template:'  {% block sw_order_detail_details_payment %}\n	\n	\n	 <sw-order-details-state-card\n        v-if="transaction"\n        :title="$tc(\'sw-order.detailsTab.labelTransactionCard\')"\n        :order="order"\n        :entity="transaction"\n        :state-label="$tc(\'sw-order.stateCard.headlineTransactionState\')"\n        :disabled="!acl.can(\'order.editor\')"\n        @show-status-history="showStateHistoryModal = true"\n        @save-edits="onSaveEdits"\n    >\n\n        \n        {% block sw_order_detail_details_payment_billing_address %}\n        <sw-order-address-selection\n            class="sw-order-detail-details__billing-address"\n            type="billing"\n            :address="billingAddress"\n            :address-id="selectedBillingAddressId"\n            :disabled="!acl.can(\'order.editor\')"\n            :label="$tc(\'sw-order.createBase.detailsBody.labelBillingAddress\')"\n            @change-address="onChangeOrderAddress"\n        />\n        {% endblock %}\n\n        \n        {% block sw_order_detail_details_payment_method_select %}\n		\n		{% if paymentMethod !=\'\' %}\n				<sw-text-field type="text"\n					:label="$tc(\'sw-order.createBase.detailsFooter.labelPaymentMethod\')" \n					:placeholder="$tc(\'sw-order.createBase.detailsFooter.placeholderPaymentMethod\')"\n					:disabled="true"\n					v-model:value="paymentMethod"\n					> \n				</sw-text-field>\n			{% else %}\n				<sw-entity-single-select\n				v-model:value="transaction.paymentMethodId"\n				entity="payment_method"\n				label-property="distinguishableName"\n				disabled\n				:criteria="paymentMethodCriteria"\n				:label="$tc(\'sw-order.createBase.detailsFooter.labelPaymentMethod\')"\n				:placeholder="$tc(\'sw-order.createBase.detailsFooter.placeholderPaymentMethod\')"\n				show-clearable-button\n				/>\n			{% endif %}	\n        \n        {% endblock %}\n\n    </sw-order-details-state-card>\n   \n	\n	{% block sw_order_detail_details_payment_novalnet_seaction %}\n		<template v-if="isNovalnetPayment" >\n			<sw-order-details-state-card\n				v-if="transaction"\n				:title="$tc(\'novalnet-payment.module.title\')"\n				:order="order"\n				:entity="transaction"\n				:state-label="$tc(\'sw-order.stateCard.headlineTransactionState\')"\n				:disabled="!acl.can(\'order.editor\')"\n				@show-status-history="showStateHistoryModal = true"\n				@save-edits="onSaveEdits">\n				\n				\n				<div class="novalnet-payment-buyer-notification">\n					{# Logo #}\n					{% block novalnet_payment_order_buyer_info %}\n						<div class="novalnet-payment-buyer-notification-icon-container" >\n							<img class="novalnet-payment-buyer-info-icon" :src="assetFilter(\'novalnetpayment/static/img/plugin.png\')" alt=""\n								 >\n						</div>\n					{% endblock %}\n\n					{# Full name and E-Mail address #}\n					{% block novalnet_payment_order_buyer_info_name_container %}\n						<div class="novalnet-payment-buyer-info-name">\n\n							{% block novalnet_payment_order_buyer_info_name_container_name %}\n								<div class="novalnet-payment-buyer-info-full-name">\n									{{ order.orderCustomer.firstName }} {{ order.orderCustomer.lastName }}\n								</div>\n							{% endblock %}\n\n							{% block novalnet_payment_order_buyer_info_name_container_email %}\n								<div class="novalnet-payment-buyer-info-email">\n									{{ order.orderCustomer.email }}\n								</div>\n							{% endblock %}\n						</div>\n					{% endblock %}\n				</div>\n				\n				<sw-container class="novalnet-payment-amount-info" columns="1fr">\n					{% block novalnet_payment_order_component_amount_info %}\n						<div class="novalnet-payment-amount-info-total-amount" >\n							{{ displayOrderAmount }}\n						</div>\n					{% endblock %}\n					\n					{% block novalnet_payment_amount_info_captured_amount %}\n						<div class="novalnet-payment-amount-captured-amount" >\n\n							{% block novalnet_payment_amount_info_captured_amount %}\n								+ {{ displayPaidAmount }}\n							{% endblock %}\n\n							{% block novalnet_payment_amount_info_captured_amount_help %}\n								<sw-help-text class="novalnet-payment-captured-amount-help-icon"\n											  tooltipPosition="top"\n											  :text="$tc(\'novalnet-payment.settingForm.extension.paidTooltip\')">\n								</sw-help-text>\n							{% endblock %}\n\n						</div>\n					{% endblock %}\n					\n					{% block novalnet_payment_order_compoenent_amount_info_refuned %}\n						<div class="novalnet-payment-refuned-amount" >\n\n							{% block novalnet_payment_order_compoenent_amount_info_refuned_amount %}\n								- {{ refundedAmount }}\n							{% endblock %}\n\n							{% block novalnet_payment_order_compoenent_amount_info_refuned_help %}\n								<sw-help-text class="novalnet-payment-refuned-amount-help-icon"\n											  tooltipPosition="top"\n											  :text="$tc(\'novalnet-payment.settingForm.extension.refundTooltip\')">\n								</sw-help-text>\n							{% endblock %}\n						</div>\n					{% endblock %}\n\n					{% block novalnet_payment_order_info_date %}\n						<div class="novalnet-payment-amount-info-charge-date" >\n								{{ dateFilter(transaction.createdAt) }}\n						</div>\n					{% endblock %}\n				</sw-container>\n				\n				<sw-container class="novalnet-payment-action-toolbar" rows="1" columns="1fr 1fr 1fr" gap="10px">\n\n					{% block novalnet_payment_order_container_toolbar_refund_button %}\n						<sw-button size="small"\n								   class="novalnet-payment-pay-action-toolbar__button"\n								   v-if="canRefund"\n								   :disabled="!acl.can(\'novalnet_extension.editor\')"\n								   @click="showRefundModal">\n							{{ $tc(\'novalnet-payment.settingForm.extension.refundButton\') }}\n						</sw-button>\n					{% endblock %}\n\n                    {% block novalnet_payment_order_container_toolbar_instalment_cancel_button %}\n                        <sw-button size="small"\n                                   class="novalnet-payment-pay-action-toolbar__button"\n                                   v-if="canInstalmentCancel"\n                                   :disabled="!acl.can(\'novalnet_extension.editor\')"\n                                   @click="showInstalmentCancelModal">\n                            {{ $tc(\'novalnet-payment.settingForm.extension.instalmentCancelLabel\') }}\n                        </sw-button>\n                    {% endblock %}\n               \n                    {% block novalnet_payment_order_container_toolbar_instalment_all_cancel_button %}\n                        <sw-button size="small"\n                                   class="novalnet-payment-pay-action-toolbar__button"\n                                   v-if="canInstalmentAllCancel"\n                                   :disabled="!acl.can(\'novalnet_extension.editor\')"\n                                   @click="showInstalmentAllCancelModal">\n                            {{ $tc(\'novalnet-payment.settingForm.extension.instalmentAllCancelLabel\') }}\n                        </sw-button>\n                    {% endblock %}\n                    \n                    {% block novalnet_payment_order_container_toolbar_instalment_remain_cancel_button %}\n                        <sw-button size="small"\n                                   class="novalnet-payment-pay-action-toolbar__button"\n                                   v-if="canInstalmentRemainCancel"\n                                   :disabled="!acl.can(\'novalnet_extension.editor\')"\n                                   @click="showInstalmentRemainCancelModal">\n                            {{ $tc(\'novalnet-payment.settingForm.extension.instalmentRemainCancelLabel\') }}\n                        </sw-button>\n                    {% endblock %}\n\n					{% block novalnet_payment_order_container_toolbar_capture_button %}\n						<sw-button size="small"\n								   class="novalnet-payment-pay-action-toolbar__button"\n								   v-if="canCaptureVoid"\n								   :disabled="!acl.can(\'novalnet_extension.editor\')"\n								   @click="showConfirmModal">\n							{{ $tc(\'novalnet-payment.settingForm.extension.confirmLabel\') }}\n						</sw-button>\n					{% endblock %}\n\n					{% block novalnet_payment_order_container_toolbar_cancel_button %}\n						<sw-button size="small"\n								   class="novalnet-payment-pay-action-toolbar__button"\n								   v-if="canCaptureVoid"\n								   :disabled="!acl.can(\'novalnet_extension.editor\')"\n								   @click="showCancelModal">\n							{{ $tc(\'novalnet-payment.settingForm.extension.cancelLabel\') }}\n						</sw-button>\n					{% endblock %}\n					\n					{% block novalnet_payment_order_container_toolbar_zero_amount_button %}\n						<sw-button size="small"\n								   class="novalnet-payment-pay-action-toolbar__button"\n								   v-if="canZeroAmountBooking"\n								   :disabled="!acl.can(\'novalnet_extension.editor\')"\n								   @click="showZeroAmountBlock">\n							{{ $tc(\'novalnet-payment.settingForm.extension.zeroAmountButton\') }}\n						</sw-button>\n					{% endblock %}\n				</sw-container>\n				\n				<sw-container class="novalnet-payment-pay-empty-container" columns="1fr">\n				</sw-container>\n				\n				<sw-container class="novalnet-payment-pay-info-container" columns="1fr">\n					<hr class="sw-order-detail-state-card__divider">\n					{% block novalnet_payment_order_component_checkout_info_billing_container %}\n						<div class="novalnet-payment_chechout-info-customer-comments" v-if="isNovalnetPayment" >\n	\n							{% block novalnet_payment_order_component_checkout_info_billing_container_headline %}\n								<div class="novalnet-payment-checkout-info-header">\n									{{ $tc(\'novalnet-payment.module.comments\') }}\n								</div>\n							{% endblock %}\n	\n							{% block novalnet_payment_order_component_billing_value %}\n								<span class="novalnet-payment-checkout-info-comments" v-html="novalnetComments" style="line-height:22px;">\n								</span>\n							{% endblock %}\n	\n						</div>\n					{% endblock %}\n				</sw-container>\n				\n				{% block novalnet_payment_order_component_action_toolbar_modals %}\n					<novalnet-payment-refund-modal\n						v-if="refundModalVisible"\n						:refundableAmount="refundableAmount"\n						:order="order"\n						:item="item"\n						@modal-close="closeModals"\n						@reload-payment="reloadPaymentDetails">\n					</novalnet-payment-refund-modal>\n					\n					<novalnet-payment-manage-transaction-modal\n						v-if="confirmModalVisible"\n						:status="status"\n						:order="order"\n						@modal-close="closeModals"\n						@reload-payment="reloadPaymentDetails">\n					</novalnet-payment-manage-transaction-modal>\n					<novalnet-payment-manage-transaction-modal\n						v-if="cancelModalVisible"\n						:status="status"\n						:order="order"\n						@modal-close="closeModals"\n						@reload-payment="reloadPaymentDetails">\n					</novalnet-payment-manage-transaction-modal>\n					\n					<novalnet-payment-book-amount-modal\n						v-if="zeroAmountVisible"\n						:orderAmount="orderAmount"\n						:order="order"\n						@modal-close="closeModals"\n						@reload-payment="reloadPaymentDetails">\n					</novalnet-payment-book-amount-modal>\n					\n					<novalnet-payment-instalment-cancel-modal\n						v-if="instalmentRefundModalVisible"\n						:item="item"\n						:cancelType="cancelType"\n						:order="order"\n						@modal-close="closeModals"\n						@reload-payment="reloadPaymentDetails">\n					</novalnet-payment-instalment-cancel-modal>\n					\n				{% endblock %}\n				\n					\n			</sw-order-details-state-card>\n			\n			<sw-card :title="$tc(\'novalnet-payment.settingForm.instalmentInfo\')" v-if="canInstalmentShow">\n					<template #grid>\n						<sw-data-grid\n							:dataSource="InstalmentInfo"\n							:columns="getInstalmentColums"\n							:compactMode="false"\n							:allowInlineEdit="true"\n							:showSelection="false">\n\n							{% block sw_product_detail_base_ratings_actions %}\n								<template #actions="{ item }">\n									{% block sw_product_detail_base_ratings_actions_edit %}\n										<sw-context-menu-item\n											class="sw-product-detail-base__review-edit"\n											@click="instalmentRefund(item)"\n											:disabled="disableInstalmentRefund(item)">\n											{{ $tc(\'novalnet-payment.settingForm.extension.refundButton\') }}\n										</sw-context-menu-item>\n									{% endblock %}\n								</template>\n							{% endblock %}\n\n						</sw-data-grid>\n					</template>\n            </sw-card>\n			\n		</template>\n		\n	{% endblock %}\n{% endblock %}\n',inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:["notification"],props:{orderId:{type:String,required:!0},paymentDetails:{type:Object,required:!0}},data(){return{status:0,displayPaidAmount:0,refundedAmount:0,orderAmount:0,displayOrderAmount:0,InstalmentInfo:[],item:{},novalnetComments:"",isNovalnetPayment:!1,refundModalVisible:!1,confirmModalVisible:!1,zeroAmountVisible:!1,cancelModalVisible:!1,canInstalmentAllCancel:!1,canInstalmentRemainCancel:!1,instalmentRefundModalVisible:!1,canCaptureVoid:!1,canRefund:!1,canZeroAmountBooking:!1,canInstalmentCancel:!1,canInstalmentShow:!1,instalmentRefundAmount:0,paymentMethod:"",payLater:["INVOICE","CASHPAYMENT","MULTIBANCO","PREPAYMENT"],instalmentPayments:["INSTALMENT_INVOICE","INSTALMENT_DIRECT_DEBIT_SEPA"],onholdStatus:["91","99","98","85"],refundableAmount:0}},computed:{getInstalmentColums(){return[{property:"number",dataIndex:"number",label:this.$tc("novalnet-payment.settingForm.instalmentNumber"),width:"50px"},{property:"reference",dataIndex:"reference",label:this.$tc("novalnet-payment.settingForm.instalmentReference"),width:"120px"},{property:"amount",dataIndex:"amount",label:this.$tc("novalnet-payment.settingForm.instalmentAmount"),width:"80px"},{property:"totalAmount",dataIndex:"totalAmount",visible:!1},{property:"refundAmount",dataIndex:"refundAmount",visible:!1},{property:"nextCycle",dataIndex:"nextCycle",label:this.$tc("novalnet-payment.settingForm.instalmentDate"),width:"120px"},{property:"status",dataIndex:"status",label:this.$tc("novalnet-payment.settingForm.instalmentStatus"),width:"80px"}]},assetFilter(){return Shopware.Filter.getByName("asset")},dateFilter(){return Shopware.Filter.getByName("date")}},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return;let e=this.repositoryFactory.create("order"),t=new _(1,1);t.addAssociation("transactions"),t.addAssociation("currency"),t.addFilter(_.equals("id",this.orderId)),e.search(t,y.api).then(e=>{let t=e.first();if(!t)return;this.identifier||(this.identifier=t.orderNumber);let n=!1,a="",o=this.$tc("novalnet-payment.module.comments");t.transactions.sort((e,t)=>new Date(t.createdAt)-new Date(e.createdAt)).forEach(e=>{if(e.customFields&&e.customFields.novalnet_comments)return n=!0,""!=a&&(a+="<dt>"+o+"</dt>"),a+=e.customFields.novalnet_comments.split("/ ").join("<br />"),!0}),n?(this.novalnetComments=a.split("&&").join("<dt><strong>"+o+"</strong></dt>"),this.setNovalnetPayment(!0)):this.setNovalnetPayment(!1),null!=this.order.transactions.last().paymentMethod.customFields&&void 0!=this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name&&"novalnetpay"==this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name?null!=this.order.transactions.last().customFields&&void 0!=this.order.transactions.last().customFields.novalnet_payment_name&&""!=this.order.transactions.last().customFields.novalnet_payment_name&&(this.paymentMethod=this.order.transactions.last().customFields.novalnet_payment_name):this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName,this.orderAmount=Math.round(100*Number(t.price.totalPrice)),this.displayOrderAmount=w(t.price.totalPrice,t.currency.shortName),this.displayPaidAmount=w(0,t.currency.shortName),this.refundedAmount=w(0,t.currency.shortName),this.canCaptureVoid=!1,this.canRefund=!1,this.canZeroAmountBooking=!1,this.canInstalmentCancel=!1,this.canInstalmentShow=!1,this.InstalmentInfo=[],this.canInstalmentAllCancel=!1,this.canInstalmentRemainCancel=!1,this.NovalPaymentApiCredentialsService.getNovalnetAmount(t.orderNumber).then(e=>{if(""!=e.data&&void 0!=e.data&&e.data.gatewayStatus){let a=JSON.parse(e.data.additionalDetails);if(this.refundableAmount=Number(e.data.amount)-Number(e.data.refundedAmount),0!=e.data.amount&&(this.displayOrderAmount=w(e.data.amount/100,t.currency.shortName)),"ON_HOLD"==e.data.gatewayStatus||this.onholdStatus.includes(e.data.gatewayStatus)?this.canCaptureVoid=!0:(e.data.amount>0&&"CONFIRMED"==e.data.gatewayStatus&&!this.instalmentPayments.includes(e.data.paymentType)&&Number(e.data.refundedAmount)<Number(e.data.amount)||"PENDING"==e.data.gatewayStatus&&this.payLater.includes(e.data.paymentType))&&"MULTIBANCO"!=e.data.paymentType?this.canRefund=!0:this.instalmentPayments.includes(e.data.paymentType)&&"CONFIRMED"==e.data.gatewayStatus&&!a.cancelType?this.canInstalmentCancel=!0:("CREDITCARD"==e.data.paymentType||"DIRECT_DEBIT_SEPA"==e.data.paymentType||"GOOGLEPAY"==e.data.paymentType||"APPLEPAY"==e.data.paymentType||"DIRECT_DEBIT_ACH"==e.data.paymentType)&&0==Number(e.data.amount)&&0!=this.orderAmount&&"FAILURE"!=e.data.gatewayStatus&&(this.canZeroAmountBooking=!0),""==this.paymentMethod&&void 0!=a.payment_name&&""!=a.payment_name&&(this.paymentMethod=a.payment_name),0!=e.data.paidAmount&&(this.displayPaidAmount=w(e.data.paidAmount/100,t.currency.shortName)),0!=e.data.refundedAmount&&(this.refundedAmount=w(e.data.refundedAmount/100,t.currency.shortName)),this.instalmentPayments.includes(e.data.paymentType)&&"CONFIRMED"==e.data.gatewayStatus&&""!=a.InstalmentDetails){this.canInstalmentShow=!0,this.instalmentRefundAmount=e.data.refundedAmount;var n=1;Object.values(a.InstalmentDetails).forEach(e=>{this.InstalmentInfo.push({amount:w(e.amount/100,t.currency.shortName),totalAmount:e.amount,nextCycle:e.cycleDate,reference:e.reference,status:e.status,refundAmount:e.refundAmount,number:n}),n++}),0!=e.data.refundedAmount&&(this.canInstalmentCancel=!1,this.canInstalmentAllCancel=!1),void 0!=this.InstalmentInfo&&null!=this.InstalmentInfo&&this.InstalmentInfo.forEach(e=>{(""==e.reference||null==e.reference)&&(this.canInstalmentRemainCancel=!0)}),void 0!=a.cancelType&&""!=a.cancelType&&(this.canInstalmentRemainCancel=!1),!1==this.canInstalmentRemainCancel&&0==e.data.refundedAmount?(this.canInstalmentCancel=!1,this.canInstalmentAllCancel=!0):!0==this.canInstalmentCancel&&(this.canInstalmentRemainCancel=!1)}}}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})})}).finally(()=>{this.setNovalnetPayment(!1)})},immediate:!0}},methods:{setNovalnetPayment(e){e&&(this.isNovalnetPayment=e)},showConfirmModal(){this.status=100,this.confirmModalVisible=!0},showRefundModal(){this.refundModalVisible=!0},closeModals(){this.refundModalVisible=!1,this.confirmModalVisible=!1,this.cancelModalVisible=!1,this.zeroAmountVisible=!1,this.instalmentRefundModalVisible=!1},showInstalmentAllCancelModal(){this.instalmentRefundModalVisible=!0,this.cancelType="CANCEL_ALL_CYCLES"},showInstalmentRemainCancelModal(){this.instalmentRefundModalVisible=!0,this.cancelType="CANCEL_REMAINING_CYCLES"},showCancelModal(){this.status=103,this.cancelModalVisible=!0},showZeroAmountBlock(){this.zeroAmountVisible=!0},reloadPaymentDetails(){this.closeModals(),this.$nextTick().then(()=>{this.$emit("reload-payment")})},instalmentRefund(e){this.refundableAmount=e.totalAmount-e.refundAmount,this.item=e,this.refundModalVisible=!0},showInstalmentCancelModal(){void 0!=this.InstalmentInfo&&null!=this.InstalmentInfo&&this.InstalmentInfo.forEach(e=>{(""==e.reference||null==e.reference)&&(this.canInstalmentRemainCancel=!0)}),0==this.instalmentRefundAmount&&(this.canInstalmentAllCancel=!0),this.canInstalmentCancel=!1},disableInstalmentRefund(e){return void 0==e.reference||""==e.reference||e.refundAmount>=e.totalAmount||!this.acl.can("novalnet_extension.editor")}}});let{Component:C,Mixin:k}=Shopware,{currency:N}=Shopware.Utils.format;C.register("novalnet-payment-refund-modal",{template:'{% block novalnet_payment_order_refund_modal %}\n    <sw-modal :title="$tc(\'novalnet-payment.settingForm.extension.refundButton\')"\n              @modal-close="closeModal">\n		\n			{% block novalnet_payment_order_refund_modal_content %}\n				<template #default>\n\n					{% block novalnet_payment_order_refund_modal_content_info_text %}\n						<sw-container columns="1fr"\n									gap="0px 30px">\n							<sw-number-field v-model:value="refundAmount"\n										:max="item.amount"\n										:min="0"\n										:allowEmpty="false"\n										numberType="int"\n										:label="$tc(\'novalnet-payment.settingForm.extension.amountTitle\')"\n										:helpText="$tc(\'novalnet-payment.settingForm.extension.refundDescription\')"\n										>\n							</sw-number-field>\n							<sw-text-field v-model:value="reason"\n									:placeholder="$tc(\'novalnet-payment.settingForm.extension.refundReference\')"\n									:label="$tc(\'novalnet-payment.settingForm.extension.refundReference\')">\n							</sw-text-field>\n						</sw-container>\n					{% endblock %}\n				</template>\n			{% endblock %}\n\n			{% block novalnet_payment_order_refund_modal_actions %}\n				<template #modal-footer>\n\n					{% block novalnet_payment_order_refund_modal_confirm %}\n						<sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetRefund">\n							{{ $tc(\'novalnet-payment.settingForm.extension.refundButton\') }}\n						</sw-button>\n					{% endblock %}\n				</template>\n			{% endblock %}\n    </sw-modal>\n{% endblock %}\n',props:{refundableAmount:{type:Number,required:!0},order:{type:Object,required:!0},item:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[k.getByName("notification"),k.getByName("sw-inline-snippet")],data(){return{reason:"",disable:!1,refundAmount:this.refundableAmount}},methods:{closeModal(){this.$emit("modal-close")},novalnetRefund(){let e=this.reason,t=this.order.orderNumber;if("0"==this.refundAmount){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.amountRefundError")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.refundPayment(t,this.refundAmount,e,this.item.reference).then(e=>{void 0!=e.result&&null!=e.result?void 0!=e.result.status&&null!=e.result.status&&"SUCCESS"==e.result.status?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.refundSuccess")}):void 0!=e.result.status_text&&null!=e.result.status_text&&""!=e.result.status_text?this.createNotificationError({message:e.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`,autoClose:!1}),this.$emit("modal-close")})}}});let{Component:S,Mixin:P}=Shopware,{currency:A}=Shopware.Utils.format;S.register("novalnet-payment-manage-transaction-modal",{template:'{% block novalnet_payment_order_manage_modal %}\n    <sw-modal :title="$tc(\'novalnet-payment.settingForm.extension.Managetitle\')"\n              @modal-close="closeModal">\n\n        {% block novalnet_payment_order_manage_modal_content %}\n            <template #default>\n\n                {% block novalnet_payment_order_manage_modal_content_info_text %}\n                    <sw-container columns="1fr" gap="0px 30px">\n						<div v-if="status == 100">\n							{{ $tc(\'novalnet-payment.settingForm.extension.confirmMessage\') }}\n						</div>\n						<div v-if="status == 103">\n							{{ $tc(\'novalnet-payment.settingForm.extension.cancelMessage\') }}\n						</div>\n					</sw-container>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block novalnet_payment_order_manage_modal_actions %}\n            <template #modal-footer>\n\n                {% block novalnet_payment_order_manage_modal_confirm %}\n                    <sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetOnhold">\n						{{ $tc(\'novalnet-payment.settingForm.extension.confirmLabel\') }}\n					</sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n',props:{status:{type:Number,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[P.getByName("notification"),P.getByName("sw-inline-snippet")],data(){return{confirm:!0,cancel:!1,disable:!1}},methods:{closeModal(){this.$emit("modal-close")},novalnetOnhold(){let e=this.status,t=this.order.orderNumber;if(""==e||void 0==e){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.extension.onholdLabel")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.managePayment(t,e).then(t=>{""!=t?"SUCCESS"==t.result.status?100==e?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.onholdSuccess")}):this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.onholdCancel")}):void 0!=t.result.status_text&&null!=t.result.status_text&&""!=t.result.status_text?this.createNotificationError({message:t.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`,autoClose:!1}),this.$emit("modal-close")})}}});let{Component:x,Mixin:I}=Shopware,{currency:M}=Shopware.Utils.format;x.register("novalnet-payment-book-amount-modal",{template:'{% block novalnet_payment_order_refund_modal %}\n    <sw-modal :title="$tc(\'novalnet-payment.settingForm.extension.zeroAmountButton\')"\n              @modal-close="closeModal">\n		\n			{% block novalnet_payment_order_zero_amount_modal_content %}\n				<template #default>\n\n					{% block novalnet_payment_order_zero_amount_modal_content_info_text %}\n						<sw-container columns="1fr"\n									gap="0px 30px">\n							<sw-number-field v-model:value="bookAmount"\n										:min="0"\n										:allowEmpty="false"\n										numberType="int"\n										:label="$tc(\'novalnet-payment.settingForm.extension.zeroAmountTitle\')"\n										:helpText="$tc(\'novalnet-payment.settingForm.extension.zeroAmountDescription\')"\n										>\n							</sw-number-field>\n						</sw-container>\n					{% endblock %}\n				</template>\n			{% endblock %}\n\n			{% block novalnet_payment_order_zero_amount_modal_actions %}\n				<template #modal-footer>\n\n					{% block novalnet_payment_order_zero_amount_modal_confirm %}\n						<sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetBookAmount">\n							{{ $tc(\'novalnet-payment.settingForm.extension.bookButton\') }}\n						</sw-button>\n					{% endblock %}\n				</template>\n			{% endblock %}\n    </sw-modal>\n{% endblock %}\n',props:{orderAmount:{type:Number,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[I.getByName("notification"),I.getByName("sw-inline-snippet")],data(){return{reason:"",disable:!1,bookAmount:this.orderAmount}},methods:{closeModal(){this.$emit("modal-close")},novalnetBookAmount(){let e=this.order.orderNumber;if(0==this.bookAmount){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.amountError")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.BookOrderAmount(e,this.bookAmount).then(e=>{void 0!=e.result&&null!=e.result?void 0!=e.result.status&&null!=e.result.status&&"SUCCESS"==e.result.status?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.bookedSuccess")}):void 0!=e.result.status_text&&null!=e.result.status_text&&""!=e.result.status_text?this.createNotificationError({message:e.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`,autoClose:!1}),this.$emit("modal-close")})}}});let{Component:F,Mixin:$}=Shopware,{currency:T}=Shopware.Utils.format;F.register("novalnet-payment-instalment-cancel-modal",{template:'{% block novalnet_payment_order_cancel_modal %}\n    <sw-modal :title="$tc(\'novalnet-payment.settingForm.extension.instalmentCancelLabel\')"\n              @modal-close="closeModal">\n\n			{% block novalnet_payment_order_cancel_modal_content %}\n				<template #default>\n\n					{% block novalnet_payment_order_cancel_modal_content_info_text %}\n                        <sw-container columns="1fr" gap="0px 30px">\n                            <div v-if="cancelType == \'CANCEL_ALL_CYCLES\' ">\n								{{ $tc(\'novalnet-payment.settingForm.extension.cancelAllCycleMessage\') }}\n							</div>\n							<div v-if="cancelType == \'CANCEL_REMAINING_CYCLES\' ">\n								{{ $tc(\'novalnet-payment.settingForm.extension.cancelRemainingCycleMessage\') }}\n							</div>\n                        </sw-container>\n					{% endblock %}\n				</template>\n			{% endblock %}\n\n			{% block novalnet_payment_order_cancel_modal_actions %}\n				<template #modal-footer>\n\n					{% block novalnet_payment_order_cancel_modal_confirm %}\n						<sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetInstalmentCancel">\n							{{ $tc(\'novalnet-payment.settingForm.extension.confirmLabel\') }}\n						</sw-button>\n					{% endblock %}\n				</template>\n			{% endblock %}\n    </sw-modal>\n{% endblock %}\n',props:{cancelType:{type:String,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[$.getByName("notification"),$.getByName("sw-inline-snippet")],data(){return{disable:!1}},methods:{closeModal(){this.$emit("modal-close")},novalnetInstalmentCancel(){let e=this.order.orderNumber,t=this.cancelType;this.disable=!0,this.NovalPaymentApiCredentialsService.instalmentCancel(e,t).then(e=>{""!=e.result?void 0!=e.result.status&&null!=e.result.status&&"SUCCESS"==e.result.status?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.instalmentSuccessMsg")}):void 0!=e.result.status_text&&null!=e.result.status_text&&""!=e.result.status_text?this.createNotificationError({message:e.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`,autoClose:!1}),this.$emit("modal-close")})}}});let{Component:E,Mixin:B}=Shopware,{Criteria:R}=Shopware.Data;E.override("sw-order-user-card",{template:"{% block sw_order_detail_base_secondary_info_payment %}\n		<template v-if=\"currentOrder.transactions.length > 0\">\n			<dl>\n				<dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt>\n				<dd>\n					{{ paymentMethod }} \n				</dd>\n			</dl>\n		</template>\n{% endblock %}\n",inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[B.getByName("notification")],props:{currentOrder:{type:Object,required:!0},isLoading:{type:Boolean,required:!0}},data(){return{paymentMethod:""}},watch:{currentOrder:{deep:!0,handler(){""!=this.currentOrder&&(null!=this.currentOrder.transactions.last().paymentMethod.customFields&&void 0!=this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name&&"novalnetpay"==this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name?this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.currentOrder.orderNumber).then(e=>{void 0!=e&&null!=e&&void 0!=e.paymentName&&null!=e.paymentName?this.paymentMethod=e.paymentName:this.paymentMethod=this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName)},immediate:!0}}});let{Component:D,Mixin:L}=Shopware,{Criteria:V}=Shopware.Data;D.override("sw-order-general-info",{template:"{% block sw_order_detail_base_general_info_summary_sub_description %}\n	<div class=\"sw-order-general-info__summary-sub-description\">\n		{{ $tc('sw-order.generalTab.info.summary.on') }}\n		{{ dateFilter(order.orderDateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric'\n                }) }}\n		{{ $tc('sw-order.generalTab.info.summary.with') }}\n		{{ paymentMethod }} \n		<template v-if=\"order.deliveries.last()\">\n			{{ $tc('sw-order.generalTab.info.summary.and') }}\n			{{ order.deliveries.last().shippingMethod.translated.name }}\n		</template>\n	</div>\n{% endblock %}\n",inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[L.getByName("notification")],props:{order:{type:Object,required:!0}},data(){return{paymentMethod:""}},watch:{order:{deep:!0,handler(){""!=this.order&&(null!=this.order.transactions.last().paymentMethod.customFields&&void 0!=this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name&&"novalnetpay"==this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name?null!=this.order.transactions.last().customFields&&void 0!=this.order.transactions.last().customFields.novalnet_payment_name&&""!=this.order.transactions.last().customFields.novalnet_payment_name?this.paymentMethod=this.order.transactions.last().customFields.novalnet_payment_name:this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.order.orderNumber).then(e=>{void 0!=e&&null!=e&&void 0!=e.paymentName&&null!=e.paymentName?this.paymentMethod=e.paymentName:this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName)},immediate:!0}}});let{Component:O,State:z,Mixin:U,Filter:K,Context:j,ContextSwitchParameters:H}=Shopware,q=Shopware.Data.Criteria,{currency:W}=Shopware.Utils.format;O.override("sw-order-create-details",{template:'{% block sw_order_create_details_payment %}\n\n	{% parent %}\n	{% block sw_order_create_details_payment_novalnet_seaction %}\n		<template v-if="novalnetPayment" >\n			<sw-card\n				rows="2"  :isLoading="isLoading"\n				:title="$tc(\'novalnet-payment.module.title\')" >\n				<div >\n					<iframe \n						v-if="loaded"\n						id ="adminnovalnetPaymentiframe"\n						width="100%"\n						title="Novalnet Payment Form"\n						style="border: 0px;"\n					    :src="iframe.src">\n					</iframe>\n				</div>\n			\n			</sw-card>	\n		\n		</template>\n		\n	{% endblock %}\n{% endblock %}\n',inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:[U.getByName("notification")],data(){return{isLoading:!1,loaded:!1,shouldDisable:!0,iframe:{src:""},paymentformurl:"",novalnetPayment:!1}},computed:{customer(){return z.get("swOrder").customer},cart(){return z.get("swOrder").cart},currency(){return z.get("swOrder").context.currency},cartPrice(){return this.cart.price},salesChannelContext(){return z.get("swOrder").context}},watch:{salesChannelContext:{deep:!0,handler(){if(!this.customer||!this.isCartTokenAvailable)return;this.isLoading=!0;let e=this.repositoryFactory.create("payment_method"),t=new q(1,1);t.addFilter(q.equals("id",this.salesChannelContext.paymentMethod.id)),e.search(t,j.api).then(e=>{let t=e.first();if(t&&(this.novalnetPayment=!1,null!=t.customFields&&"novalnetpay"==t.customFields.novalnet_payment_method_name)){if(null==this.currency){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.currencyFailureMessage")});return}if(null!=this.cartPrice&&(0==this.cartPrice.totalPrice||null==this.cartPrice.totalPrice)){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.lineitemFailureMessage")});return}this.novalnetPayment=!0;let e="",t="";null!==this.salesChannelContext.customer.defaultBillingAddress?e=this.salesChannelContext.customer.defaultBillingAddress:null!=this.context.billingAddressId&&this.customer.addresses.forEach(t=>{t.id==this.context.billingAddressId&&(e=t)}),null!==this.salesChannelContext.customer.defaultShippingAddress?t=this.salesChannelContext.customer.defaultShippingAddress:null!=this.context.shippingAddressId&&this.customer.addresses.forEach(t=>{t.id==this.context.shippingAddressId&&(e=t)});let n=this.NovalPaymentApiCredentialsService,a=this.customer;this.NovalPaymentApiCredentialsService.novalnetPayment(t,e,this.cartPrice.totalPrice,this.currency.isoCode,this.customer).then(e=>{if(""!=e&&void 0!=e&&"SUCCESS"==e.result.status&&""!=e.result.redirect_url&&void 0!=e.result.redirect_url){this.iframe.src=e.result.redirect_url,this.loaded=!0;let t=document.createElement("script");t.setAttribute("src","https://cdn.novalnet.de/js/pv13/checkout.js?"+new Date().getTime()),t.type="text/javascript",document.head.appendChild(t),this.paymentformurl=t,this.paymentformurl.addEventListener("load",()=>{document.querySelector(".sw-button-process").disabled=!1,this.onWindowLoad(n,a)})}}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})})}})}},customer:{deep:!0,handler(){if(null==this.customer)return},immediate:!0}},methods:{onWindowLoad(e,t){let n=new NovalnetPaymentForm,a=document.querySelector(".sw-button-process"),o={iframe:"#adminnovalnetPaymentiframe",initForm:{uncheckPayments:!1,showButton:!1}};n.initiate(o),n.validationResponse(e=>{n.initiate(o)}),n.selectedPayment(function(e){e.payment_details.type}),a.addEventListener("click",a=>{a.preventDefault(),a.stopImmediatePropagation(),n.getPayment(function(n){let a=JSON.stringify(n);e.paymentValue(a,t).then(e=>{})})})}}}),n(394);var Z=JSON.parse('{"novalnet-payment":{"module":{"title":"Novalnet","description":"PCI-konforme und l\xfcckenlose Integration mit verschiedenen Zahlungsarten und Zahlungsdienstleistungen auf einer Plattform.","projectInfo":"Ihr Projekt befindet sich im Testmodus","comments":"Kommentare","generalInfo":"Bevor Sie beginnen, lesen Sie bitte die <a href=\'https://www.novalnet.com/docs/plugins/installation-guides/shopware-6-installation-guide.pdf\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Installationsanleitung </a> und melden Sie sich mit Ihrem H\xe4ndlerkonto im <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin-Portal </a> an. Um ein H\xe4ndlerkonto zu erhalten, senden Sie bitte eine E-Mail an <a href=\'mailto:salesnovalnet.de\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> salesnovalnet.de </a> oder rufen Sie uns unter +49 89 923068320 an","globalTitle":"Konfigurationseinstellungen","installationInfo":"F\xfcr die Einrichtung und Verwendung des Plugins finden Sie die Installationsanleitung <a href=\'https://www.novalnet.com/docs/plugins/installation-guides/shopware-6-installation-guide.pdf\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'>Here</a>","PaymentConfiguration":"<span style=\'font-weight: bold; color:red;\'>Wichtiger Hinweis:</span>Die Konfiguration der Zahlungsplugins sind jetzt im <a href=\'https://admin.novalnet.de/\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin Portal</a> verf\xfcgbar. Navigieren Sie zu <b> Projekts > W\xe4hlen Sie Ihr Projekt > Konfiguration des Zahlungsplugins, </b> um sie zu konfigurieren. <br><br> Novalnet erm\xf6glicht es Ihnen, das Verhalten der Zahlungsmethode zu \xfcberpr\xfcfen, bevor Sie in den Produktionsmodus gehen, indem Sie Testzahlungsdaten verwenden. Zugang zu den Novalnet-Testzahlungsdaten finden Sie <a href=\'https://developer.novalnet.de/testing\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Hier </a>"},"settingForm":{"title":"Novalnet","statusTitle":"Zustand","amountError":"Ung\xfcltiger Betrag","buttons":{"save":"Speichern"},"credentials":{"cardTitle":"Novalnet API-Konfiguration","activationKey":{"label":"Aktivierungsschl\xfcssel des Produkts *","tooltipText":"Ihr Produktaktivierungsschl\xfcssel ist ein eindeutiger Token f\xfcr die H\xe4ndlerauthentifizierung und Zahlungsabwicklung.Ihr Produktaktivierungsschl\xfcssel ist ein eindeutiges Token f\xfcr die H\xe4ndlerauthentifizierung und Zahlungsabwicklung. Ihren Produktaktivierungsschl\xfcssel finden Sie im <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin-Portal </a>: Projekts > W\xe4hlen Sie Ihr Projekt > API-Anmeldeinformationen > API-Signatur (Produktaktivierungsschl\xfcssel)"},"accessKey":{"label":"Zahlungs-Zugriffsschl\xfcssel *","tooltipText":"Ihr geheimer Schl\xfcssel zur Verschl\xfcsselung der Daten, um Manipulation und Betrug zu vermeiden. Ihren Paymentzugriffsschl\xfcssel finden Sie im <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin-Portal </a>: Projekts > W\xe4hlen Sie Ihr Projekt > API-Anmeldeinformationen > Paymentzugriffsschl\xfcssel"},"tariff":{"label":"Auswahl der Tarif-ID *","tooltipText":"W\xe4hlen Sie eine Tarif-ID, die dem bevorzugten Tarifplan entspricht, den Sie im Novalnet Admin-Portal f\xfcr dieses Projekt erstellt haben","emptyText":"Tarif-ID ausw\xe4hlen"},"orderEmailMode":{"label":" Bestellbest\xe4tigung per E-Mail aktivieren","tooltipText":"Aktivieren Sie diesen Reiter, um eine weitere Bestellbest\xe4tigungs-E-Mail mit Novalnet-Transaktionsdetails an den Endkunden f\xfcr Bestellungen zu senden, die \xfcber Rechnung, Rechnung mit Zahlungsgarantie,Lastschrift SEPA mit Zahlungsgarantie, Ratenzahlung per Rechnung,Ratenzahlung per SEPA-Lastschrift, Vorkasse, Barzahlen oder Multibanco get\xe4tigt wurden. (Standardm\xe4\xdfig wird die erste Bestellbest\xe4tigungs-E-Mail an Endkunden ohne Novalnet-Transaktionsdetails gesendet.)"},"onHold":{"label":"Status f\xfcr on-hold-Zahlungen","tooltipText":"Status, der verwendet wird, wenn die Zahlung autorisieren."},"complete":{"label":"Status f\xfcr eingegangene Zahlungen","tooltipText":"Status, der verwendet wird, wenn die Zahlung erfolgreich abgeschlossen ist."}},"merchantSettings":{"cardTitle":"Benachrichtigungs- / Webhook-URL festlegen","deactivateIp":{"label":"Manuelles Testen der Benachrichtigungs / Webhook-URL erlauben","tooltipText":"Aktivieren Sie diese Option, um die Novalnet-Benachrichtigungs-/Webhook-URL manuell zu testen. Deaktivieren Sie die Option, bevor Sie Ihren Shop liveschalten, um unautorisierte Zugriffe von Dritten zu blockieren."},"mailTo":{"label":"E-Mails senden an","tooltipText":"E-Mail-Benachrichtigungen werden an diese E-Mail-Adresse gesendet"},"callbackUrl":{"label":"Benachrichtigungs- / Webhook-URL","button":"Konfigurieren","tooltipText":"Sie m\xfcssen die folgende Webhook-URL im <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'>Novalnet Admin-Portal</a> hinzuf\xfcgen. Dadurch k\xf6nnen Sie Benachrichtigungen \xfcber den Transaktionsstatus erhalten."}},"extension":{"paidTooltip":"Gezahlter Gesamtbetrag","refundTooltip":"R\xfcckerstatteter Betrag","refundButton":"R\xfcckerstattung","amountTitle":"R\xfcckerstattungsbetrag","refundDescription":"Geben Sie bitte den erstatteten Betrag ein (in der kleinsten W\xe4hrungseinheit, z.B. 100 Cent = entsprechen 1.00 EUR)","refundReference":"Grund der R\xfcckerstattung/Stornierung","confirmLabel":"Best\xe4tigen","cancelLabel":"Stornieren","cancelAllCycleMessage":"Sind Sie sicher, dass Sie alle Ratenzahlungen stornieren wollen?","cancelRemainingCycleMessage":"Sind Sie sicher, dass Sie die verbleibende Zyklusrate stornieren m\xf6chten?","Managetitle":"Transaktion verwalten","confirmMessage":"Sind Sie sicher, dass Sie die Zahlung einziehen m\xf6chten?","cancelMessage":"Sind Sie sicher, dass Sie die Zahlung stornieren wollen?","refundSuccess":"Die R\xfcckerstattung war erfolgreich.","onholdSuccess":"Die Transaktion wurde best\xe4tigt","onholdCancel":"Die Transaktion wurde storniert","instalmentCancelLabel":"Ratenzahlung Stornieren","instalmentAllCancelLabel":"Gesamte Ratenzahlung stornieren","instalmentRemainCancelLabel":"Alle \xfcbrigen Installationen abbrechen","instalmentSuccessMsg":"Die Ratenzahlung wurde erfolgreich abgebrochen.","zeroAmountButton":"Buchbetrag","bookedSuccess":"Ihr gebuchter Betrag war erfolgreich.","zeroAmountTitle":"Buchungsbetrag der Transaktion","zeroAmountDescription":"Bitte geben Sie den Betrag ein (in der kleinsten W\xe4hrungseinheit, z.B. 100, was 1,00 entspricht)","bookButton":"Buchen Sie"},"titleSuccess":"Success","successMessage":"Die Novalnet-H\xe4ndlerdaten wurden erfolgreich eingestellt.","titleError":"Error","apiFailureMessage":"Konfigurieren Sie bitte die zentralen Novalnet-Einstellungen","customerFailureMessage":"Bitte w\xe4hlen Sie Ihren Kunden","currencyFailureMessage":"Bitte w\xe4hlen Sie eine W\xe4hrung","lineitemFailureMessage":"Bitte Produkt hinzuf\xfcgen","amountRefundError":"Ung\xfcltiger R\xfcckerstattungsbetrag","failureMessage":"Bitte f\xfcllen Sie die erforderlichen Felder aus","instalmentNumber":"S.Nr","instalmentReference":"Novalnet-Transaktions-ID","instalmentDate":"N\xe4chste Rate f\xe4llig am","instalmentAmount":"Betrag","instalmentStatus":"Status","instalmentInfo":"Zusammenfassung der Ratenzahlung","webhookUrlFailure":"Bitte geben Sie eine g\xfcltige Webhook-URL ein","webhookUrlSuccess":"Callbackskript-/ Webhook-URL wurde erfolgreich im Novalnet Admin Portal konfiguriert","emptyMessage":"Aktivierungsschl\xfcssel f\xfcr das Produkt eingeben"},"onhold":{"open":"Offen","process":"In Bearbeitung","authorized":"Autorisiert","cancel":"Abgebrochen","failed":"Fehlgeschlagen","unconfirmed":"Unbest\xe4tigt","paidPartially":"Bezahlt (teilweise)","paid":"Bezahlt","select":"--Bitte ausw\xe4hlen--"}},"sw-privileges":{"permissions":{"novalnet_extension":{"label":"Novalnet-Erweiterungen"},"parents":{"novalnet_payment":"Novalnet"},"novalnet_payment":{"label":"Novalnet Einstellungen"}}}}'),G=JSON.parse('{"novalnet-payment":{"module":{"title":"Novalnet","description":"PCI compliant and seamless integration with various payment types and payment processing services in one unique platform...","projectInfo":"Your project is in test mode","comments":"Comments","generalInfo":"Please read the <a href=\'https://www.novalnet.com/docs/plugins/installation-guides/shopware-6-installation-guide.pdf\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Installation Guide </a> before you start and login to the <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin Portal </a> using your merchant account. To get a merchant account, mail to <a href=\'mailto:sales{\'@\'}novalnet.de\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> sales{\'@\'}novalnet.de</a> or call +49 (089) 923068320","globalTitle":"Global Configuration","installationInfo":"For setup and handling of the Novalnet-Payment plugin you can find the installation guide <a href=\'https://www.novalnet.com/docs/plugins/installation-guides/shopware-6-installation-guide.pdf\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'>Here</a>","PaymentConfiguration":"<span style=\'font-weight: bold; color:red;\'>Important notice:</span> Payment plugin configurations are now available in the <a href=\'https://admin.novalnet.de/\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin Portal</a>. Navigate to the <b> Projects > choose your project > Payment plugin configuration, </b> to configure them. <br><br> Novalnet allows you to verify the payment method behaviour before going into production mode by using test payment data. Access the Novalnet test payment data available <a href=\'https://developer.novalnet.de/testing\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Here </a>"},"settingForm":{"title":"Novalnet","statusTitle":"Status","amountError":"Invalid amount","buttons":{"save":"Save"},"credentials":{"cardTitle":"Novalnet API Configuration","activationKey":{"label":"Product activation key *","tooltipText":"Your product activation key is a unique token for merchant authentication and payment processing. Get your Product activation key from the <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin Portal </a>: Projects > Choose your project > API credentials > API Signature (Product activation key)"},"accessKey":{"label":"Payment access key *","tooltipText":"Your secret key used to encrypt the data to avoid user manipulation and fraud. Get your Payment access key from the <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'> Novalnet Admin Portal </a> Projects > Choose your project > API credentials > Payment access key"},"tariff":{"label":"Select Tariff ID *","tooltipText":"Select a Tariff ID to match the preferred tariff plan you created at the Novalnet Admin Portal for this project","emptyText":"Select Tariff ID"},"orderEmailMode":{"label":"Enable Order Confirmation E-mail","tooltipText":"Enable this configuration to send another Order Confirmation e-mail with Novalnet transaction details to the end customer for orders made through Invoice, Invoice with payment guarantee, Direct debit SEPA with payment guarantee, Instalment by invoice, Instalment by SEPA direct debit, Prepayment, Cashpayment, and Multibanco payments. (By default initial Order confirmation e-mail will send to end customers without Novalnet transaction details)"},"onHold":{"label":"Payment onhold  status","tooltipText":"Status to be used for on-hold payments."},"complete":{"label":"Payment completion status","tooltipText":"Status to be used for successful payments."}},"merchantSettings":{"cardTitle":"Notification / Webhook URL Setup","deactivateIp":{"label":"Allow manual testing of the Notification / Webhook URL","tooltipText":"Enable this to test the Novalnet Notification / Webhook URL manually. Disable this before setting your shop live to block unauthorized calls from external parties"},"mailTo":{"label":"Send e-mail to","tooltipText":"Notification / Webhook URL execution messages will be sent to this e-mail"},"callbackUrl":{"label":"Notification / Webhook URL","button":"Configure","tooltipText":"You must configure the webhook endpoint in your <a href=\'https://admin.novalnet.de\' target=\'_blank\' style=\'text-decoration: underline; font-weight: bold; color:#0080c9;\'>Novalnet Admin portal</a>. This will allow you to receive notifications about the transaction."}},"extension":{"paidTooltip":"Total paid amount","refundTooltip":"Refunded amount","refundButton":"Refund","amountTitle":"Refund amount","zeroAmountTitle":"Transaction booking amount","refundDescription":"Please enter the refund amount (in minimum unit of currency. E.g. enter 100 which is equal to 1.00)","refundReference":"Refund / Cancellation Reason","confirmLabel":"Confirm","cancelLabel":"Cancel","Managetitle":"Manage Transaction","confirmMessage":"Are you sure you want to capture the payment?","cancelMessage":"Are you sure you want to cancel the payment?","cancelAllCycleMessage":"Are you sure you want to cancel all cycle installment?","cancelRemainingCycleMessage":"Are you sure you want to cancel remaining cycle installment?","refundSuccess":"Your refund was successful.","onholdSuccess":"The transaction has been confirmed.","onholdCancel":"The transaction has been canceled","instalmentCancelLabel":"Instalment Cancel","instalmentAllCancelLabel":"Cancel All Instalment","instalmentRemainCancelLabel":"Cancel All Remaining Instalment","instalmentSuccessMsg":"Instalment canceled successfully.","zeroAmountButton":"Book Amount","bookedSuccess":"Your amount booked was successful.","zeroAmountDescription":"Please enter the amount (in minimum unit of currency. E.g. enter 100 which is equal to 1.00)","bookButton":"Book"},"titleSuccess":"Success","successMessage":"Novalnet merchant details are configured successfully.","titleError":"Error","apiFailureMessage":"Please configure Novalnet Global Configuration","customerFailureMessage":"Please select your customer","currencyFailureMessage":"Please select currency","lineitemFailureMessage":"Please Add Product","amountRefundError":"Invalid refund amount","failureMessage":"Please fill in the required fields","instalmentNumber":"S.No","instalmentReference":"Novalnet Transaction ID","instalmentDate":"Next Instalment Date","instalmentAmount":"Amount","instalmentStatus":"Status","instalmentInfo":"Instalment Summary","webhookUrlFailure":"Please enter the valid Webhook URL","webhookUrlSuccess":"Notification / Webhook URL is configured successfully in Novalnet Admin Portal","emptyMessage":"Enter Product activation key"},"onhold":{"open":"Open","process":"In Progress","authorized":"Authorized","cancel":"Cancelled","failed":"Failed","unconfirmed":"Unconfirmed","paidPartially":"Paid (partially)","paid":"Paid","select":"-- Please select --"}},"sw-privileges":{"permissions":{"novalnet_extension":{"label":"Novalnet Extensions"},"parents":{"novalnet_payment":"Novalnet"},"novalnet_payment":{"label":"Novalnet Settings"}}}}');let{Module:Y}=Shopware;Y.register("novalnet-payment",{type:"plugin",name:"NovalnetPayment",title:"novalnet-payment.module.title",description:"novalnet-payment.module.description",snippets:{"de-DE":Z,"en-GB":G},routes:{index:{component:"novalnet-payment-settings",path:"index",meta:{parentPath:"sw.settings.index",privilege:"novalnet_payment.viewer"}},detail:{component:"novalnet-payment-settings",path:"settings",redirect:{name:"novalnet.payment.credentials"},children:{credentials:{component:"novalnet-payment-credentials",path:"credentials",meta:{parentPath:"sw.settings.index",privilege:"novalnet_payment.viewer"}}}}},settingsItem:{group:"plugins",to:"novalnet.payment.detail.credentials",iconComponent:"novalnet-payment-settings-icon",backgroundEnabled:!0,privilege:"novalnet_payment.viewer"}});let J=Shopware.Classes.ApiService;var Q=class extends J{constructor(e,t,n="novalnet-payment"){super(e,t,n)}validateApiCredentials(e,t){return this.getBasicHeaders(),this.httpClient.post(`_action/${this.getApiBasePath()}/validate-api-credentials`,{clientId:e,accessKey:t},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}getNovalnetAmount(e){return this.getBasicHeaders(),this.httpClient.post(`_action/${this.getApiBasePath()}/transaction-amount`,{orderNumber:e},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}refundPayment(e,t,n,a){return this.getBasicHeaders(),this.httpClient.post(`_action/${this.getApiBasePath()}/refund-amount`,{orderNumber:e,refundAmount:t,reason:n,instalmentCycleTid:a},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}managePayment(e,t){return this.getBasicHeaders(),this.httpClient.post(`_action/${this.getApiBasePath()}/manage-payment`,{orderNumber:e,status:t},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}instalmentCancel(e,t){return this.getBasicHeaders(),this.httpClient.post(`_action/${this.getApiBasePath()}/instalment-cancel`,{orderNumber:e,cancelType:t},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}BookOrderAmount(e,t){let n=`_action/${this.getApiBasePath()}/book-amount`;return this.httpClient.post(n,{orderNumber:e,bookAmount:t},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}getNovalnetPaymentMethod(e){let t=`_action/${this.getApiBasePath()}/novalnet-paymentmethod`;return this.httpClient.post(t,{orderNumber:e},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}configureWebhookUrl(e,t,n){let a=`_action/${this.getApiBasePath()}/webhook-url-configure`;return this.httpClient.post(a,{url:e,productActivationKey:t,paymentAccessKey:n},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}novalnetPayment(e,t,n,a,o){let i=`_action/${this.getApiBasePath()}/load-payment-form`;return this.httpClient.post(i,{shippingaddress:e,billingaddress:t,amount:n,currency:a,customer:o},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}paymentValue(e,t){let n=`_action/${this.getApiBasePath()}/payment-value-data`;return this.httpClient.post(n,{value:e,customer:t},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}getCustomerPaymentMethod(e){let t=`_action/${this.getApiBasePath()}/customer-payment-data`;return this.httpClient.post(t,{customerNo:e},{headers:this.getBasicHeaders()}).then(e=>J.handleResponse(e))}};let{Application:X}=Shopware;X.addServiceProvider("NovalPaymentApiCredentialsService",e=>new Q(X.getContainer("init").httpClient,e.loginService)),n(233)}()}();