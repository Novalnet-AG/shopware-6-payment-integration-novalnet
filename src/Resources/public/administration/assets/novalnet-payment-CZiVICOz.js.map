{"version":3,"file":"novalnet-payment-CZiVICOz.js","sources":["../../../app/administration/src/module/novalnet-payment/page/novalnet-payment-settings/novalnet-payment-settings.html.twig","../../../app/administration/src/module/novalnet-payment/page/novalnet-payment-settings/index.js","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-credentials/novalnet-payment-credentials.html.twig","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-credentials/index.js","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-settings-icon/novalnet-payment-settings-icon.html.twig","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-settings-icon/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-customer/component/sw-customer-base-info/sw-customer-base-info.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-customer/component/sw-customer-base-info/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-detail-details/sw-order-detail-details.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-detail-details/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-refund-modal/novalnet-payment-refund-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-refund-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-manage-transaction-modal/novalnet-payment-manage-transaction-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-manage-transaction-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-book-amount-modal/novalnet-payment-book-amount-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-book-amount-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-instalment-cancel-modal/novalnet-payment-instalment-cancel-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-instalment-cancel-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-details/sw-order-create-details.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-details/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-general/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-user-card/sw-order-user-card.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-user-card/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-general-info/sw-order-general-info.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-general-info/index.js","../../../app/administration/src/module/novalnet-payment/index.js","../../../app/administration/src/core/service/api/novalnet-payment-api-credentials.service.js","../../../app/administration/src/init/api-service.init.js","../../../app/administration/src/acl/index.js"],"sourcesContent":["{% block novalnet_payment_settings %}\n\t<sw-page class=\"novalnet-payment\">\n\t\t\n\t\t{% block novalnet_payment_settings_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc('sw-settings.index.title') }}\n                    <sw-icon name=\"regular-chevron-right-xs\" small></sw-icon>\n                    {{ $tc('novalnet-payment.settingForm.title') }}\n                </h2>\n            </template>\n        {% endblock %}\n\t\t\n\t\t{% block novalnet_payment_settings_actions %}\n            <template #smart-bar-actions>\n            \n\t\t\t\t{% block novalnet_payment_actions_save %}\n                    <sw-button-process v-model:value=\"isSaveSuccessful\" class=\"sw-settings-login-registration__save-action\"\n\t\t\t\t\t\t\t\t\t   variant=\"primary\"\n                                       :isLoading=\"isLoading\"\n                                       :disabled=\"isLoading || !acl.can('novalnet_payment.editor')\"\n                                       @click=\"onSave\">\n                        {{ $tc('novalnet-payment.settingForm.buttons.save') }}\n                    </sw-button-process>\n                {% endblock %}\n            \n            </template>\n        {% endblock %}\n    \n        {% block novalnet_payment_content %}\n\t\t\t<template #content>\n\t\t\t\n\t\t\t\t{% block novalnet_payment_content_card_view %}\n\t\t\t\t\t<sw-card-view>\n\t\t\t\t\t\t{% block novalnet_payment_content_sales_channel_config %}\n\t\t\t\t\t\t\t<sw-sales-channel-config v-model:value=\"config\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t ref=\"configComponent\" \n\t\t\t\t\t\t\t\t\t\t\t\t\t domain=\"NovalnetPayment.settings\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t{% block novalnet_payment_content_sales_channelconfig_card %}\n\t\t\t\t\t\t\t\t  <template #select=\"{ onInput, selectedSalesChannelId, salesChannel}\">\n\t\t\t\t\t\t\t\t\t{% block novalnet_payment_content_sales_channelconfig_card_sales_channel %}\n\t\t\t\t\t\t\t\t\t\t<sw-container class=\"novalnet-sales-channel\">\n\t\t\t\t\t\t\t\t\t\t\t<sw-single-select v-model:value=\"selectedSalesChannelId\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  labelProperty=\"translated.name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  valueProperty=\"id\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"salesChannel\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  show-clearable-button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"onInput\">\n\t\t\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t\t\t</sw-container>\n\t\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t{% block novalnet_payment_config_content_channel_config_cards %}\n\t\t\t\t\t\t\t\t\t<template #content=\"{ actualConfigData, allConfigs, selectedSalesChannelId }\">\n\t\t\t\t\t\t\t\t\t\t{% block novalnet_payment_config_content_tabs %}\n\t\t\t\t\t\t\t\t\t\t\t<sw-tabs>\n\t\t\t\t\t\t\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card %}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<sw-tabs-item class=\"novalnet-payment-configuration-global-config\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:route=\"{ name: 'novalnet.payment.detail.credentials', params: { id: $route.params.id }}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:title=\"$tc('novalnet-payment.module.globalTitle')\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.module.globalTitle') }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</sw-tabs-item>\n\t\t\t\t\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t\t\t\t</sw-tabs>\n\t\t\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{% block novalnet_payment_configuration_content_router_view %}\n\t\t\t\t\t\t\t\t\t\t\t\t<router-view v-slot=\"{ Component }\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:is=\"Component\"\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:actualConfigData=\"actualConfigData\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:allConfigs=\"allConfigs\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:selectedSalesChannelId=\"selectedSalesChannelId\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</router-view>\n\t\t\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</sw-sales-channel-config>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\n\t\t\t\t\t\t{% block novalnet_payment_content_card_loading %}\n                            <sw-loader v-if=\"isLoading\"></sw-loader>\n                        {% endblock %}\n                        \n\t\t\t\t\t</sw-card-view>\n\t\t\t\t{% endblock %}\n\t\t\t\t\n\t\t\t</template>\n        {% endblock %}\n\t</sw-page>\n{% endblock %}\n","import template from './novalnet-payment-settings.html.twig';\nimport './novalnet-payment-settings.scss';\n\n\nconst { Component, Mixin, Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('novalnet-payment-settings', {\n    template,\n\n     mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    inject: [\n\t\t'acl',\n\t\t'NovalPaymentApiCredentialsService',\n        'repositoryFactory'\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            config: {},\n            salesChannels: [],\n            isSaveSuccessful: false,\n            clientIdFilled: false,\n            clientSecretFilled: false\n        };\n    },\n    \n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        }\n    },\n    \n    created() {\n        this.createdComponent();\n    },\n    \n    watch: {\n        config: {\n            handler(configData) {\n                if (!configData) {\n                    return;\n                }\n                const defaultConfig = this.$refs.configComponent.allConfigs.null;\n                const salesChannelId = this.$refs.configComponent.selectedSalesChannelId;\n\n                if (salesChannelId !== null) {\n\t\t\t\t\t\n\t\t\t\t\tif (!this.config['NovalnetPayment.settings.clientId'])\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.config['NovalnetPayment.settings.clientId'] = defaultConfig['NovalnetPayment.settings.clientId'];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!this.config['NovalnetPayment.settings.accessKey'])\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.config['NovalnetPayment.settings.accessKey'] = defaultConfig['NovalnetPayment.settings.accessKey'];\n\t\t\t\t\t}\n                }\n                \n                this.$emit('salesChannelChanged');\n                this.$emit('update:value', configData);\n            },\n            deep: true,\n        },\n    },\n    \n    \n    \n    methods: {\n\t\tcreatedComponent() {\n            this.isLoading = true;\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equalsAny('typeId', [\n                Defaults.storefrontSalesChannelTypeId,\n                Defaults.apiSalesChannelTypeId\n            ]));\n            this.salesChannelRepository.search(criteria, Shopware.Context.api).then(res => {\n                res.add({\n                    id: null,\n                    translated: {\n                        name: this.$tc('sw-sales-channel-switch.labelDefaultOption')\n                    }\n                });\n                this.salesChannels = res;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n        onSave() {\n\t\t\tthis.isSaveSuccessful = false;\n            this.isLoading = true;\n            \n            var clientId = this.getConfigValue('clientId');\n            var accessKey = this.getConfigValue('accessKey');\n            \n            if(this.getConfigValue('clientId') !== '' &&  typeof (this.getConfigValue('clientId')) !== 'undefined')\n            {\n\t\t\t\tclientId = this.getConfigValue('clientId').replace(/\\s/g, \"\");\n\t\t\t}\n\n\t\t\tif(this.getConfigValue('accessKey') !== '' && typeof (this.getConfigValue('accessKey')) !== 'undefined')\n            {\n\t\t\t\taccessKey = this.getConfigValue('accessKey').replace(/\\s/g, \"\");\n\t\t\t}\n            \n\n\t\t\tif (typeof (clientId) === 'undefined' || clientId == '')\n\t\t\t{\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.emptyMessage')\n\t\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t} else if(typeof (accessKey) === 'undefined' || accessKey == '') {\n\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.emptyAccessKeyMessage')\n\t\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.checkBackendConfiguration();\n\t\t},\t\n\t\t\n       getConfigValue(field) {\n            const defaultConfig = this.$refs.configComponent.allConfigs.null;\n            const salesChannelId = this.$refs.configComponent.selectedSalesChannelId;\n\n            if (salesChannelId === null) {\n                return this.config[`NovalnetPayment.settings.${field}`];\n            }\n\n            return this.config[`NovalnetPayment.settings.${field}`]\n                || defaultConfig[`NovalnetPayment.settings.${field}`];\n        },\n        \n        checkBackendConfiguration() {\n\t\t\tconst clientId = this.getConfigValue('clientId').replace(/\\s/g, \"\");\n\t\t\tconst accessKey = this.getConfigValue('accessKey').replace(/\\s/g, \"\");\n\n\t\t\tthis.NovalPaymentApiCredentialsService.validateApiCredentials(clientId, accessKey).then((response) => {\n\n                if(response.serverResponse == undefined || response.serverResponse == '')\n                {\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.apiFailureMessage')\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n                const status = response.serverResponse.result.status_code;\n                if(status != 100)\n                {\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\tmessage: response.serverResponse.result.status_text\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\tresponse.tariffResponse.forEach(((tariff) => {\n\t\t\t\t\t\tif(this.config['NovalnetPayment.settings.tariff'] == undefined || this.config['NovalnetPayment.settings.tariff'] == '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.config['NovalnetPayment.settings.tariff'] = tariff.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\n\t\t\t\t\tthis.config['NovalnetPayment.settings.clientKey']\t= response.serverResponse.merchant.client_key;\n \t\t\t\t\tthis.$refs.configComponent.save().then((res) => {\n\t\t\t\t\t\t\tthis.isSaveSuccessful = true;\n\n\t\t\t\t\t\t\tif (res) {\n\t\t\t\t\t\t\t\tthis.config = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.isLoading = false;\n\n\t\t\t\t\t}).catch(() => {\n\t\t\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t});\n\n                    this.createNotificationSuccess({\n                        title: this.$tc('novalnet-payment.settingForm.titleSuccess'),\n                        message: this.$tc('novalnet-payment.settingForm.successMessage')\n                    });\n\n\t\t\t\t\treturn;\n                }\n            }).catch(() => {\n                    this.createNotificationError({\n                        title: this.$tc('novalnet-payment.settingForm.titleError'),\n                        message: this.$tc('novalnet-payment.settingForm.errorMessage')\n                    });\n                    this.isLoading = false;\n                    this.isTestSuccessful = false;\n            });\n\t\t},\n\n\t},\n    \n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n    \n});\n","{% block novalnet_payment_content_card_channel_config_credentials %}\n\t<sw-card class=\"sw-card--grid\" \n\t\t\t :title=\"$tc('novalnet-payment.settingForm.credentials.cardTitle')\">\n\t\t\t\t \n\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container %}\n\t\t\t<sw-container>\n\t\t\t\t\n\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings %}\n\t\t\t\t\t<div v-if=\"actualConfigData\" class=\"novalnet_payment-settings-credentials\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-alert v-if=\"projectMode\" variant=\"info\" appearance=\"default\" :showIcon=\"true\" :closable=\"false\">\n\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.module.projectInfo') }}\n\t\t\t\t\t\t\t</sw-alert>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div v-html = \"$tc('novalnet-payment.module.generalInfo')\" class=\"novalnet_payment-settings-project\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div v-html = \"$tc('novalnet-payment.module.PaymentConfiguration')\" class=\"novalnet_payment-settings-project\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_id %}\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.clientId']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientId']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.clientId\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"apiActivationKey == null ? props.currentValue : apiActivationKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.activationKey.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.activationKey.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"onCheckApi\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.accessKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.accessKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.accessKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"paymentAccessKey == null ? props.currentValue : paymentAccessKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t    autocomplete=\"off\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.accessKey.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.accessKey.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"onCheckApi\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_break %}\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_secret %}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.clientKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.clientKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   v-show=\"shouldDisable\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.tariff']\"\n\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.tariff']\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.tariff\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"tariffOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.tariff.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.tariff.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.emailMode']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t    :customInheritationCheckFunction=\"checkBoolFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-switch-field name=\"NovalnetPayment.settings.emailMode\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.orderEmailMode.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.orderEmailMode.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-switch-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.onHoldStatus']\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.onHoldStatus']\">\n\t\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.onHoldStatus\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"onHoldOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.onHold.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.onHold.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :placeholder=\"$tc('novalnet-payment.onhold.select')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue != null ? props.currentValue : onhold\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.completeStatus']\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.completeStatus']\">\n\t\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.completeStatus\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"completeOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.complete.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :placeholder=\"$tc('novalnet-payment.onhold.select')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.complete.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue != null ? props.currentValue : completed\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t</div>\n\t\t\t\t{% endblock %}\n\t\t\t</sw-container>\n\t\t{% endblock %}\n\n\t\t{% block novalnet_payment_content_card_channel_loading %}\n            <sw-loader v-if=\"isLoading\"></sw-loader>\n        {% endblock %}\n\t</sw-card>\n{% endblock %}\n\n{% block novalnet_payment_content_card_channel_config_merchant_credentials %}\n\t<sw-card class=\"sw-card--grid\"\n\t\t\t :title=\"$tc('novalnet-payment.settingForm.merchantSettings.cardTitle')\">\n\t\t\n\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container %}\n\t\t\t<sw-container>\n\t\t\t\n\t\t\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings %}\n\t\t\t\t\t<div v-if=\"actualConfigData\" class=\"novalnet_payment-settings-merchant-credentials\">\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings_ip %}\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.callbackUrl']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.callbackUrl']\"\n                                                >\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.callbackUrl\"\n\t\t\t\t\t\t\t\t\t\t\t\t   class=\"novalnet-payment-callback-field\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-button-process :disabled=\"false || !acl.can('novalnet_payment.editor')\" :isLoading=\"buttonLoad\"  @click=\"configureWebhookUrl()\">\n\t\t\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.button') }}\n\t\t\t\t\t\t\t</sw-button-process>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-switch-field name=\"NovalnetPayment.settings.deactivateIp\"\n\t\t\t\t\t\t\t\t\t                 :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :label=\"$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-switch-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.mailTo']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.mailTo']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\" >\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.mailTo\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :isInherited=\"props.isInherited\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.merchantSettings.mailTo.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.mailTo.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t</div>\n\t\t\t\t{% endblock %}\n\t\t\t</sw-container>\n\t\t{% endblock %}\n\t</sw-card>\n{% endblock %}\n","import template from './novalnet-payment-credentials.html.twig';\nimport './novalnet-payment-credentials.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-credentials', {\n    template,\n\n\tmixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n    \n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n        'acl',\n        'systemConfigApiService',\n    ],\n    \n    name: 'NovalnetPaymentCredentials',\n\ticon: 'default-action-settings',\n\n\tprops: {\n        actualConfigData: {\n            type: Object,\n            required: true\n        },\n        allConfigs: {\n            type: Object,\n            required: true\n        },\n        selectedSalesChannelId: {\n            required: true\n        }\n    },\n\n    data() {\n\t\tconst url = window.location .protocol + \"//\" + window.location.host + window.location.pathname;\n\t\tconst generatedUrl = url.split(\"/admin\").join(\"\");\n        return {\n\t\t\tonHoldOptions:[],\n\t\t\tcompleteOptions:[],\n\t\t\tonhold: 'authorized',\n\t\t\tcompleted: 'paid',\n\t\t\tshouldDisable :false,\n\t\t\tprojectMode: false,\n\t\t\tapiActivationKey: '',\n\t\t\tpaymentAccessKey: '',\n\t\t\tisLoading: false,\n\t\t\tisRequested : '',\n\t\t\tshowMessage: false,\n\t\t\tbuttonLoad: false,\n\t\t\ttariffId: '',\n\t\t\ttariffOptions: [],\n\t\t\tNovalnetPaymentCallBackUrl : generatedUrl + \"/novalnet/callback\"\n\t\t};\n\t},\n\n    watch: {\n        actualConfigData: {\n            handler(configData) {\n\t\t\t\t\n                if (!configData) {\n                    return;\n                }\n                this.$emit('update:value', configData);\n            },\n            deep: true\n        }\n    },\n\n    computed: {\n        actualConfigData: {\n            get() {\n                return this.allConfigs[this.selectedSalesChannelId];\n            },\n            set(config) {\n                this.allConfigs = {\n                    ...this.allConfigs,\n                    [this.selectedSalesChannelId]: config\n                };\n            }\n        },\n    },\n\n\tcreated() {\n\t\tthis.createdComponent();\n    },\n\n    updated() {\n\t\tthis.createdComponent();\n\t},\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n\t\tgetInheritValue(key) {\n            if (this.selectedSalesChannelId == null ) {\n\t\t\t\treturn this.actualConfigData[key];\n\t\t\t} else {\n\t\t\t\treturn this.allConfigs['null'][key];\n\t\t\t}\n        },\n\n        onCheckApi() {\n\t\t\tif(event.target.name === 'NovalnetPayment.settings.clientId') {\n\t\t\t\tthis.apiActivationKey = this.actualConfigData['NovalnetPayment.settings.clientId'] = event.target.value;\n\t\t\t} else if(event.target.name === 'NovalnetPayment.settings.accessKey') {\n\t\t\t\tthis.paymentAccessKey = this.actualConfigData['NovalnetPayment.settings.accessKey'] = event.target.value;\n\t\t\t}\n\n\t\t\tif (this.apiActivationKey === '' && this.paymentAccessKey === '')\n\t\t\t{\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.apiFailureMessage')\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.isRequested = '';\n\t\t\tthis.showMessage = true;\n\t\t\tthis.createdComponent();\n\t\t},\n\n        createdComponent() {\n\t\t\tconst me = this;\n\n\t\t\tif(this.actualConfigData !== undefined && this.isRequested !== this.selectedSalesChannelId)\n\t\t\t{\n\t\t\t\tthis.isRequested\t\t= this.selectedSalesChannelId;\n\t\t\t\tthis.apiActivationKey\t= this.actualConfigData['NovalnetPayment.settings.clientId'] || this.allConfigs.null['NovalnetPayment.settings.clientId'];\n\t\t\t\tthis.paymentAccessKey\t= (this.actualConfigData['NovalnetPayment.settings.accessKey'] || this.allConfigs.null['NovalnetPayment.settings.accessKey']);\n\n\t\t\t\tif(this.apiActivationKey !== undefined && this.apiActivationKey !== '' && this.paymentAccessKey !== undefined && this.paymentAccessKey !== '' )\n\t\t\t\t{\n                    this.apiActivationKey = this.apiActivationKey.replace(/\\s/g, \"\");\n                    this.paymentAccessKey = this.paymentAccessKey.replace(/\\s/g, \"\");\n\t\t\t\t\tthis.isLoading = true;\n\t\t\t\t\tthis.NovalPaymentApiCredentialsService.validateApiCredentials(this.apiActivationKey, this.paymentAccessKey).then((response) => {\n\t\t\t\t\t\tconst status = response.serverResponse.result.status_code;\n\t\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t\tif(status !== 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(this.showMessage === true)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\t\t\tmessage: response.serverResponse.result.status_text,\n\t\t\t\t\t\t\t\t\tautoClose: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.showMessage = false;\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tme.tariffOptions = [];\n\t\t\t\t\t\t\tresponse.tariffResponse.forEach(((tariff) => {\n\n\t\t\t\t\t\t\t\tthis.actualConfigData['NovalnetPayment.settings.clientKey']\t= response.serverResponse.merchant.client_key;\n\n\t\t\t\t\t\t\t\tme.tariffOptions.push({\n\t\t\t\t\t\t\t\t\tvalue: tariff.id,\n\t\t\t\t\t\t\t\t\tlabel: tariff.name\n\t\t\t\t\t\t\t\t});\n\n                                if(this.tariffId === undefined || this.tariffId === '')\n                                {\n                                    this.tariffId = {value: tariff.id, label: tariff.name};\n                                }\n\n\t\t\t\t\t\t\t\tif(this.showMessage === true)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleSuccess'),\n\t\t\t\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.successMessage'),\n\t\t\t\t\t\t\t\t\t\tautoClose: true,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.showMessage = false;\n\t\t\t\t\t\t\t\tif(response.serverResponse.merchant.test_mode === 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.projectMode = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(() => {\n\t\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(this.actualConfigData['NovalnetPayment.settings.callbackUrl'] === undefined || null) {\n\t\t\t\t\t\n\t\t\t\t\tthis.actualConfigData['NovalnetPayment.settings.callbackUrl'] = this.NovalnetPaymentCallBackUrl;\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tthis.onHoldOptions = [\n\t\t\t\t{\n                    value: 'open',\n                    label: this.$tc('novalnet-payment.onhold.open')\n                },\n                {\n                    value: 'process',\n                    label: this.$tc('novalnet-payment.onhold.process')\n                },\n                {\n                    value: 'authorized',\n                    label: this.$tc('novalnet-payment.onhold.authorized')\n                },\n                {\n                    value: 'cancel',\n                    label: this.$tc('novalnet-payment.onhold.cancel')\n                },\n                {\n                    value: 'failed',\n                    label: this.$tc('novalnet-payment.onhold.failed')\n                }];\n                \n                this.completeOptions = [\n                \n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: 'paid',\n\t\t\t\t\t\tlabel: this.$tc('novalnet-payment.onhold.paid')\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: 'paidPartially',\n\t\t\t\t\t\tlabel: this.$tc('novalnet-payment.onhold.paidPartially')\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: 'cancel',\n\t\t\t\t\t\tlabel: this.$tc('novalnet-payment.onhold.cancel')\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: 'failed',\n\t\t\t\t\t\tlabel: this.$tc('novalnet-payment.onhold.failed')\n\t\t\t\t\t}\n\t\t\t\t]; \n\t\t},\n\n        configureWebhookUrl() {\n\t\t\tconst productActivationKey\t= this.actualConfigData['NovalnetPayment.settings.clientId'] || this.allConfigs.null['NovalnetPayment.settings.clientId'];\n\t\t\tconst accessKey\t\t\t\t= this.actualConfigData['NovalnetPayment.settings.accessKey'] || this.allConfigs.null['NovalnetPayment.settings.accessKey'];\n\t\t\tconst callbackUrl\t\t\t\t= this.actualConfigData['NovalnetPayment.settings.callbackUrl'] || this.allConfigs.null['NovalnetPayment.settings.callbackUrl'];\n\n\t\t\tif ( productActivationKey === undefined || productActivationKey === '' || accessKey === undefined || accessKey === '')\n\t\t\t{\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\ttitle: this.$tc('novalnet-payment.settingForm.titleError'),\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.apiFailureMessage')\n\t\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(callbackUrl)\n\t\t\t{\n\t\t\t\tif (/^(http|https):\\/\\/[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)?$/i.test(callbackUrl) === false)\n\t\t\t\t{\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.webhookUrlFailure')\n\t\t\t\t\t});\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis.buttonLoad = true;\n\n\t\t\t\tthis.NovalPaymentApiCredentialsService.configureWebhookUrl(callbackUrl, productActivationKey, accessKey).then((response) => {\n\n\t\t\t\t\t\tif(response.result.status !== undefined && response.result.status != null && response.result.status !== '' && response.result.status === 'SUCCESS')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.webhookUrlSuccess')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if(response.result.status_text !== undefined && response.result.status_text != null && response.result.status_text !== '') {\n\t\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\t\tmessage: response.result.status_text,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.webhookUrlFailure')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\tthis.buttonLoad = false;\n\n\t\t\t\t}).catch(() => {\n\t\t\t\t\tthis.buttonLoad = false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\n    }\n});\n","{% block novalnet_payment_settings_icon %}\n    <img class=\"sw-settings-index__novalnet-payment-icon\" :src=\"assetFilter('novalnetpayment/administration/static/img/plugin.png')\" alt=\"\">\n{% endblock %}\n","import template from './novalnet-payment-settings-icon.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('novalnet-payment-settings-icon', {\n    template,\n    \n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","{% block sw_customer_base_metadata_default_payment_content %}\n\t <dd v-if=\"!customerEditMode\"\n        class=\"sw-customer-base__label-default-payment-method\" >       \n            {{ paymentMethod }}\n    </dd>\n{% endblock %}\n","import template from './sw-customer-base-info.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-customer-base-info', {\n    template,\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n           paymentMethod : ''\n        };\n    },\n\t\n\twatch: {\n\t\t\n\t\tcustomer: {\n            deep: true,\n            handler() {\n\t\t\t\tif (this.customer == '') {\n                    return;\n                }\n\n\t\t\t\tif(this.customer.defaultPaymentMethod.customFields != null  && this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name != undefined && this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name == \"novalnetpay\"){\n\t\t\t\t\tthis.NovalPaymentApiCredentialsService.getCustomerPaymentMethod(this.customer.customerNumber).then((paymentDetails) => {\n\t\t\t\t\t\tif(paymentDetails != undefined && paymentDetails != null)\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\tif(paymentDetails.paymentName != undefined && paymentDetails.paymentName != null){\n\t\t\t\t\t\t\t\tthis.paymentMethod = paymentDetails.paymentName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.paymentMethod = this.customer.defaultPaymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.paymentMethod = this.customer.defaultPaymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch((errorResponse) => {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: `${errorResponse.title}: ${errorResponse.message}`\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tthis.paymentMethod = this.customer.defaultPaymentMethod.translated.distinguishableName;\n\t\t\t\t}\n\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t}\n});\n","  {% block sw_order_detail_details_payment %}\n\t\n\t\n\t <sw-order-details-state-card\n        v-if=\"transaction\"\n        :title=\"$tc('sw-order.detailsTab.labelTransactionCard')\"\n        :order=\"order\"\n        :entity=\"transaction\"\n        :state-label=\"$tc('sw-order.stateCard.headlineTransactionState')\"\n        :disabled=\"!acl.can('order.editor')\"\n        @show-status-history=\"showStateHistoryModal = true\"\n        @save-edits=\"onSaveEdits\"\n    >\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_details_payment_billing_address %}\n        <sw-order-address-selection\n            class=\"sw-order-detail-details__billing-address\"\n            type=\"billing\"\n            :address=\"billingAddress\"\n            :address-id=\"selectedBillingAddressId\"\n            :disabled=\"!acl.can('order.editor')\"\n            :label=\"$tc('sw-order.createBase.detailsBody.labelBillingAddress')\"\n            @change-address=\"onChangeOrderAddress\"\n        />\n        {% endblock %}\n\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_details_payment_method_select %}\n\t\t\n\t\t{% if paymentMethod !='' %}\n\t\t\t\t<sw-text-field type=\"text\"\n\t\t\t\t\t:label=\"$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')\" \n\t\t\t\t\t:placeholder=\"$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')\"\n\t\t\t\t\t:disabled=\"true\"\n\t\t\t\t\tv-model:value=\"paymentMethod\"\n\t\t\t\t\t> \n\t\t\t\t</sw-text-field>\n\t\t\t{% else %}\n\t\t\t\t<sw-entity-single-select\n\t\t\t\tv-model:value=\"transaction.paymentMethodId\"\n\t\t\t\tentity=\"payment_method\"\n\t\t\t\tlabel-property=\"distinguishableName\"\n\t\t\t\tdisabled\n\t\t\t\t:criteria=\"paymentMethodCriteria\"\n\t\t\t\t:label=\"$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')\"\n\t\t\t\t:placeholder=\"$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')\"\n\t\t\t\tshow-clearable-button\n\t\t\t\t/>\n\t\t\t{% endif %}\t\n        \n        {% endblock %}\n\n    </sw-order-details-state-card>\n   \n\t\n\t{% block sw_order_detail_details_payment_novalnet_seaction %}\n\t\t<template v-if=\"isNovalnetPayment\" >\n\t\t\t<sw-order-details-state-card\n\t\t\t\tv-if=\"transaction\"\n\t\t\t\t:title=\"$tc('novalnet-payment.module.title')\"\n\t\t\t\t:order=\"order\"\n\t\t\t\t:entity=\"transaction\"\n\t\t\t\t:state-label=\"$tc('sw-order.stateCard.headlineTransactionState')\"\n\t\t\t\t:disabled=\"!acl.can('order.editor')\"\n\t\t\t\t@show-status-history=\"showStateHistoryModal = true\"\n\t\t\t\t@save-edits=\"onSaveEdits\">\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div class=\"novalnet-payment-buyer-notification\">\n\t\t\t\t\t{# Logo #}\n\t\t\t\t\t{% block novalnet_payment_order_buyer_info %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-buyer-notification-icon-container\" >\n\t\t\t\t\t\t\t<img class=\"novalnet-payment-buyer-info-icon\" :src=\"assetFilter('novalnetpayment/static/img/plugin.png')\" alt=\"\"\n\t\t\t\t\t\t\t\t >\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t{# Full name and E-Mail address #}\n\t\t\t\t\t{% block novalnet_payment_order_buyer_info_name_container %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-buyer-info-name\">\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_buyer_info_name_container_name %}\n\t\t\t\t\t\t\t\t<div class=\"novalnet-payment-buyer-info-full-name\">\n\t\t\t\t\t\t\t\t\t{{ order.orderCustomer.firstName }} {{ order.orderCustomer.lastName }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_buyer_info_name_container_email %}\n\t\t\t\t\t\t\t\t<div class=\"novalnet-payment-buyer-info-email\">\n\t\t\t\t\t\t\t\t\t{{ order.orderCustomer.email }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<sw-container class=\"novalnet-payment-amount-info\" columns=\"1fr\">\n\t\t\t\t\t{% block novalnet_payment_order_component_amount_info %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-amount-info-total-amount\" >\n\t\t\t\t\t\t\t{{ displayOrderAmount }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\n\t\t\t\t\t{% block novalnet_payment_amount_info_captured_amount %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-amount-captured-amount\" >\n\n\t\t\t\t\t\t\t{% block novalnet_payment_amount_info_captured_amount %}\n\t\t\t\t\t\t\t\t+ {{ displayPaidAmount }}\n\t\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_amount_info_captured_amount_help %}\n\t\t\t\t\t\t\t\t<sw-help-text class=\"novalnet-payment-captured-amount-help-icon\"\n\t\t\t\t\t\t\t\t\t\t\t  tooltipPosition=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t  :text=\"$tc('novalnet-payment.settingForm.extension.paidTooltip')\">\n\t\t\t\t\t\t\t\t</sw-help-text>\n\t\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\n\t\t\t\t\t{% block novalnet_payment_order_compoenent_amount_info_refuned %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-refuned-amount\" >\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_compoenent_amount_info_refuned_amount %}\n\t\t\t\t\t\t\t\t- {{ refundedAmount }}\n\t\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_compoenent_amount_info_refuned_help %}\n\t\t\t\t\t\t\t\t<sw-help-text class=\"novalnet-payment-refuned-amount-help-icon\"\n\t\t\t\t\t\t\t\t\t\t\t  tooltipPosition=\"top\"\n\t\t\t\t\t\t\t\t\t\t\t  :text=\"$tc('novalnet-payment.settingForm.extension.refundTooltip')\">\n\t\t\t\t\t\t\t\t</sw-help-text>\n\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t{% block novalnet_payment_order_info_date %}\n\t\t\t\t\t\t<div class=\"novalnet-payment-amount-info-charge-date\" >\n\t\t\t\t\t\t\t\t{{ dateFilter(transaction.createdAt) }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</sw-container>\n\t\t\t\t\n\t\t\t\t<sw-container class=\"novalnet-payment-action-toolbar\" rows=\"1\" columns=\"1fr 1fr 1fr 1fr 1fr\" gap=\"10px\">\n\n\t\t\t\t\t{% block novalnet_payment_order_container_toolbar_refund_button %}\n\t\t\t\t\t\t<sw-button size=\"small\"\n\t\t\t\t\t\t\t\t   class=\"novalnet-payment-pay-action-toolbar__button\"\n\t\t\t\t\t\t\t\t   v-if=\"canRefund\"\n\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_extension.editor')\"\n\t\t\t\t\t\t\t\t   @click=\"showRefundModal\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\n                    {% block novalnet_payment_order_container_toolbar_instalment_cancel_button %}\n                        <sw-button size=\"small\"\n                                   class=\"novalnet-payment-pay-action-toolbar__button\"\n                                   v-if=\"canInstalmentCancel\"\n                                   :disabled=\"!acl.can('novalnet_extension.editor')\"\n                                   @click=\"showInstalmentCancelModal\">\n                            {{ $tc('novalnet-payment.settingForm.extension.instalmentCancelLabel') }}\n                        </sw-button>\n                    {% endblock %}\n               \n                    {% block novalnet_payment_order_container_toolbar_instalment_all_cancel_button %}\n                        <sw-button size=\"small\"\n                                   class=\"novalnet-payment-pay-action-toolbar__button\"\n                                   v-if=\"canInstalmentAllCancel\"\n                                   :disabled=\"!acl.can('novalnet_extension.editor')\"\n                                   @click=\"showInstalmentAllCancelModal\">\n                            {{ $tc('novalnet-payment.settingForm.extension.instalmentAllCancelLabel') }}\n                        </sw-button>\n                    {% endblock %}\n                    \n                    {% block novalnet_payment_order_container_toolbar_instalment_remain_cancel_button %}\n                        <sw-button size=\"small\"\n                                   class=\"novalnet-payment-pay-action-toolbar__button\"\n                                   v-if=\"canInstalmentRemainCancel\"\n                                   :disabled=\"!acl.can('novalnet_extension.editor')\"\n                                   @click=\"showInstalmentRemainCancelModal\">\n                            {{ $tc('novalnet-payment.settingForm.extension.instalmentRemainCancelLabel') }}\n                        </sw-button>\n                    {% endblock %}\n\n\t\t\t\t\t{% block novalnet_payment_order_container_toolbar_capture_button %}\n\t\t\t\t\t\t<sw-button size=\"small\"\n\t\t\t\t\t\t\t\t   class=\"novalnet-payment-pay-action-toolbar__button\"\n\t\t\t\t\t\t\t\t   v-if=\"canCaptureVoid\"\n\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_extension.editor')\"\n\t\t\t\t\t\t\t\t   @click=\"showConfirmModal\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t{% block novalnet_payment_order_container_toolbar_cancel_button %}\n\t\t\t\t\t\t<sw-button size=\"small\"\n\t\t\t\t\t\t\t\t   class=\"novalnet-payment-pay-action-toolbar__button\"\n\t\t\t\t\t\t\t\t   v-if=\"canCaptureVoid\"\n\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_extension.editor')\"\n\t\t\t\t\t\t\t\t   @click=\"showCancelModal\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.cancelLabel') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\n\t\t\t\t\t{% block novalnet_payment_order_container_toolbar_zero_amount_button %}\n\t\t\t\t\t\t<sw-button size=\"small\"\n\t\t\t\t\t\t\t\t   class=\"novalnet-payment-pay-action-toolbar__button\"\n\t\t\t\t\t\t\t\t   v-if=\"canZeroAmountBooking\"\n\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_extension.editor')\"\n\t\t\t\t\t\t\t\t   @click=\"showZeroAmountBlock\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.zeroAmountButton') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</sw-container>\n\t\t\t\t\n\t\t\t\t<sw-container class=\"novalnet-payment-pay-empty-container\" columns=\"1fr\">\n\t\t\t\t</sw-container>\n\t\t\t\t\n\t\t\t\t<sw-container class=\"novalnet-payment-pay-info-container\" columns=\"1fr\">\n\t\t\t\t\t<hr class=\"sw-order-detail-state-card__divider\">\n\t\t\t\t\t{% block novalnet_payment_order_component_checkout_info_billing_container %}\n\t\t\t\t\t\t<div class=\"novalnet-payment_chechout-info-customer-comments\" v-if=\"isNovalnetPayment\" >\n\t\n\t\t\t\t\t\t\t{% block novalnet_payment_order_component_checkout_info_billing_container_headline %}\n\t\t\t\t\t\t\t\t<div class=\"novalnet-payment-checkout-info-header\">\n\t\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.module.comments') }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endblock %}\n\t\n\t\t\t\t\t\t\t{% block novalnet_payment_order_component_billing_value %}\n\t\t\t\t\t\t\t\t<span class=\"novalnet-payment-checkout-info-comments\" v-html=\"novalnetComments\" style=\"line-height:22px;\">\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{% endblock %}\n\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</sw-container>\n\t\t\t\t\n\t\t\t\t{% block novalnet_payment_order_component_action_toolbar_modals %}\n\t\t\t\t\t<novalnet-payment-refund-modal\n\t\t\t\t\t\tv-if=\"refundModalVisible\"\n\t\t\t\t\t\t:refundableAmount=\"refundableAmount\"\n\t\t\t\t\t\t:order=\"order\"\n\t\t\t\t\t\t:item=\"item\"\n\t\t\t\t\t\t@modal-close=\"closeModals\"\n\t\t\t\t\t\t@reload-payment=\"reloadPaymentDetails\">\n\t\t\t\t\t</novalnet-payment-refund-modal>\n\t\t\t\t\t\n\t\t\t\t\t<novalnet-payment-manage-transaction-modal\n\t\t\t\t\t\tv-if=\"confirmModalVisible\"\n\t\t\t\t\t\t:status=\"status\"\n\t\t\t\t\t\t:order=\"order\"\n\t\t\t\t\t\t@modal-close=\"closeModals\"\n\t\t\t\t\t\t@reload-payment=\"reloadPaymentDetails\">\n\t\t\t\t\t</novalnet-payment-manage-transaction-modal>\n\t\t\t\t\t<novalnet-payment-manage-transaction-modal\n\t\t\t\t\t\tv-if=\"cancelModalVisible\"\n\t\t\t\t\t\t:status=\"status\"\n\t\t\t\t\t\t:order=\"order\"\n\t\t\t\t\t\t@modal-close=\"closeModals\"\n\t\t\t\t\t\t@reload-payment=\"reloadPaymentDetails\">\n\t\t\t\t\t</novalnet-payment-manage-transaction-modal>\n\t\t\t\t\t\n\t\t\t\t\t<novalnet-payment-book-amount-modal\n\t\t\t\t\t\tv-if=\"zeroAmountVisible\"\n\t\t\t\t\t\t:orderAmount=\"orderAmount\"\n\t\t\t\t\t\t:order=\"order\"\n\t\t\t\t\t\t@modal-close=\"closeModals\"\n\t\t\t\t\t\t@reload-payment=\"reloadPaymentDetails\">\n\t\t\t\t\t</novalnet-payment-book-amount-modal>\n\t\t\t\t\t\n\t\t\t\t\t<novalnet-payment-instalment-cancel-modal\n\t\t\t\t\t\tv-if=\"instalmentRefundModalVisible\"\n\t\t\t\t\t\t:item=\"item\"\n\t\t\t\t\t\t:cancelType=\"cancelType\"\n\t\t\t\t\t\t:order=\"order\"\n\t\t\t\t\t\t@modal-close=\"closeModals\"\n\t\t\t\t\t\t@reload-payment=\"reloadPaymentDetails\">\n\t\t\t\t\t</novalnet-payment-instalment-cancel-modal>\n\t\t\t\t\t\n\t\t\t\t{% endblock %}\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t</sw-order-details-state-card>\n\t\t\t\n\t\t\t<sw-card :title=\"$tc('novalnet-payment.settingForm.instalmentInfo')\" v-if=\"canInstalmentShow\">\n\t\t\t\t\t<template #grid>\n\t\t\t\t\t\t<sw-data-grid\n\t\t\t\t\t\t\t:dataSource=\"InstalmentInfo\"\n\t\t\t\t\t\t\t:columns=\"getInstalmentColums\"\n\t\t\t\t\t\t\t:compactMode=\"false\"\n\t\t\t\t\t\t\t:allowInlineEdit=\"true\"\n\t\t\t\t\t\t\t:showSelection=\"false\">\n\n\t\t\t\t\t\t\t{% block sw_product_detail_base_ratings_actions %}\n\t\t\t\t\t\t\t\t<template #actions=\"{ item }\">\n\t\t\t\t\t\t\t\t\t{% block sw_product_detail_base_ratings_actions_edit %}\n\t\t\t\t\t\t\t\t\t\t<sw-context-menu-item\n\t\t\t\t\t\t\t\t\t\t\tclass=\"sw-product-detail-base__review-edit\"\n\t\t\t\t\t\t\t\t\t\t\t@click=\"instalmentRefund(item)\"\n\t\t\t\t\t\t\t\t\t\t\t:disabled=\"disableInstalmentRefund(item)\">\n\t\t\t\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n\t\t\t\t\t\t\t\t\t\t</sw-context-menu-item>\n\t\t\t\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t</sw-data-grid>\n\t\t\t\t\t</template>\n            </sw-card>\n\t\t\t\n\t\t</template>\n\t\t\n\t{% endblock %}\n{% endblock %}\n","import template from './sw-order-detail-details.html.twig';\nimport './sw-order-detail-details.scss';\n\nconst { Context, Component } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { currency } = Shopware.Utils.format;\n\nComponent.override('sw-order-detail-details', {\n    template,\n    \n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n        'acl',\n    ],\n    \n    mixins: ['notification'],\n    \n    props: {\n        orderId: {\n            type: String,\n            required: true\n        },\n        paymentDetails: {\n            type: Object,\n            required: true\n        },\n    },\n    \n    data() {\n        return {\n\t\t\tstatus: 0,\n\t\t\tdisplayPaidAmount: 0,\n\t\t\trefundedAmount: 0,\n\t\t\torderAmount : 0,\n\t\t\tdisplayOrderAmount : 0,\n\t\t\tInstalmentInfo: [],\n\t\t\titem: {},\n\t\t\tnovalnetComments: '',\n\t\t\tisNovalnetPayment: false,\n\t\t\trefundModalVisible: false,\n\t\t\tconfirmModalVisible: false,\n\t\t\tzeroAmountVisible: false,\n\t\t\tcancelModalVisible: false,\n\t\t\tcanInstalmentAllCancel: false,\n\t\t\tcanInstalmentRemainCancel: false,\n\t\t\tinstalmentRefundModalVisible: false,\n\t\t\tcanCaptureVoid: false,\n\t\t\tcanRefund: false,\n\t\t\tcanZeroAmountBooking: false,\n\t\t\tcanInstalmentCancel: false,\n\t\t\tcanInstalmentShow: false,\n\t\t\tinstalmentRefundAmount : 0,\n\t\t\tpaymentMethod: '',\n\t\t\tpayLater: [\n                'INVOICE',\n\t\t\t\t'CASHPAYMENT',\n\t\t\t\t'MULTIBANCO',\n\t\t\t\t'PREPAYMENT'\n            ],\n            instalmentPayments: [\n                'INSTALMENT_INVOICE',\n\t\t\t\t'INSTALMENT_DIRECT_DEBIT_SEPA'\n            ],\n            onholdStatus: ['91', '99', '98', '85'],\n            refundableAmount : 0\n\t\t}\n\t},\n\t\n\tcomputed: {\n\n        getInstalmentColums() {\n            const columnDefinitions = [{\n                property: 'number',\n                dataIndex: 'number',\n                label: this.$tc('novalnet-payment.settingForm.instalmentNumber'),\n                width: '50px'\n            }, \n            {\n                property: 'reference',\n                dataIndex: 'reference',\n                label: this.$tc('novalnet-payment.settingForm.instalmentReference'),\n                width: '120px'\n            },\n            {\n                property: 'amount',\n                dataIndex: 'amount',\n                label: this.$tc('novalnet-payment.settingForm.instalmentAmount'),\n                width: '80px'\n            }, {\n                property: 'totalAmount',\n                dataIndex: 'totalAmount',\n                visible: false\n            },\n             {\n                property: 'refundAmount',\n                dataIndex: 'refundAmount',\n                visible: false\n            },{\n                property: 'nextCycle',\n                dataIndex: 'nextCycle',\n                label: this.$tc('novalnet-payment.settingForm.instalmentDate'),\n                width: '120px'\n            },  {\n                property: 'status',\n                dataIndex: 'status',\n                label: this.$tc('novalnet-payment.settingForm.instalmentStatus'),\n                width: '80px'\n            }];\n\n            return columnDefinitions;\n        },\n        \n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        }\n    },\n    \n\twatch: {\n        orderId: {\n            deep: true,\n            handler() {\n                if (!this.orderId) {\n                    return;\n                }\n                const orderRepository = this.repositoryFactory.create('order');\n                const orderCriteria = new Criteria(1, 1);\n                orderCriteria.addAssociation('transactions');\n                orderCriteria.addAssociation('currency');\n\n                orderCriteria.addFilter(Criteria.equals('id', this.orderId));\n\n                orderRepository.search(orderCriteria, Context.api).then((searchResult) => {\n\t\t\t\t\tconst order = searchResult.first();\n\t\t\t\t\t\n\t\t\t\t\t if (!order) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.identifier) {\n\t\t\t\t\t\tthis.identifier = order.orderNumber;\n\t\t\t\t\t}\n\t\t\t\t\tlet isNovalnet  =   false;\n\t\t\t\t\tlet comments    =   '';\n\t\t\t\t\tlet translation = this.$tc('novalnet-payment.module.comments');\n\n\t\t\t\t\torder.transactions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt) ).forEach((orderTransaction) => {\n\t\t\t\t\t\tif (orderTransaction.customFields &&\n\t\t\t\t\t\t\torderTransaction.customFields.novalnet_comments\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tisNovalnet  = true;\n\t\t\t\t\t\t\tif(comments != '')\n                            {\n\t\t\t\t\t\t\t\tcomments  += \"<dt>\" + translation + \"</dt>\";\n\t\t\t\t\t\t\t}\n                            comments   += orderTransaction.customFields.novalnet_comments.split(\"/ \").join(\"<br />\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif( isNovalnet ) {\n\t\t\t\t\t\tthis.novalnetComments  = comments.split(\"&&\").join(\"<dt><strong>\" + translation + \"</strong></dt>\");\n\t\t\t\t\t\tthis.setNovalnetPayment(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setNovalnetPayment(false);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.order.transactions.last().paymentMethod.customFields != null && this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name != undefined && this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name == \"novalnetpay\") {\n\t\t\t\t\t\tif(this.order.transactions.last().customFields != null && this.order.transactions.last().customFields.novalnet_payment_name != undefined  && this.order.transactions.last().customFields.novalnet_payment_name !=''){\n\t\t\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().customFields.novalnet_payment_name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.orderAmount      = Math.round(Number(order.price.totalPrice) * 100);\n\t\t\t\t\tthis.displayOrderAmount = currency (order.price.totalPrice, order.currency.shortName);\n\t\t\t\t\tthis.displayPaidAmount = currency (0, order.currency.shortName);\n\t\t\t\t\tthis.refundedAmount = currency (0, order.currency.shortName);\n\t\t\t\t\t\n\t\t\t\t\tthis.canCaptureVoid = false;this.canRefund = false;this.canZeroAmountBooking = false;this.canInstalmentCancel = false;this.canInstalmentShow = false;this.InstalmentInfo = []; this.canInstalmentAllCancel = false; this.canInstalmentRemainCancel = false;\n\t\t\t\t\t\n\t\t\t\t\tthis.NovalPaymentApiCredentialsService.getNovalnetAmount(order.orderNumber).then((payment) => {\n\t\t\t\t\t\tif(payment.data != '' && payment.data != undefined)\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tif(payment.data.gatewayStatus) {\n\t\t\t\t\t\t\t\tlet additionalDetails = JSON.parse(payment.data.additionalDetails);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tthis.refundableAmount = Number(payment.data.amount) - Number(payment.data.refundedAmount);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (payment.data.amount !=0 ) {\n\t\t\t\t\t\t\t\t\tthis.displayOrderAmount = currency (payment.data.amount/100, order.currency.shortName);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(payment.data.gatewayStatus == 'ON_HOLD' || this.onholdStatus.includes(payment.data.gatewayStatus)) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.canCaptureVoid = true;\n\t\t\t\t\t\t\t\t} else if (((payment.data.amount > 0 && payment.data.gatewayStatus == 'CONFIRMED' && !this.instalmentPayments.includes(payment.data.paymentType) && Number(payment.data.refundedAmount) < Number(payment.data.amount)) || (payment.data.gatewayStatus == 'PENDING' && this.payLater.includes(payment.data.paymentType))) && payment.data.paymentType != 'MULTIBANCO'  ) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.canRefund = true;\n\t\t\t\t\t\t\t\t} else if (this.instalmentPayments.includes(payment.data.paymentType) && payment.data.gatewayStatus == 'CONFIRMED' && !additionalDetails.cancelType)\n                                {\n                                    this.canInstalmentCancel = true;\n                                    \n                                } else if (((payment.data.paymentType == 'CREDITCARD') || (payment.data.paymentType == 'DIRECT_DEBIT_SEPA') || (payment.data.paymentType == 'GOOGLEPAY') || (payment.data.paymentType == 'APPLEPAY') || (payment.data.paymentType == 'DIRECT_DEBIT_ACH')) && Number(payment.data.amount) == 0 && this.orderAmount != 0 && payment.data.gatewayStatus !='FAILURE')\n                                {\n\t\t\t\t\t\t\t\t\tthis.canZeroAmountBooking = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(this.paymentMethod == '' && additionalDetails.payment_name != undefined && additionalDetails.payment_name !='' ){\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tthis.paymentMethod = additionalDetails.payment_name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (payment.data.paidAmount != 0) {\n\t\t\t\t\t\t\t\t\tthis.displayPaidAmount = currency (payment.data.paidAmount / 100, order.currency.shortName);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (payment.data.refundedAmount != 0) {\n\t\t\t\t\t\t\t\t\tthis.refundedAmount = currency (payment.data.refundedAmount / 100, order.currency.shortName);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif( (this.instalmentPayments.includes(payment.data.paymentType)) && payment.data.gatewayStatus == 'CONFIRMED'  && additionalDetails.InstalmentDetails != '')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.canInstalmentShow = true;\n\t\t\t\t\t\t\t\t\tthis.instalmentRefundAmount = payment.data.refundedAmount;\n\t\t\t\t\t\t\t\t\tvar counter = 1;\n\n\t\t\t\t\t\t\t\t\tObject.values(additionalDetails.InstalmentDetails).forEach(values => {\n\t\t\t\t\t\t\t\t\t    this.InstalmentInfo.push ({\n\t\t\t\t\t\t\t\t\t\t\t'amount': currency (values.amount / 100, order.currency.shortName),\n\t\t\t\t\t\t\t\t\t\t\t'totalAmount': values.amount,\n\t\t\t\t\t\t\t\t\t\t\t'nextCycle': values.cycleDate,\n\t\t\t\t\t\t\t\t\t\t\t'reference': values.reference,\n\t\t\t\t\t\t\t\t\t\t\t'status': values.status,\n\t\t\t\t\t\t\t\t\t\t\t'refundAmount': values.refundAmount,\n\t\t\t\t\t\t\t\t\t\t\t'number': counter\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(payment.data.refundedAmount != 0){\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentCancel = false;\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentAllCancel = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (this.InstalmentInfo != undefined && this.InstalmentInfo != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.InstalmentInfo.forEach(value => {\n\t\t\t\t\t\t\t\t\t\t\tif(value['reference'] == '' || value['reference'] == null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tthis.canInstalmentRemainCancel = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(additionalDetails.cancelType != undefined && additionalDetails.cancelType !=''){\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentRemainCancel = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(this.canInstalmentRemainCancel == false && payment.data.refundedAmount == 0 ){\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentCancel = false;\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentAllCancel = true;\n\t\t\t\t\t\t\t\t\t} else if(this.canInstalmentCancel == true){\n\t\t\t\t\t\t\t\t\t\tthis.canInstalmentRemainCancel = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}).catch((errorResponse) => {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: `${errorResponse.title}: ${errorResponse.message}`\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\t\n                }).finally(() => {\n\t\t\t\t\tthis.setNovalnetPayment(false);\n\t\t\t\t});\n            },\n            immediate: true\n        }\n    },\n    methods: {\n\t\tsetNovalnetPayment( novalnetPayment ) {\n            if( novalnetPayment ) {\n                this.isNovalnetPayment = novalnetPayment;\n            }\n        },\n        showConfirmModal() {\n            this.status = 100;\n            this.confirmModalVisible = true;\n        },\n        \n        showRefundModal() {\n            this.refundModalVisible = true;\n        },\n        \n        closeModals() {\n\t\t\tthis.refundModalVisible = false;\n\t\t\tthis.confirmModalVisible = false;\n\t\t\tthis.cancelModalVisible = false;\n\t\t\tthis.zeroAmountVisible = false;\n\t\t\tthis.instalmentRefundModalVisible = false;\n\t\t},\n\t\t\n\t\tshowInstalmentAllCancelModal() {\n\t\t\tthis.instalmentRefundModalVisible = true;\n\t\t\tthis.cancelType = 'CANCEL_ALL_CYCLES';\n        },\n        \n        showInstalmentRemainCancelModal(){\n\t\t\tthis.instalmentRefundModalVisible = true;\n\t\t\tthis.cancelType = 'CANCEL_REMAINING_CYCLES';\n        },\n        \n        showCancelModal() {\n            this.status = 103;\n            this.cancelModalVisible = true;\n        },\n        \n        showZeroAmountBlock() {\n            this.zeroAmountVisible = true;\n        },\n        \n        reloadPaymentDetails() {\n\t\t\tthis.closeModals();\n\t\t\t// Wait for the next tick to trigger the reload. Otherwise the Modal won't be hidden correctly.\n\t\t\tthis.$nextTick().then(() => {\n\t\t\t\tthis.$emit('reload-payment');\n\t\t\t});\n\t\t},\n\n\t\tinstalmentRefund(item) {\n\t\t\tthis.refundableAmount = item.totalAmount - item.refundAmount;\n\t\t\tthis.item = item;\n\t\t\tthis.refundModalVisible = true;\n\t\t},\n\t\t\n\t\tshowInstalmentCancelModal() {\n            if (this.InstalmentInfo != undefined && this.InstalmentInfo != null)\n            {\n                this.InstalmentInfo.forEach(value => {\n                    if(value['reference'] == '' || value['reference'] == null)\n                    {\n                        this.canInstalmentRemainCancel = true;\n                    }\n                });\n            }\n            \n            if(this.instalmentRefundAmount == 0){\n\t\t\t\tthis.canInstalmentAllCancel = true;\n\t\t\t}\n            this.canInstalmentCancel = false;\n        },\n        \n        disableInstalmentRefund(item) {\n            if( item.reference == undefined || item.reference == ''  || item.refundAmount >= item.totalAmount || !this.acl.can('novalnet_extension.editor'))\n            {\n                return true;\n            }\n    \n            return false;\n        }\n    }\n    \n    \n});\n","{% block novalnet_payment_order_refund_modal %}\n    <sw-modal :title=\"$tc('novalnet-payment.settingForm.extension.refundButton')\"\n              @modal-close=\"closeModal\">\n\t\t\n\t\t\t{% block novalnet_payment_order_refund_modal_content %}\n\t\t\t\t<template #default>\n\n\t\t\t\t\t{% block novalnet_payment_order_refund_modal_content_info_text %}\n\t\t\t\t\t\t<sw-container columns=\"1fr\"\n\t\t\t\t\t\t\t\t\tgap=\"0px 30px\">\n\t\t\t\t\t\t\t<sw-number-field v-model:value=\"refundAmount\"\n\t\t\t\t\t\t\t\t\t\t:max=\"item.amount\"\n\t\t\t\t\t\t\t\t\t\t:min=\"0\"\n\t\t\t\t\t\t\t\t\t\t:allowEmpty=\"false\"\n\t\t\t\t\t\t\t\t\t\tnumberType=\"int\"\n\t\t\t\t\t\t\t\t\t\t:label=\"$tc('novalnet-payment.settingForm.extension.amountTitle')\"\n\t\t\t\t\t\t\t\t\t\t:helpText=\"$tc('novalnet-payment.settingForm.extension.refundDescription')\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</sw-number-field>\n\t\t\t\t\t\t\t<sw-text-field v-model:value=\"reason\"\n\t\t\t\t\t\t\t\t\t:placeholder=\"$tc('novalnet-payment.settingForm.extension.refundReference')\"\n\t\t\t\t\t\t\t\t\t:label=\"$tc('novalnet-payment.settingForm.extension.refundReference')\">\n\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t</sw-container>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n\n\t\t\t{% block novalnet_payment_order_refund_modal_actions %}\n\t\t\t\t<template #modal-footer>\n\n\t\t\t\t\t{% block novalnet_payment_order_refund_modal_confirm %}\n\t\t\t\t\t\t<sw-button secondary slim variant=\"primary\" :disabled=\"disable\" :square=\"false\" :block=\"false\" :isLoading=\"false\" @click=\"novalnetRefund\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-refund-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-refund-modal', {\n\ttemplate,\n\t\n\tprops:{\n\t\t\n\t\trefundableAmount : {\n\t\t\ttype : Number,\n\t\t\trequired : true\n\t\t},\n\t\t\n\t\torder: {\n\t\t\ttype : Object,\n\t\t\trequired : true\n\t\t},\n\t\t\n\t\titem: {\n\t\t\ttype : Object,\n\t\t\trequired : true\n\t\t}\n\t\t\n\t},\n\t\n\tinject: [\n\t\n\t\t'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n\t],\n\t\n\tmixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n    \n    data(){\n\t\treturn {\n\t\t\treason: '',\n\t\t\tdisable: false,\n\t\t\trefundAmount: this.refundableAmount\n\t\t};\n\t},\n\t\n\t methods: {\n\t\t \n\t\tcloseModal() {\n            this.$emit('modal-close');\n        },\n        \n        novalnetRefund()\n        {\n            const reason\t\t= this.reason;\n            const orderNumber\t= this.order.orderNumber;\n\n\t\t\tif(this.refundAmount == '0')\n\t\t\t{\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.amountRefundError')\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.disable = true;\n\t\t\t\n            this.NovalPaymentApiCredentialsService.refundPayment(\n                orderNumber,\n                this.refundAmount,\n                reason,\n                this.item.reference,\n            ).then((response) => {\n\t\t\t\tif(response.result != undefined && response.result != null) {\n\t\t\t\t\t\n\t\t\t\t\tif(response.result.status != undefined && response.result.status != null && response.result.status == 'SUCCESS') {\n\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.refundSuccess')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse if(response.result.status_text != undefined && response.result.status_text != null && response.result.status_text != '') {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\t\tmessage: response.result.status_text,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} \n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\telse{\n\t\t\t\t\t\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t}\n                this.$emit('modal-close');\n                setTimeout(this.$router.go, 3000);\n            }).catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false\n                    });\n                    this.$emit('modal-close');\n            });\n\t\t},\n\t}\n});\n","{% block novalnet_payment_order_manage_modal %}\n    <sw-modal :title=\"$tc('novalnet-payment.settingForm.extension.Managetitle')\"\n              @modal-close=\"closeModal\">\n\n        {% block novalnet_payment_order_manage_modal_content %}\n            <template #default>\n\n                {% block novalnet_payment_order_manage_modal_content_info_text %}\n                    <sw-container columns=\"1fr\" gap=\"0px 30px\">\n\t\t\t\t\t\t<div v-if=\"status == 100\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.confirmMessage') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if=\"status == 103\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.cancelMessage') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</sw-container>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block novalnet_payment_order_manage_modal_actions %}\n            <template #modal-footer>\n\n                {% block novalnet_payment_order_manage_modal_confirm %}\n                    <sw-button secondary slim variant=\"primary\" :disabled=\"disable\" :square=\"false\" :block=\"false\" :isLoading=\"false\" @click=\"novalnetOnhold\">\n\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n\t\t\t\t\t</sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-manage-transaction-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-manage-transaction-modal', {\n    template,\n\n    props: {\n        status: {\n            type: Number,\n            required: true\n        },\n        order: {\n            type: Object,\n            required: true\n        }\n    },\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    data() {\n        return {\n            confirm: true,\n            cancel: false,\n            disable: false\n        };\n    },\n\n    methods: {\n\n\t\tcloseModal() {\n            this.$emit('modal-close');\n        },\n\n\t\tnovalnetOnhold()\n        {\n\t\t\tlet status\t= this.status;\n\t\t\tconst orderNumber\t= this.order.orderNumber;\n\n\t\t\tif( status == '' || status == undefined )\n\t\t\t{\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.onholdLabel')\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.disable = true;\n\n\t\t\tthis.NovalPaymentApiCredentialsService.managePayment(\n                orderNumber,\n                status\n            ).then((response) => {\n\t\t\t\t\n\t\t\t\tif(response !=''){\n\t\t\t\t\t\n\t\t\t\t\tif(response.result.status == 'SUCCESS')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(status == 100) {\n\t\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.onholdSuccess')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.onholdCancel')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(response.result.status_text != undefined && response.result.status_text != null && response.result.status_text != '') {\n\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: response.result.status_text,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n                this.$emit('modal-close');\n                setTimeout(this.$router.go, 3000);\n            }).catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false\n                    });\n                    this.$emit('modal-close');\n            });\n\t\t}\n\t}\n});\n","{% block novalnet_payment_order_refund_modal %}\n    <sw-modal :title=\"$tc('novalnet-payment.settingForm.extension.zeroAmountButton')\"\n              @modal-close=\"closeModal\">\n\t\t\n\t\t\t{% block novalnet_payment_order_zero_amount_modal_content %}\n\t\t\t\t<template #default>\n\n\t\t\t\t\t{% block novalnet_payment_order_zero_amount_modal_content_info_text %}\n\t\t\t\t\t\t<sw-container columns=\"1fr\"\n\t\t\t\t\t\t\t\t\tgap=\"0px 30px\">\n\t\t\t\t\t\t\t<sw-number-field v-model:value=\"bookAmount\"\n\t\t\t\t\t\t\t\t\t\t:min=\"0\"\n\t\t\t\t\t\t\t\t\t\t:allowEmpty=\"false\"\n\t\t\t\t\t\t\t\t\t\tnumberType=\"int\"\n\t\t\t\t\t\t\t\t\t\t:label=\"$tc('novalnet-payment.settingForm.extension.zeroAmountTitle')\"\n\t\t\t\t\t\t\t\t\t\t:helpText=\"$tc('novalnet-payment.settingForm.extension.zeroAmountDescription')\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</sw-number-field>\n\t\t\t\t\t\t</sw-container>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n\n\t\t\t{% block novalnet_payment_order_zero_amount_modal_actions %}\n\t\t\t\t<template #modal-footer>\n\n\t\t\t\t\t{% block novalnet_payment_order_zero_amount_modal_confirm %}\n\t\t\t\t\t\t<sw-button secondary slim variant=\"primary\" :disabled=\"disable\" :square=\"false\" :block=\"false\" :isLoading=\"false\" @click=\"novalnetBookAmount\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.bookButton') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-book-amount-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-book-amount-modal', {\n    template,\n\n    props: {\n        orderAmount: {\n            type: Number,\n            required: true\n        },\n        order: {\n            type: Object,\n            required: true\n        }\n    },\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    data() {\n        return {\n            reason: '',\n            disable: false,\n            bookAmount: this.orderAmount\n        };\n    },\n\n    methods: {\n\n\t\tcloseModal() {\n            this.$emit('modal-close');\n        },\n        \n        novalnetBookAmount()\n        {\n           \n            const orderNumber = this.order.orderNumber;\n            \n\t\t\tif(this.bookAmount == 0)\n\t\t\t{\n\t\t\t\tthis.createNotificationError({\n\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.amountError')\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.disable = true;\n            this.NovalPaymentApiCredentialsService.BookOrderAmount(\n\t\t\t\torderNumber,\n                this.bookAmount\n            ).then((response) => {\n\n\t\t\t\tif(\tresponse.result != undefined && response.result != null )\n\t\t\t\t{\n\t\t\t\t\tif(response.result.status != undefined && response.result.status != null && response.result.status == 'SUCCESS')\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.bookedSuccess')\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if(response.result.status_text != undefined && response.result.status_text != null && response.result.status_text != '') {\n\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: response.result.status_text,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t});\n\t\t\t\t}\n                this.$emit('modal-close');\n                setTimeout(this.$router.go, 3000);\n            }).catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false\n                    });\n                    this.$emit('modal-close');\n            });\n\t\t},\n\t}\n});\n","{% block novalnet_payment_order_cancel_modal %}\n    <sw-modal :title=\"$tc('novalnet-payment.settingForm.extension.instalmentCancelLabel')\"\n              @modal-close=\"closeModal\">\n\n\t\t\t{% block novalnet_payment_order_cancel_modal_content %}\n\t\t\t\t<template #default>\n\n\t\t\t\t\t{% block novalnet_payment_order_cancel_modal_content_info_text %}\n                        <sw-container columns=\"1fr\" gap=\"0px 30px\">\n                            <div v-if=\"cancelType == 'CANCEL_ALL_CYCLES' \">\n\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.cancelAllCycleMessage') }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div v-if=\"cancelType == 'CANCEL_REMAINING_CYCLES' \">\n\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.cancelRemainingCycleMessage') }}\n\t\t\t\t\t\t\t</div>\n                        </sw-container>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n\n\t\t\t{% block novalnet_payment_order_cancel_modal_actions %}\n\t\t\t\t<template #modal-footer>\n\n\t\t\t\t\t{% block novalnet_payment_order_cancel_modal_confirm %}\n\t\t\t\t\t\t<sw-button secondary slim variant=\"primary\" :disabled=\"disable\" :square=\"false\" :block=\"false\" :isLoading=\"false\" @click=\"novalnetInstalmentCancel\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n\t\t\t\t\t\t</sw-button>\n\t\t\t\t\t{% endblock %}\n\t\t\t\t</template>\n\t\t\t{% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-instalment-cancel-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-instalment-cancel-modal', {\n    template,\n\n    props: {\n        cancelType: {\n            type: String,\n            required: true\n        },\n        order: {\n            type: Object,\n            required: true\n        }\n    },\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    data() {\n        return {\n            disable: false,\n        };\n    },\n\n    methods: {\n\n\t\tcloseModal() {\n            this.$emit('modal-close');\n        },\n\n        novalnetInstalmentCancel()\n        {\n            const orderNumber = this.order.orderNumber;\n            const cancelType  = this.cancelType;\n\t\t\tthis.disable = true;\n\t\t\t\n            this.NovalPaymentApiCredentialsService.instalmentCancel(\n                orderNumber,\n                cancelType,\n            ).then((response) => {\n\n\t\t\t\tif(response.result != '')\n\t\t\t\t{\n\t\t\t\t\tif(response.result.status != undefined && response.result.status != null &&  response.result.status == 'SUCCESS')\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.createNotificationSuccess({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.extension.instalmentSuccessMsg')\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if(response.result.status_text != undefined && response.result.status_text != null && response.result.status_text != '') {\n\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: response.result.status_text,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\tmessage: this.$tc('novalnet-payment.settingForm.failureMessage')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.$emit('modal-close');\n                setTimeout(this.$router.go, 3000);\n            }).catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false\n                    });\n                    this.$emit('modal-close');\n            });\n\t\t},\n\t}\n});\n","{% block sw_order_create_details_payment %}\n\n\t{% parent %}\n\t{% block sw_order_create_details_payment_novalnet_seaction %}\n\t\t<template v-if=\"novalnetPayment\" >\n\t\t\t<sw-card\n\t\t\t\trows=\"2\"  :isLoading=\"isLoading\"\n\t\t\t\t:title=\"$tc('novalnet-payment.module.title')\" >\n\t\t\t\t<div >\n\t\t\t\t\t<iframe \n\t\t\t\t\t\tv-if=\"loaded\"\n\t\t\t\t\t\tid =\"adminnovalnetPaymentiframe\"\n\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\ttitle=\"Novalnet Payment Form\"\n\t\t\t\t\t\tstyle=\"border: 0px;\"\n\t\t\t\t\t    :src=\"iframe.src\">\n\t\t\t\t\t</iframe>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t</sw-card>\t\n\t\t\n\t\t</template>\n\t\t\n\t{% endblock %}\n{% endblock %}\n","import template from './sw-order-create-details.html.twig';\n\nconst { Component, Store, Mixin, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-create-details', {\n    template,\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            loaded : false,\n            shouldDisable : true,\n            iframe: {\n                src: ''\n            },\n            paymentformurl : '',\n            novalnetPayment : false\n        };\n    },\n    computed: {\n\t\t\n\t\tcustomer() {\n            return Store.get('swOrder').customer;\n        },\n        cart() {\n            return Store.get('swOrder').cart;\n        },\n        currency(){\n            return Store.get('swOrder').context.currency;\n        },\n        cartPrice() {\n            return this.cart.price;\n        },\n        salesChannelContext(){\n            return Store.get('swOrder').context;\n        },\n        \n        salesChannelId() {\n            return this.salesChannelContext?.salesChannel.id || '';\n        },\n    },\n\n    watch: {\n        salesChannelContext: {\n            deep: true,\n            handler() {\n                if (!this.customer || !this.isCartTokenAvailable) {\n                    return;\n                }\n\n                this.isLoading = true;\n                const paymentRepository = this.repositoryFactory.create('payment_method');\n                const paymentCriteria = new Criteria(1, 1);\n                paymentCriteria.addFilter(Criteria.equals('id', this.salesChannelContext.paymentMethod.id));\n                paymentRepository.search(paymentCriteria, Context.api).then((searchResult) => {\n                    const payment = searchResult.first();\n                    if (!payment) {\n                        return\n                    }\n\n                    this.novalnetPayment = false;\n                    if ((payment.customFields != null) && (payment.customFields.novalnet_payment_method_name  == 'novalnetpay')) {\n                        if (this.currency == null) {\n                            this.createNotificationError({\n                                title: this.$tc('novalnet-payment.settingForm.titleError'),\n                                message: this.$tc('novalnet-payment.settingForm.currencyFailureMessage')\n                            });\n\n                            return;\n                        }\n\n                        if (this.cartPrice != null &&  (this.cartPrice.totalPrice == 0 || this.cartPrice.totalPrice == null)) {\n                            this.createNotificationError({\n                                title: this.$tc('novalnet-payment.settingForm.titleError'),\n                                message: this.$tc('novalnet-payment.settingForm.lineitemFailureMessage')\n                            });\n\n                            return;\n                        }\n\n                        this.novalnetPayment = true;\n                        let billingaddress = '';\n                        let shippingaddress = '';\n\n                        if(this.salesChannelContext.customer.defaultBillingAddress !== null) {\n\t\t\t\t\t\t\tbillingaddress = this.salesChannelContext.customer.defaultBillingAddress;\n\t\t\t\t\t\t} else if (this.context.billingAddressId != null) {\n\t\t\t\t\t\t\tthis.customer.addresses.forEach(value => {\n\t\t\t\t\t\t\t\t if (value.id == this.context.billingAddressId) {\n\t\t\t\t\t\t\t\t\t billingaddress = value;\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t });\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(this.salesChannelContext.customer.defaultShippingAddress !== null) {\n\t\t\t\t\t\t\tshippingaddress = this.salesChannelContext.customer.defaultShippingAddress;\n\t\t\t\t\t\t} else if (this.context.shippingAddressId != null) {\n\t\t\t\t\t\t\tthis.customer.addresses.forEach(value => {\n\t\t\t\t\t\t\t\t if (value.id == this.context.shippingAddressId) {\n\t\t\t\t\t\t\t\t\t billingaddress = value;\n\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t });\n\t\t\t\t\t\t}\n                        \n                        let me = this.NovalPaymentApiCredentialsService;\n                        let customerPaymentDetails = this.customer;\n                        this.NovalPaymentApiCredentialsService.novalnetPayment(shippingaddress, billingaddress, this.cartPrice.totalPrice , this.currency.isoCode, this.customer ).then((payment) => {\n                            if (payment != '' && payment != undefined) {\n                                if (payment.result.status =='SUCCESS' && payment.result.redirect_url != '' && payment.result.redirect_url != undefined) {\n                                    this.iframe.src = payment.result.redirect_url;\n                                    this.loaded = true;\n                                    const recaptchaScript = document.createElement('script');\n                                    recaptchaScript.setAttribute('src', 'https://cdn.novalnet.de/js/pv13/checkout.js?' + new Date().getTime());\n                                    recaptchaScript.type = 'text/javascript';\n                                    document.head.appendChild(recaptchaScript);\n                                    this.paymentformurl = recaptchaScript;\n                                    this.paymentformurl.addEventListener('load', ()=> {\n\t\t\t\t\t\t\t\t\t\t document.querySelector('.sw-button-process').disabled = false;\n                                        this.onWindowLoad(me, customerPaymentDetails);\n                                    });\n                                }\n                            }\n                        }).catch((errorResponse) => {\n                            this.createNotificationError({\n                                message: `${errorResponse.title}: ${errorResponse.message}`\n                            });\n                        });\n                    }\n                });\n            },\n        },\n\n        customer: {\n            deep: true,\n            handler() {\n                if (this.customer == null) {\n                    return;\n                }\n            },\n            immediate: true\n        }\n    },\n\n    methods: {\n        onWindowLoad(e, customer) {\n            const paymentForm = new NovalnetPaymentForm();\n            const submit = document.querySelector('.sw-button-process');\n        \n            let request = {\n                iframe: '#adminnovalnetPaymentiframe',\n                initForm: {\n                    uncheckPayments: false,\n                    showButton: false,\n\t\t\t\t}\n            };\n\n            paymentForm.initiate(request);\n            paymentForm.validationResponse(() => {\n                paymentForm.initiate(request);\n            });\n\n            submit.addEventListener('click', (event) => {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                paymentForm.getPayment((function(paymentDetails) {\n                    let value = JSON.stringify(paymentDetails);\n                    e.paymentValue(value, customer).then(() => {\n                    });\n                }));\n            });\n        }\n    },\n});\n","const { Component, Store, Mixin, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-create-general', {\n   \n\tinject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        customer() {\n            return Store.get('swOrder').customer;\n        },\n        cart() {\n            return Store.get('swOrder').cart;\n        },\n        currency(){\n            return Store.get('swOrder').context.currency;\n        },\n        cartPrice() {\n            return this.cart.price;\n        },\n        salesChannelContext(){\n            return Store.get('swOrder').context;\n        },\n    },\n\n    watch: {\n        salesChannelContext: {\n            deep: true,\n            handler() {\n\n                if (!this.customer) {\n                    return;\n                }\n\n                this.isLoading = true;\n                const paymentRepository = this.repositoryFactory.create('payment_method');\n                const paymentCriteria = new Criteria(1, 1);\n                paymentCriteria.addFilter(Criteria.equals('id', this.salesChannelContext.paymentMethod.id));\n                paymentRepository.search(paymentCriteria, Context.api).then((searchResult) => {\n                    const payment = searchResult.first();\n                    if (!payment) {\n                        return\n                    }\n                    this.novalnetPayment = false;\n                    if ((payment.customFields != null) && (payment.customFields.novalnet_payment_method_name  == 'novalnetpay')) {\n                        this.onWindowLoad();\n                    }\n                });\n            },\n        },\n\n        customer: {\n            deep: true,\n            handler() {\n                if (this.customer == null) {\n                    return;\n                }\n            },\n            immediate: true\n        }\n    },\n\n    methods: {\n        onWindowLoad() {\n            document.querySelector('.sw-button-process').disabled = true;\n\t    }    \n    },\n});\n","{% block sw_order_detail_base_secondary_info_payment %}\n\t\t<template v-if=\"currentOrder.transactions.length > 0\">\n\t\t\t<dl>\n\t\t\t\t<dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt>\n\t\t\t\t<dd>\n\t\t\t\t\t{{ paymentMethod }} \n\t\t\t\t</dd>\n\t\t\t</dl>\n\t\t</template>\n{% endblock %}\n","import template from './sw-order-user-card.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-order-user-card', {\n    template,\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        currentOrder: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        }\n    },\n\n    data() {\n        return {\n           paymentMethod : ''\n        };\n    },\n\n\twatch: {\n\t\t\n\t\tcurrentOrder: {\n            deep: true,\n            handler() {\n\t\t\t\tif (this.currentOrder == '') {\n                    return;\n                }\n             \n                if (this.currentOrder.transactions.last().paymentMethod.customFields != null && this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name != undefined && this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name == \"novalnetpay\"){\n\n\t\t\t\t\tthis.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.currentOrder.orderNumber).then((payment) => {\n\t\t\t\t\t\t\tif(payment != undefined && payment != null)\n\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\tif(payment.paymentName != undefined && payment.paymentName != null){\n\t\t\t\t\t\t\t\t\tthis.paymentMethod = payment.paymentName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tthis.paymentMethod = this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.paymentMethod = this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}).catch((errorResponse) => {\n\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\tmessage: `${errorResponse.title}: ${errorResponse.message}`\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.paymentMethod = this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t}\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t}\n});\n","{% block sw_order_detail_base_general_info_summary_sub_description %}\n\t<div class=\"sw-order-general-info__summary-sub-description\">\n\t\t{{ $tc('sw-order.generalTab.info.summary.on') }}\n\t\t{{ dateFilter(order.orderDateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric'\n                }) }}\n\t\t{{ $tc('sw-order.generalTab.info.summary.with') }}\n\t\t{{ paymentMethod }} \n\t\t<template v-if=\"order.deliveries.last()\">\n\t\t\t{{ $tc('sw-order.generalTab.info.summary.and') }}\n\t\t\t{{ order.deliveries.last().shippingMethod.translated.name }}\n\t\t</template>\n\t</div>\n{% endblock %}\n","import template from './sw-order-general-info.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-order-general-info', {\n    template,\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n           paymentMethod : ''\n        };\n    },\n\t\n\twatch: {\n\t\t\n\t\torder: {\n            deep: true,\n            handler() {\n\t\t\t\tif (this.order == '') {\n                    return;\n                }\n\n                if (this.order.transactions.last().paymentMethod.customFields != null && this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name != undefined && this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name == \"novalnetpay\") {\n\t\t\t\t\t\n\t\t\t\t\tif(this.order.transactions.last().customFields != null && this.order.transactions.last().customFields.novalnet_payment_name != undefined  && this.order.transactions.last().customFields.novalnet_payment_name !=''){\n\t\t\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().customFields.novalnet_payment_name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t\tthis.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.order.orderNumber).then((payment) => {\n\t\t\t\t\t\t\t\tif(payment != undefined && payment != null)\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\tif(payment.paymentName != undefined && payment.paymentName != null){\n\t\t\t\t\t\t\t\t\t\tthis.paymentMethod = payment.paymentName;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).catch((errorResponse) => {\n\t\t\t\t\t\t\tthis.createNotificationError({\n\t\t\t\t\t\t\t\tmessage: `${errorResponse.title}: ${errorResponse.message}`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\tthis.paymentMethod = this.order.transactions.last().paymentMethod.translated.distinguishableName;\n\t\t\t\t}\n\t\t\t},\n\t\t\timmediate: true\n\t\t}\n\t}\n});\n","import './page/novalnet-payment-settings';\nimport './components/novalnet-payment-credentials';\nimport './components/novalnet-payment-settings-icon';\nimport './extension/sw-customer/component/sw-customer-base-info';\nimport './extension/sw-order/view/sw-order-detail-details';\nimport './extension/sw-order/view/novalnet-payment-refund-modal';\nimport './extension/sw-order/view/novalnet-payment-manage-transaction-modal';\nimport './extension/sw-order/view/novalnet-payment-book-amount-modal';\nimport './extension/sw-order/view/novalnet-payment-instalment-cancel-modal';\nimport './extension/sw-order/view/sw-order-create-details';\nimport './extension/sw-order/view/sw-order-create-general';\nimport './extension/sw-order/component/sw-order-user-card';\nimport './extension/sw-order/component/sw-order-general-info';\n\nconst { Module } = Shopware;\n\nModule.register('novalnet-payment', {\n\ttype\t: 'plugin',\n\tname\t: 'NovalnetPayment',\n\ttitle\t: 'novalnet-payment.module.title',\n\tdescription\t:'novalnet-payment.module.description',\n\n\troutes: {\n        index: {\n\t\t\tcomponent: 'novalnet-payment-settings',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'novalnet_payment.viewer',\n            }\n        },\n        detail: {\n            component: 'novalnet-payment-settings',\n            path: 'settings',\n            redirect: {\n                name: 'novalnet.payment.credentials'\n            },\n            children: {\n\t\t\t\tcredentials: {\n\t\t\t\t\tcomponent: 'novalnet-payment-credentials',\n\t\t\t\t\tpath: 'credentials',\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tparentPath: 'sw.settings.index',\n\t\t\t\t\t\tprivilege: 'novalnet_payment.viewer',\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        \n    },\n\tsettingsItem: {\n        group: 'plugins',\n        to: 'novalnet.payment.detail.credentials',\n        iconComponent: 'novalnet-payment-settings-icon',\n        backgroundEnabled: true,\n        privilege: 'novalnet_payment.viewer'\n    }\n});\n","const ApiService = Shopware.Classes.ApiService;\n\nclass NovalPaymentApiCredentialsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'novalnet-payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateApiCredentials(clientId, accessKey) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/validate-api-credentials`,\n                {\n\t\t\t\t\tclientId,\n\t\t\t\t\taccessKey\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: this.getBasicHeaders()\n\t\t\t\t}\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n    \n    getNovalnetAmount(orderNumber) {\n\t\treturn this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/transaction-amount`,\n                {\n\t\t\t\t\torderNumber\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: this.getBasicHeaders()\n\t\t\t\t}\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n\t}\n\t\n\trefundPayment(orderNumber, refundAmount, reason, instalmentCycleTid) {\n\t\treturn this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/refund-amount`,\n                {\n\t\t\t\t\torderNumber,\n\t\t\t\t\trefundAmount,\n\t\t\t\t\treason,\n\t\t\t\t\tinstalmentCycleTid\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: this.getBasicHeaders()\n\t\t\t\t}\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n\t}\n\n\tmanagePayment(orderNumber, status) {\n\t\treturn this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/manage-payment`,\n                {\n\t\t\t\t\torderNumber: orderNumber,\n\t\t\t\t\tstatus: status\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: this.getBasicHeaders()\n\t\t\t\t}\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n\t}\n\n\tinstalmentCancel(orderNumber, cancelType) {\n\t\treturn this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/instalment-cancel`,\n                {\n\t\t\t\t\torderNumber,\n\t\t\t\t\tcancelType\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: this.getBasicHeaders()\n\t\t\t\t}\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n\t}\n\n\tBookOrderAmount(orderNumber, bookAmount) {\n        const apiRoute = `_action/${this.getApiBasePath()}/book-amount`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\torderNumber,\n\t\t\t\tbookAmount\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    getNovalnetPaymentMethod (orderNumber) {\n        const apiRoute = `_action/${this.getApiBasePath()}/novalnet-paymentmethod`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\torderNumber\n\t\t\t\t\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    configureWebhookUrl(url, productActivationKey, paymentAccessKey) {\n        const apiRoute = `_action/${this.getApiBasePath()}/webhook-url-configure`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\turl,\n\t\t\t\tproductActivationKey,\n\t\t\t\tpaymentAccessKey\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    novalnetPayment(shippingaddress, billingaddress, amount,  currency, customer) {\n        const apiRoute = `_action/${this.getApiBasePath()}/load-payment-form`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\tshippingaddress,\n\t\t\t\tbillingaddress,\n\t\t\t\tamount,\n\t\t\t\tcurrency,\n\t\t\t\tcustomer\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    \n    paymentValue(value, customer) {\n        const apiRoute = `_action/${this.getApiBasePath()}/payment-value-data`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\tvalue,\n\t\t\t\tcustomer\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n    getCustomerPaymentMethod(customerNo) {\n        const apiRoute = `_action/${this.getApiBasePath()}/customer-payment-data`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n\t\t\t\tcustomerNo\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n    \n}\n\nexport default NovalPaymentApiCredentialsService;\n","import NovalPaymentApiCredentialsService\n    from '../../src/core/service/api/novalnet-payment-api-credentials.service';\n\nconst { Application } = Shopware;\n\nApplication.addServiceProvider('NovalPaymentApiCredentialsService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new NovalPaymentApiCredentialsService(initContainer.httpClient, container.loginService);\n});\n","Shopware.Service('privileges')\n    .addPrivilegeMappingEntry({\n        category: 'permissions',\n        parent: 'orders',\n        key: 'novalnet_extension',\n        roles: {\n            viewer: {\n                privileges: [\n                    'novalnet_transaction_details:read',\n                ],\n                dependencies: [],\n            },\n            editor: {\n                privileges: [\n                    'novalnet_transaction_details:update',\n                    'order_transaction:read',\n                    'order_transaction:update',\n                ],\n                dependencies: [\n                    'novalnet_extension.viewer',\n                    'order.editor',\n                ],\n            },\n            creator: {\n                privileges: [\n                    'novalnet_transaction_details:create',\n                ],\n                dependencies: [\n                    'novalnet_extension.viewer',\n                    'novalnet_extension.editor',\n                ],\n            },\n            deleter: {\n                privileges: [\n                    'novalnet_transaction_details:delete',\n                ],\n                dependencies: [\n                    'novalnet_extension.viewer',\n                ],\n            },\n        },\n    });\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'novalnet_payment',\n    key: 'novalnet_payment',\n    roles: {\n        viewer: {\n            privileges: [\n                'system_config:read',\n                'sales_channel:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'system_config:update',\n                'system_config:create',\n                'system_config:delete',\n                'sales_channel:update',\n            ],\n            dependencies: [\n                'novalnet_payment.viewer',\n            ],\n        },\n    },\n});\n"],"names":["template$b","Component","Mixin","Defaults","Criteria","template","configData","defaultConfig","criteria","res","clientId","accessKey","field","response","tariff","template$a","generatedUrl","config","value","key","me","status","productActivationKey","callbackUrl","template$9","template$8","paymentDetails","errorResponse","template$7","Context","currency","orderRepository","orderCriteria","searchResult","order","isNovalnet","comments","translation","a","b","orderTransaction","payment","additionalDetails","counter","values","novalnetPayment","item","template$6","reason","orderNumber","template$5","template$4","template$3","cancelType","template$2","Store","_a","paymentRepository","paymentCriteria","billingaddress","shippingaddress","customerPaymentDetails","recaptchaScript","customer","paymentForm","submit","request","event","template$1","Module","ApiService","NovalPaymentApiCredentialsService","httpClient","loginService","apiEndpoint","refundAmount","instalmentCycleTid","bookAmount","apiRoute","url","paymentAccessKey","amount","customerNo","Application","container","initContainer"],"mappings":"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"}