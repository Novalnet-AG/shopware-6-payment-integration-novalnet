const A=`{% block novalnet_payment_settings %} <sw-page class="novalnet-payment"> {% block novalnet_payment_settings_header %} <template #smart-bar-header> <h2> {{ $tc('sw-settings.index.title') }} <sw-icon name="regular-chevron-right-xs" small></sw-icon> {{ $tc('novalnet-payment.settingForm.title') }} </h2> </template> {% endblock %} {% block novalnet_payment_settings_actions %} <template #smart-bar-actions> {% block novalnet_payment_actions_save %} <sw-button-process v-model:value="isSaveSuccessful" class="sw-settings-login-registration__save-action" variant="primary" :isLoading="isLoading" :disabled="isLoading || !acl.can('novalnet_payment.editor')" @click="onSave"> {{ $tc('novalnet-payment.settingForm.buttons.save') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block novalnet_payment_content %} <template #content> {% block novalnet_payment_content_card_view %} <sw-card-view> {% block novalnet_payment_content_sales_channel_config %} <sw-sales-channel-config v-model:value="config" ref="configComponent" domain="NovalnetPayment.settings"> {% block novalnet_payment_content_sales_channelconfig_card %} <template #select="{ onInput, selectedSalesChannelId, salesChannel}"> {% block novalnet_payment_content_sales_channelconfig_card_sales_channel %} <sw-container class="novalnet-sales-channel"> <sw-single-select v-model:value="selectedSalesChannelId" labelProperty="translated.name" valueProperty="id" :disabled="!acl.can('novalnet_payment.editor')" :options="salesChannel" show-clearable-button @update:value="onInput"> </sw-single-select> </sw-container> {% endblock %} </template> {% endblock %} {% block novalnet_payment_config_content_channel_config_cards %} <template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }"> {% block novalnet_payment_config_content_tabs %} <sw-tabs> {% block novalnet_payment_content_card_channel_config_credentials_card %} <sw-tabs-item class="novalnet-payment-configuration-global-config" :route="{ name: 'novalnet.payment.detail.credentials', params: { id: $route.params.id }}" :title="$tc('novalnet-payment.module.globalTitle')"> {{ $tc('novalnet-payment.module.globalTitle') }} </sw-tabs-item> {% endblock %} </sw-tabs> {% endblock %} {% block novalnet_payment_configuration_content_router_view %} <router-view v-slot="{ Component }"> <component :is="Component" :actualConfigData="actualConfigData" :allConfigs="allConfigs" :selectedSalesChannelId="selectedSalesChannelId" /> </router-view> {% endblock %} </template> {% endblock %} </sw-sales-channel-config> {% endblock %} {% block novalnet_payment_content_card_loading %} <sw-loader v-if="isLoading"></sw-loader> {% endblock %} </sw-card-view> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,{Component:I,Mixin:f,Defaults:y}=Shopware,{Criteria:v}=Shopware.Data;I.register("novalnet-payment-settings",{template:A,mixins:[f.getByName("notification"),f.getByName("sw-inline-snippet")],inject:["acl","NovalPaymentApiCredentialsService","repositoryFactory"],data(){return{isLoading:!1,config:{},salesChannels:[],isSaveSuccessful:!1,clientIdFilled:!1,clientSecretFilled:!1}},computed:{salesChannelRepository(){return this.repositoryFactory.create("sales_channel")}},created(){this.createdComponent()},watch:{config:{handler(e){if(!e)return;const n=this.$refs.configComponent.allConfigs.null;this.$refs.configComponent.selectedSalesChannelId!==null&&(this.config["NovalnetPayment.settings.clientId"]||(this.config["NovalnetPayment.settings.clientId"]=n["NovalnetPayment.settings.clientId"]),this.config["NovalnetPayment.settings.accessKey"]||(this.config["NovalnetPayment.settings.accessKey"]=n["NovalnetPayment.settings.accessKey"])),this.$emit("salesChannelChanged"),this.$emit("update:value",e)},deep:!0}},methods:{createdComponent(){this.isLoading=!0;const e=new v;e.addFilter(v.equalsAny("typeId",[y.storefrontSalesChannelTypeId,y.apiSalesChannelTypeId])),this.salesChannelRepository.search(e,Shopware.Context.api).then(n=>{n.add({id:null,translated:{name:this.$tc("sw-sales-channel-switch.labelDefaultOption")}}),this.salesChannels=n}).finally(()=>{this.isLoading=!1})},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0;var e=this.getConfigValue("clientId"),n=this.getConfigValue("accessKey");if(this.getConfigValue("clientId")!==""&&typeof this.getConfigValue("clientId")<"u"&&(e=this.getConfigValue("clientId").replace(/\s/g,"")),this.getConfigValue("accessKey")!==""&&typeof this.getConfigValue("accessKey")<"u"&&(n=this.getConfigValue("accessKey").replace(/\s/g,"")),typeof e>"u"||e==""){this.isLoading=!1,this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.emptyMessage")});return}else if(typeof n>"u"||n==""){this.isLoading=!1,this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.emptyAccessKeyMessage")});return}this.checkBackendConfiguration()},getConfigValue(e){const n=this.$refs.configComponent.allConfigs.null;return this.$refs.configComponent.selectedSalesChannelId===null?this.config[`NovalnetPayment.settings.${e}`]:this.config[`NovalnetPayment.settings.${e}`]||n[`NovalnetPayment.settings.${e}`]},checkBackendConfiguration(){const e=this.getConfigValue("clientId").replace(/\s/g,""),n=this.getConfigValue("accessKey").replace(/\s/g,"");this.NovalPaymentApiCredentialsService.validateApiCredentials(e,n).then(t=>{if(t.serverResponse==null||t.serverResponse==""){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}if(t.serverResponse.result.status_code!=100){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:t.serverResponse.result.status_text});return}else{t.tariffResponse.forEach(o=>{(this.config["NovalnetPayment.settings.tariff"]==null||this.config["NovalnetPayment.settings.tariff"]=="")&&(this.config["NovalnetPayment.settings.tariff"]=o.id)}),this.config["NovalnetPayment.settings.clientKey"]=t.serverResponse.merchant.client_key,this.$refs.configComponent.save().then(o=>{this.isSaveSuccessful=!0,o&&(this.config=o),this.isLoading=!1}).catch(()=>{this.isLoading=!1}),this.createNotificationSuccess({title:this.$tc("novalnet-payment.settingForm.titleSuccess"),message:this.$tc("novalnet-payment.settingForm.successMessage")});return}}).catch(()=>{this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.errorMessage")}),this.isLoading=!1,this.isTestSuccessful=!1})}},metaInfo(){return{title:this.$createTitle()}}});const P=`{% block novalnet_payment_content_card_channel_config_credentials %} <sw-card class="sw-card--grid" :title="$tc('novalnet-payment.settingForm.credentials.cardTitle')"> {% block novalnet_payment_content_card_channel_config_credentials_card_container %} <sw-container> {% block novalnet_payment_content_card_channel_config_credentials_card_container_settings %} <div v-if="actualConfigData" class="novalnet_payment-settings-credentials"> <sw-alert v-if="projectMode" variant="info" appearance="default" :showIcon="true" :closable="false"> {{ $tc('novalnet-payment.module.projectInfo') }} </sw-alert> <div v-html = "$tc('novalnet-payment.module.generalInfo')" class="novalnet_payment-settings-project"> </div> <div v-html = "$tc('novalnet-payment.module.PaymentConfiguration')" class="novalnet_payment-settings-project"> </div> {% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_id %} <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.clientId']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientId']" :customInheritationCheckFunction="checkTextFieldInheritance"> <template #content="props"> <sw-text-field name="NovalnetPayment.settings.clientId" :value="apiActivationKey == null ? props.currentValue : apiActivationKey" :label="$tc('novalnet-payment.settingForm.credentials.activationKey.label')" :helpText="$tc('novalnet-payment.settingForm.credentials.activationKey.tooltipText')" :disabled="!acl.can('novalnet_payment.editor')" @update:value="onCheckApi"> </sw-text-field> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.accessKey']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.accessKey']" :customInheritationCheckFunction="checkTextFieldInheritance"> <template #content="props"> <sw-text-field name="NovalnetPayment.settings.accessKey" :value="paymentAccessKey == null ? props.currentValue : paymentAccessKey" autocomplete="off" :label="$tc('novalnet-payment.settingForm.credentials.accessKey.label')" :helpText="$tc('novalnet-payment.settingForm.credentials.accessKey.tooltipText')" :disabled="!acl.can('novalnet_payment.editor')" @update:value="onCheckApi"> </sw-text-field> </template> </sw-inherit-wrapper> {% endblock %} {% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_break %} <br> {% endblock %} {% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_secret %} <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.clientKey']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientKey']" :customInheritationCheckFunction="checkTextFieldInheritance"> <template #content="props"> <sw-text-field name="NovalnetPayment.settings.clientKey" v-show="shouldDisable" :value="props.currentValue" :disabled="!acl.can('novalnet_payment.editor')" @update:value="props.updateCurrentValue"> </sw-text-field> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.tariff']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.tariff']" > <template #content="props"> <sw-single-select name="NovalnetPayment.settings.tariff" :options="tariffOptions" :label="$tc('novalnet-payment.settingForm.credentials.tariff.label')" :helpText="$tc('novalnet-payment.settingForm.credentials.tariff.tooltipText')" :disabled="!acl.can('novalnet_payment.editor')" :value="props.currentValue" @update:value="props.updateCurrentValue"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.emailMode']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <sw-switch-field name="NovalnetPayment.settings.emailMode" :mapInheritance="props" :label="$tc('novalnet-payment.settingForm.credentials.orderEmailMode.label')" :helpText="$tc('novalnet-payment.settingForm.credentials.orderEmailMode.tooltipText')" :value="props.currentValue" :disabled="props.isInherited || !acl.can('novalnet_payment.editor')" @update:value="props.updateCurrentValue"> </sw-switch-field> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.onHoldStatus']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.onHoldStatus']"> <template #content="props"> <sw-single-select name="NovalnetPayment.settings.onHoldStatus" :options="onHoldOptions" :label="$tc('novalnet-payment.settingForm.credentials.onHold.label')" :helpText="$tc('novalnet-payment.settingForm.credentials.onHold.tooltipText')" :placeholder="$tc('novalnet-payment.onhold.select')" :value="props.currentValue != null ? props.currentValue : onhold" @update:value="props.updateCurrentValue"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.completeStatus']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.completeStatus']"> <template #content="props"> <sw-single-select name="NovalnetPayment.settings.completeStatus" :options="completeOptions" :label="$tc('novalnet-payment.settingForm.credentials.complete.label')" :placeholder="$tc('novalnet-payment.onhold.select')" :helpText="$tc('novalnet-payment.settingForm.credentials.complete.tooltipText')" :value="props.currentValue != null ? props.currentValue : completed" @update:value="props.updateCurrentValue"> </sw-single-select> </template> </sw-inherit-wrapper> {% endblock %} </div> {% endblock %} </sw-container> {% endblock %} {% block novalnet_payment_content_card_channel_loading %} <sw-loader v-if="isLoading"></sw-loader> {% endblock %} </sw-card> {% endblock %} {% block novalnet_payment_content_card_channel_config_merchant_credentials %} <sw-card class="sw-card--grid" :title="$tc('novalnet-payment.settingForm.merchantSettings.cardTitle')"> {% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container %} <sw-container> {% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings %} <div v-if="actualConfigData" class="novalnet_payment-settings-merchant-credentials"> {% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings_ip %} <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.callbackUrl']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.callbackUrl']" > <template #content="props"> <sw-text-field name="NovalnetPayment.settings.callbackUrl" class="novalnet-payment-callback-field" :label="$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.label')" :helpText="$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.tooltipText')" :value="props.currentValue" @update:value="props.updateCurrentValue"> </sw-text-field> </template> </sw-inherit-wrapper> <sw-button-process :disabled="false || !acl.can('novalnet_payment.editor')" :isLoading="buttonLoad" @click="configureWebhookUrl()"> {{ $tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.button') }} </sw-button-process> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.deactivateIp']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']" > <template #content="props"> <sw-switch-field name="NovalnetPayment.settings.deactivateIp" :mapInheritance="props" :label="$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.label')" :helpText="$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.tooltipText')" :disabled="props.isInherited || !acl.can('novalnet_payment.editor')" :value="props.currentValue" @update:value="props.updateCurrentValue"> </sw-switch-field> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData['NovalnetPayment.settings.mailTo']" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.mailTo']" :customInheritationCheckFunction="checkTextFieldInheritance" > <template #content="props"> <sw-text-field name="NovalnetPayment.settings.mailTo" :mapInheritance="props" :isInherited="props.isInherited" :label="$tc('novalnet-payment.settingForm.merchantSettings.mailTo.label')" :helpText="$tc('novalnet-payment.settingForm.merchantSettings.mailTo.tooltipText')" :disabled="props.isInherited || !acl.can('novalnet_payment.editor')" :value="props.currentValue" @update:value="props.updateCurrentValue"> </sw-text-field> </template> </sw-inherit-wrapper> {% endblock %} </div> {% endblock %} </sw-container> {% endblock %} </sw-card> {% endblock %}`,{Component:S,Mixin:g}=Shopware;S.register("novalnet-payment-credentials",{template:P,mixins:[g.getByName("notification"),g.getByName("sw-inline-snippet")],inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl","systemConfigApiService"],name:"NovalnetPaymentCredentials",icon:"default-action-settings",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},data(){const n=(window.location.protocol+"//"+window.location.host+window.location.pathname).split("/admin").join("");return{onHoldOptions:[],completeOptions:[],onhold:"authorized",completed:"paid",shouldDisable:!1,projectMode:!1,apiActivationKey:"",paymentAccessKey:"",isLoading:!1,isRequested:"",showMessage:!1,buttonLoad:!1,tariffId:"",tariffOptions:[],NovalnetPaymentCallBackUrl:n+"/novalnet/callback"}},watch:{actualConfigData:{handler(e){e&&this.$emit("update:value",e)},deep:!0}},computed:{actualConfigData:{get(){return this.allConfigs[this.selectedSalesChannelId]},set(e){this.allConfigs={...this.allConfigs,[this.selectedSalesChannelId]:e}}}},created(){this.createdComponent()},updated(){this.createdComponent()},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"},getInheritValue(e){return this.selectedSalesChannelId==null?this.actualConfigData[e]:this.allConfigs.null[e]},onCheckApi(){if(event.target.name==="NovalnetPayment.settings.clientId"?this.apiActivationKey=this.actualConfigData["NovalnetPayment.settings.clientId"]=event.target.value:event.target.name==="NovalnetPayment.settings.accessKey"&&(this.paymentAccessKey=this.actualConfigData["NovalnetPayment.settings.accessKey"]=event.target.value),this.apiActivationKey===""&&this.paymentAccessKey===""){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}this.isRequested="",this.showMessage=!0,this.createdComponent()},createdComponent(){const e=this;this.actualConfigData!==void 0&&this.isRequested!==this.selectedSalesChannelId&&(this.isRequested=this.selectedSalesChannelId,this.apiActivationKey=this.actualConfigData["NovalnetPayment.settings.clientId"]||this.allConfigs.null["NovalnetPayment.settings.clientId"],this.paymentAccessKey=this.actualConfigData["NovalnetPayment.settings.accessKey"]||this.allConfigs.null["NovalnetPayment.settings.accessKey"],this.apiActivationKey!==void 0&&this.apiActivationKey!==""&&this.paymentAccessKey!==void 0&&this.paymentAccessKey!==""&&(this.apiActivationKey=this.apiActivationKey.replace(/\s/g,""),this.paymentAccessKey=this.paymentAccessKey.replace(/\s/g,""),this.isLoading=!0,this.NovalPaymentApiCredentialsService.validateApiCredentials(this.apiActivationKey,this.paymentAccessKey).then(n=>{const t=n.serverResponse.result.status_code;this.isLoading=!1,t!==100?(this.showMessage===!0&&this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:n.serverResponse.result.status_text,autoClose:!0}),this.showMessage=!1):(e.tariffOptions=[],n.tariffResponse.forEach(a=>{this.actualConfigData["NovalnetPayment.settings.clientKey"]=n.serverResponse.merchant.client_key,e.tariffOptions.push({value:a.id,label:a.name}),(this.tariffId===void 0||this.tariffId==="")&&(this.tariffId={value:a.id,label:a.name}),this.showMessage===!0&&this.createNotificationSuccess({title:this.$tc("novalnet-payment.settingForm.titleSuccess"),message:this.$tc("novalnet-payment.settingForm.successMessage"),autoClose:!0}),this.showMessage=!1,n.serverResponse.merchant.test_mode===1&&(this.projectMode=!0)}))}).catch(()=>{this.isLoading=!1})),this.actualConfigData["NovalnetPayment.settings.callbackUrl"]===void 0&&(this.actualConfigData["NovalnetPayment.settings.callbackUrl"]=this.NovalnetPaymentCallBackUrl)),this.onHoldOptions=[{value:"open",label:this.$tc("novalnet-payment.onhold.open")},{value:"process",label:this.$tc("novalnet-payment.onhold.process")},{value:"authorized",label:this.$tc("novalnet-payment.onhold.authorized")},{value:"cancel",label:this.$tc("novalnet-payment.onhold.cancel")},{value:"failed",label:this.$tc("novalnet-payment.onhold.failed")}],this.completeOptions=[{value:"paid",label:this.$tc("novalnet-payment.onhold.paid")},{value:"paidPartially",label:this.$tc("novalnet-payment.onhold.paidPartially")},{value:"cancel",label:this.$tc("novalnet-payment.onhold.cancel")},{value:"failed",label:this.$tc("novalnet-payment.onhold.failed")}]},configureWebhookUrl(){const e=this.actualConfigData["NovalnetPayment.settings.clientId"]||this.allConfigs.null["NovalnetPayment.settings.clientId"],n=this.actualConfigData["NovalnetPayment.settings.accessKey"]||this.allConfigs.null["NovalnetPayment.settings.accessKey"],t=this.actualConfigData["NovalnetPayment.settings.callbackUrl"]||this.allConfigs.null["NovalnetPayment.settings.callbackUrl"];if(e===void 0||e===""||n===void 0||n===""){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.apiFailureMessage")});return}if(t){if(/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,}(:[0-9]{1,5})?(\/.*)?$/i.test(t)===!1)return this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.webhookUrlFailure")}),!1;this.buttonLoad=!0,this.NovalPaymentApiCredentialsService.configureWebhookUrl(t,e,n).then(a=>{a.result.status!==void 0&&a.result.status!=null&&a.result.status!==""&&a.result.status==="SUCCESS"?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.webhookUrlSuccess")}):a.result.status_text!==void 0&&a.result.status_text!=null&&a.result.status_text!==""?this.createNotificationError({message:a.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.webhookUrlFailure")}),this.buttonLoad=!1}).catch(()=>{this.buttonLoad=!1})}}}});const F=`{% block novalnet_payment_settings_icon %} <img class="sw-settings-index__novalnet-payment-icon" :src="assetFilter('novalnetpayment/administration/static/img/plugin.png')" alt=""> {% endblock %}`,{Component:M}=Shopware;M.register("novalnet-payment-settings-icon",{template:F,computed:{assetFilter(){return Shopware.Filter.getByName("asset")}}});const E='{% block sw_customer_base_metadata_default_payment_content %} <dd v-if="!customerEditMode" class="sw-customer-base__label-default-payment-method" > {{ paymentMethod }} </dd> {% endblock %}',{Component:T,Mixin:B}=Shopware;T.override("sw-customer-base-info",{template:E,inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[B.getByName("notification")],props:{customer:{type:Object,required:!0}},data(){return{paymentMethod:""}},watch:{customer:{deep:!0,handler(){this.customer!=""&&(this.customer.defaultPaymentMethod.customFields!=null&&this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name!=null&&this.customer.defaultPaymentMethod.customFields.novalnet_payment_method_name=="novalnetpay"?this.NovalPaymentApiCredentialsService.getCustomerPaymentMethod(this.customer.customerNumber).then(e=>{e!=null&&e!=null?e.paymentName!=null&&e.paymentName!=null?this.paymentMethod=e.paymentName:this.paymentMethod=this.customer.defaultPaymentMethod.translated.distinguishableName:this.paymentMethod=this.customer.defaultPaymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.customer.defaultPaymentMethod.translated.distinguishableName)},immediate:!0}}});const R=`{% block sw_order_detail_details_payment %} <sw-order-details-state-card v-if="transaction" :title="$tc('sw-order.detailsTab.labelTransactionCard')" :order="order" :entity="transaction" :state-label="$tc('sw-order.stateCard.headlineTransactionState')" :disabled="!acl.can('order.editor')" @show-status-history="showStateHistoryModal = true" @save-edits="onSaveEdits" > {% block sw_order_detail_details_payment_billing_address %} <sw-order-address-selection class="sw-order-detail-details__billing-address" type="billing" :address="billingAddress" :address-id="selectedBillingAddressId" :disabled="!acl.can('order.editor')" :label="$tc('sw-order.createBase.detailsBody.labelBillingAddress')" @change-address="onChangeOrderAddress" /> {% endblock %} {% block sw_order_detail_details_payment_method_select %} {% if paymentMethod !='' %} <sw-text-field type="text" :label="$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')" :placeholder="$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')" :disabled="true" v-model:value="paymentMethod" > </sw-text-field> {% else %} <sw-entity-single-select v-model:value="transaction.paymentMethodId" entity="payment_method" label-property="distinguishableName" disabled :criteria="paymentMethodCriteria" :label="$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')" :placeholder="$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')" show-clearable-button /> {% endif %} {% endblock %} </sw-order-details-state-card> {% block sw_order_detail_details_payment_novalnet_seaction %} <template v-if="isNovalnetPayment" > <sw-order-details-state-card v-if="transaction" :title="$tc('novalnet-payment.module.title')" :order="order" :entity="transaction" :state-label="$tc('sw-order.stateCard.headlineTransactionState')" :disabled="!acl.can('order.editor')" @show-status-history="showStateHistoryModal = true" @save-edits="onSaveEdits"> <div class="novalnet-payment-buyer-notification"> {# Logo #} {% block novalnet_payment_order_buyer_info %} <div class="novalnet-payment-buyer-notification-icon-container" > <img class="novalnet-payment-buyer-info-icon" :src="assetFilter('novalnetpayment/static/img/plugin.png')" alt="" > </div> {% endblock %} {# Full name and E-Mail address #} {% block novalnet_payment_order_buyer_info_name_container %} <div class="novalnet-payment-buyer-info-name"> {% block novalnet_payment_order_buyer_info_name_container_name %} <div class="novalnet-payment-buyer-info-full-name"> {{ order.orderCustomer.firstName }} {{ order.orderCustomer.lastName }} </div> {% endblock %} {% block novalnet_payment_order_buyer_info_name_container_email %} <div class="novalnet-payment-buyer-info-email"> {{ order.orderCustomer.email }} </div> {% endblock %} </div> {% endblock %} </div> <sw-container class="novalnet-payment-amount-info" columns="1fr"> {% block novalnet_payment_order_component_amount_info %} <div class="novalnet-payment-amount-info-total-amount" > {{ displayOrderAmount }} </div> {% endblock %} {% block novalnet_payment_amount_info_captured_amount %} <div class="novalnet-payment-amount-captured-amount" > {% block novalnet_payment_amount_info_captured_amount %} + {{ displayPaidAmount }} {% endblock %} {% block novalnet_payment_amount_info_captured_amount_help %} <sw-help-text class="novalnet-payment-captured-amount-help-icon" tooltipPosition="top" :text="$tc('novalnet-payment.settingForm.extension.paidTooltip')"> </sw-help-text> {% endblock %} </div> {% endblock %} {% block novalnet_payment_order_compoenent_amount_info_refuned %} <div class="novalnet-payment-refuned-amount" > {% block novalnet_payment_order_compoenent_amount_info_refuned_amount %} - {{ refundedAmount }} {% endblock %} {% block novalnet_payment_order_compoenent_amount_info_refuned_help %} <sw-help-text class="novalnet-payment-refuned-amount-help-icon" tooltipPosition="top" :text="$tc('novalnet-payment.settingForm.extension.refundTooltip')"> </sw-help-text> {% endblock %} </div> {% endblock %} {% block novalnet_payment_order_info_date %} <div class="novalnet-payment-amount-info-charge-date" > {{ dateFilter(transaction.createdAt) }} </div> {% endblock %} </sw-container> <sw-container class="novalnet-payment-action-toolbar" rows="1" columns="1fr 1fr 1fr 1fr 1fr" gap="10px"> {% block novalnet_payment_order_container_toolbar_refund_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canRefund" :disabled="!acl.can('novalnet_extension.editor')" @click="showRefundModal"> {{ $tc('novalnet-payment.settingForm.extension.refundButton') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_instalment_cancel_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canInstalmentCancel" :disabled="!acl.can('novalnet_extension.editor')" @click="showInstalmentCancelModal"> {{ $tc('novalnet-payment.settingForm.extension.instalmentCancelLabel') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_instalment_all_cancel_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canInstalmentAllCancel" :disabled="!acl.can('novalnet_extension.editor')" @click="showInstalmentAllCancelModal"> {{ $tc('novalnet-payment.settingForm.extension.instalmentAllCancelLabel') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_instalment_remain_cancel_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canInstalmentRemainCancel" :disabled="!acl.can('novalnet_extension.editor')" @click="showInstalmentRemainCancelModal"> {{ $tc('novalnet-payment.settingForm.extension.instalmentRemainCancelLabel') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_capture_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canCaptureVoid" :disabled="!acl.can('novalnet_extension.editor')" @click="showConfirmModal"> {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_cancel_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canCaptureVoid" :disabled="!acl.can('novalnet_extension.editor')" @click="showCancelModal"> {{ $tc('novalnet-payment.settingForm.extension.cancelLabel') }} </sw-button> {% endblock %} {% block novalnet_payment_order_container_toolbar_zero_amount_button %} <sw-button size="small" class="novalnet-payment-pay-action-toolbar__button" v-if="canZeroAmountBooking" :disabled="!acl.can('novalnet_extension.editor')" @click="showZeroAmountBlock"> {{ $tc('novalnet-payment.settingForm.extension.zeroAmountButton') }} </sw-button> {% endblock %} </sw-container> <sw-container class="novalnet-payment-pay-empty-container" columns="1fr"> </sw-container> <sw-container class="novalnet-payment-pay-info-container" columns="1fr"> <hr class="sw-order-detail-state-card__divider"> {% block novalnet_payment_order_component_checkout_info_billing_container %} <div class="novalnet-payment_chechout-info-customer-comments" v-if="isNovalnetPayment" > {% block novalnet_payment_order_component_checkout_info_billing_container_headline %} <div class="novalnet-payment-checkout-info-header"> {{ $tc('novalnet-payment.module.comments') }} </div> {% endblock %} {% block novalnet_payment_order_component_billing_value %} <span class="novalnet-payment-checkout-info-comments" v-html="novalnetComments" style="line-height:22px;"> </span> {% endblock %} </div> {% endblock %} </sw-container> {% block novalnet_payment_order_component_action_toolbar_modals %} <novalnet-payment-refund-modal v-if="refundModalVisible" :refundableAmount="refundableAmount" :order="order" :item="item" @modal-close="closeModals" @reload-payment="reloadPaymentDetails"> </novalnet-payment-refund-modal> <novalnet-payment-manage-transaction-modal v-if="confirmModalVisible" :status="status" :order="order" @modal-close="closeModals" @reload-payment="reloadPaymentDetails"> </novalnet-payment-manage-transaction-modal> <novalnet-payment-manage-transaction-modal v-if="cancelModalVisible" :status="status" :order="order" @modal-close="closeModals" @reload-payment="reloadPaymentDetails"> </novalnet-payment-manage-transaction-modal> <novalnet-payment-book-amount-modal v-if="zeroAmountVisible" :orderAmount="orderAmount" :order="order" @modal-close="closeModals" @reload-payment="reloadPaymentDetails"> </novalnet-payment-book-amount-modal> <novalnet-payment-instalment-cancel-modal v-if="instalmentRefundModalVisible" :item="item" :cancelType="cancelType" :order="order" @modal-close="closeModals" @reload-payment="reloadPaymentDetails"> </novalnet-payment-instalment-cancel-modal> {% endblock %} </sw-order-details-state-card> <sw-card :title="$tc('novalnet-payment.settingForm.instalmentInfo')" v-if="canInstalmentShow"> <template #grid> <sw-data-grid :dataSource="InstalmentInfo" :columns="getInstalmentColums" :compactMode="false" :allowInlineEdit="true" :showSelection="false"> {% block sw_product_detail_base_ratings_actions %} <template #actions="{ item }"> {% block sw_product_detail_base_ratings_actions_edit %} <sw-context-menu-item class="sw-product-detail-base__review-edit" @click="instalmentRefund(item)" :disabled="disableInstalmentRefund(item)"> {{ $tc('novalnet-payment.settingForm.extension.refundButton') }} </sw-context-menu-item> {% endblock %} </template> {% endblock %} </sw-data-grid> </template> </sw-card> </template> {% endblock %} {% endblock %}`,{Context:L,Component:V}=Shopware,{Criteria:_}=Shopware.Data,{currency:u}=Shopware.Utils.format;V.override("sw-order-detail-details",{template:R,inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:["notification"],props:{orderId:{type:String,required:!0},paymentDetails:{type:Object,required:!0}},data(){return{status:0,displayPaidAmount:0,refundedAmount:0,orderAmount:0,displayOrderAmount:0,InstalmentInfo:[],item:{},novalnetComments:"",isNovalnetPayment:!1,refundModalVisible:!1,confirmModalVisible:!1,zeroAmountVisible:!1,cancelModalVisible:!1,canInstalmentAllCancel:!1,canInstalmentRemainCancel:!1,instalmentRefundModalVisible:!1,canCaptureVoid:!1,canRefund:!1,canZeroAmountBooking:!1,canInstalmentCancel:!1,canInstalmentShow:!1,instalmentRefundAmount:0,paymentMethod:"",payLater:["INVOICE","CASHPAYMENT","MULTIBANCO","PREPAYMENT"],instalmentPayments:["INSTALMENT_INVOICE","INSTALMENT_DIRECT_DEBIT_SEPA"],onholdStatus:["91","99","98","85"],refundableAmount:0}},computed:{getInstalmentColums(){return[{property:"number",dataIndex:"number",label:this.$tc("novalnet-payment.settingForm.instalmentNumber"),width:"50px"},{property:"reference",dataIndex:"reference",label:this.$tc("novalnet-payment.settingForm.instalmentReference"),width:"120px"},{property:"amount",dataIndex:"amount",label:this.$tc("novalnet-payment.settingForm.instalmentAmount"),width:"80px"},{property:"totalAmount",dataIndex:"totalAmount",visible:!1},{property:"refundAmount",dataIndex:"refundAmount",visible:!1},{property:"nextCycle",dataIndex:"nextCycle",label:this.$tc("novalnet-payment.settingForm.instalmentDate"),width:"120px"},{property:"status",dataIndex:"status",label:this.$tc("novalnet-payment.settingForm.instalmentStatus"),width:"80px"}]},assetFilter(){return Shopware.Filter.getByName("asset")},dateFilter(){return Shopware.Filter.getByName("date")}},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return;const e=this.repositoryFactory.create("order"),n=new _(1,1);n.addAssociation("transactions"),n.addAssociation("currency"),n.addFilter(_.equals("id",this.orderId)),e.search(n,L.api).then(t=>{const a=t.first();if(!a)return;this.identifier||(this.identifier=a.orderNumber);let o=!1,l="",m=this.$tc("novalnet-payment.module.comments");a.transactions.sort((s,i)=>new Date(i.createdAt)-new Date(s.createdAt)).forEach(s=>{if(s.customFields&&s.customFields.novalnet_comments)return o=!0,l!=""&&(l+="<dt>"+m+"</dt>"),l+=s.customFields.novalnet_comments.split("/ ").join("<br />"),!0}),o?(this.novalnetComments=l.split("&&").join("<dt><strong>"+m+"</strong></dt>"),this.setNovalnetPayment(!0)):this.setNovalnetPayment(!1),this.order.transactions.last().paymentMethod.customFields!=null&&this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name!=null&&this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name=="novalnetpay"?this.order.transactions.last().customFields!=null&&this.order.transactions.last().customFields.novalnet_payment_name!=null&&this.order.transactions.last().customFields.novalnet_payment_name!=""&&(this.paymentMethod=this.order.transactions.last().customFields.novalnet_payment_name):this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName,this.orderAmount=Math.round(Number(a.price.totalPrice)*100),this.displayOrderAmount=u(a.price.totalPrice,a.currency.shortName),this.displayPaidAmount=u(0,a.currency.shortName),this.refundedAmount=u(0,a.currency.shortName),this.canCaptureVoid=!1,this.canRefund=!1,this.canZeroAmountBooking=!1,this.canInstalmentCancel=!1,this.canInstalmentShow=!1,this.InstalmentInfo=[],this.canInstalmentAllCancel=!1,this.canInstalmentRemainCancel=!1,this.NovalPaymentApiCredentialsService.getNovalnetAmount(a.orderNumber).then(s=>{if(s.data!=""&&s.data!=null&&s.data.gatewayStatus){let r=JSON.parse(s.data.additionalDetails);if(this.refundableAmount=Number(s.data.amount)-Number(s.data.refundedAmount),s.data.amount!=0&&(this.displayOrderAmount=u(s.data.amount/100,a.currency.shortName)),s.data.gatewayStatus=="ON_HOLD"||this.onholdStatus.includes(s.data.gatewayStatus)?this.canCaptureVoid=!0:(s.data.amount>0&&s.data.gatewayStatus=="CONFIRMED"&&!this.instalmentPayments.includes(s.data.paymentType)&&Number(s.data.refundedAmount)<Number(s.data.amount)||s.data.gatewayStatus=="PENDING"&&this.payLater.includes(s.data.paymentType))&&s.data.paymentType!="MULTIBANCO"?this.canRefund=!0:this.instalmentPayments.includes(s.data.paymentType)&&s.data.gatewayStatus=="CONFIRMED"&&!r.cancelType?this.canInstalmentCancel=!0:(s.data.paymentType=="CREDITCARD"||s.data.paymentType=="DIRECT_DEBIT_SEPA"||s.data.paymentType=="GOOGLEPAY"||s.data.paymentType=="APPLEPAY"||s.data.paymentType=="DIRECT_DEBIT_ACH")&&Number(s.data.amount)==0&&this.orderAmount!=0&&s.data.gatewayStatus!="FAILURE"&&(this.canZeroAmountBooking=!0),this.paymentMethod==""&&r.payment_name!=null&&r.payment_name!=""&&(this.paymentMethod=r.payment_name),s.data.paidAmount!=0&&(this.displayPaidAmount=u(s.data.paidAmount/100,a.currency.shortName)),s.data.refundedAmount!=0&&(this.refundedAmount=u(s.data.refundedAmount/100,a.currency.shortName)),this.instalmentPayments.includes(s.data.paymentType)&&s.data.gatewayStatus=="CONFIRMED"&&r.InstalmentDetails!=""){this.canInstalmentShow=!0,this.instalmentRefundAmount=s.data.refundedAmount;var i=1;Object.values(r.InstalmentDetails).forEach(d=>{this.InstalmentInfo.push({amount:u(d.amount/100,a.currency.shortName),totalAmount:d.amount,nextCycle:d.cycleDate,reference:d.reference,status:d.status,refundAmount:d.refundAmount,number:i}),i++}),s.data.refundedAmount!=0&&(this.canInstalmentCancel=!1,this.canInstalmentAllCancel=!1),this.InstalmentInfo!=null&&this.InstalmentInfo!=null&&this.InstalmentInfo.forEach(d=>{(d.reference==""||d.reference==null)&&(this.canInstalmentRemainCancel=!0)}),r.cancelType!=null&&r.cancelType!=""&&(this.canInstalmentRemainCancel=!1),this.canInstalmentRemainCancel==!1&&s.data.refundedAmount==0?(this.canInstalmentCancel=!1,this.canInstalmentAllCancel=!0):this.canInstalmentCancel==!0&&(this.canInstalmentRemainCancel=!1)}}}).catch(s=>{this.createNotificationError({message:`${s.title}: ${s.message}`})})}).finally(()=>{this.setNovalnetPayment(!1)})},immediate:!0}},methods:{setNovalnetPayment(e){e&&(this.isNovalnetPayment=e)},showConfirmModal(){this.status=100,this.confirmModalVisible=!0},showRefundModal(){this.refundModalVisible=!0},closeModals(){this.refundModalVisible=!1,this.confirmModalVisible=!1,this.cancelModalVisible=!1,this.zeroAmountVisible=!1,this.instalmentRefundModalVisible=!1},showInstalmentAllCancelModal(){this.instalmentRefundModalVisible=!0,this.cancelType="CANCEL_ALL_CYCLES"},showInstalmentRemainCancelModal(){this.instalmentRefundModalVisible=!0,this.cancelType="CANCEL_REMAINING_CYCLES"},showCancelModal(){this.status=103,this.cancelModalVisible=!0},showZeroAmountBlock(){this.zeroAmountVisible=!0},reloadPaymentDetails(){this.closeModals(),this.$nextTick().then(()=>{this.$emit("reload-payment")})},instalmentRefund(e){this.refundableAmount=e.totalAmount-e.refundAmount,this.item=e,this.refundModalVisible=!0},showInstalmentCancelModal(){this.InstalmentInfo!=null&&this.InstalmentInfo!=null&&this.InstalmentInfo.forEach(e=>{(e.reference==""||e.reference==null)&&(this.canInstalmentRemainCancel=!0)}),this.instalmentRefundAmount==0&&(this.canInstalmentAllCancel=!0),this.canInstalmentCancel=!1},disableInstalmentRefund(e){return e.reference==null||e.reference==""||e.refundAmount>=e.totalAmount||!this.acl.can("novalnet_extension.editor")}}});const D=`{% block novalnet_payment_order_refund_modal %} <sw-modal :title="$tc('novalnet-payment.settingForm.extension.refundButton')" @modal-close="closeModal"> {% block novalnet_payment_order_refund_modal_content %} <template #default> {% block novalnet_payment_order_refund_modal_content_info_text %} <sw-container columns="1fr" gap="0px 30px"> <sw-number-field v-model:value="refundAmount" :max="item.amount" :min="0" :allowEmpty="false" numberType="int" :label="$tc('novalnet-payment.settingForm.extension.amountTitle')" :helpText="$tc('novalnet-payment.settingForm.extension.refundDescription')" > </sw-number-field> <sw-text-field v-model:value="reason" :placeholder="$tc('novalnet-payment.settingForm.extension.refundReference')" :label="$tc('novalnet-payment.settingForm.extension.refundReference')"> </sw-text-field> </sw-container> {% endblock %} </template> {% endblock %} {% block novalnet_payment_order_refund_modal_actions %} <template #modal-footer> {% block novalnet_payment_order_refund_modal_confirm %} <sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetRefund"> {{ $tc('novalnet-payment.settingForm.extension.refundButton') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:O,Mixin:b}=Shopware;O.register("novalnet-payment-refund-modal",{template:D,props:{refundableAmount:{type:Number,required:!0},order:{type:Object,required:!0},item:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[b.getByName("notification"),b.getByName("sw-inline-snippet")],data(){return{reason:"",disable:!1,refundAmount:this.refundableAmount}},methods:{closeModal(){this.$emit("modal-close")},novalnetRefund(){const e=this.reason,n=this.order.orderNumber;if(this.refundAmount=="0"){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.amountRefundError")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.refundPayment(n,this.refundAmount,e,this.item.reference).then(t=>{t.result!=null&&t.result!=null?t.result.status!=null&&t.result.status!=null&&t.result.status=="SUCCESS"?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.refundSuccess")}):t.result.status_text!=null&&t.result.status_text!=null&&t.result.status_text!=""?this.createNotificationError({message:t.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(t=>{this.createNotificationError({message:`${t.title}: ${t.message}`,autoClose:!1}),this.$emit("modal-close")})}}});const K=`{% block novalnet_payment_order_manage_modal %} <sw-modal :title="$tc('novalnet-payment.settingForm.extension.Managetitle')" @modal-close="closeModal"> {% block novalnet_payment_order_manage_modal_content %} <template #default> {% block novalnet_payment_order_manage_modal_content_info_text %} <sw-container columns="1fr" gap="0px 30px"> <div v-if="status == 100"> {{ $tc('novalnet-payment.settingForm.extension.confirmMessage') }} </div> <div v-if="status == 103"> {{ $tc('novalnet-payment.settingForm.extension.cancelMessage') }} </div> </sw-container> {% endblock %} </template> {% endblock %} {% block novalnet_payment_order_manage_modal_actions %} <template #modal-footer> {% block novalnet_payment_order_manage_modal_confirm %} <sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetOnhold"> {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:j,Mixin:C}=Shopware;j.register("novalnet-payment-manage-transaction-modal",{template:K,props:{status:{type:Number,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[C.getByName("notification"),C.getByName("sw-inline-snippet")],data(){return{confirm:!0,cancel:!1,disable:!1}},methods:{closeModal(){this.$emit("modal-close")},novalnetOnhold(){let e=this.status;const n=this.order.orderNumber;if(e==""||e==null){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.extension.onholdLabel")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.managePayment(n,e).then(t=>{t!=""?t.result.status=="SUCCESS"?e==100?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.onholdSuccess")}):this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.onholdCancel")}):t.result.status_text!=null&&t.result.status_text!=null&&t.result.status_text!=""?this.createNotificationError({message:t.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(t=>{this.createNotificationError({message:`${t.title}: ${t.message}`,autoClose:!1}),this.$emit("modal-close")})}}});const q=`{% block novalnet_payment_order_refund_modal %} <sw-modal :title="$tc('novalnet-payment.settingForm.extension.zeroAmountButton')" @modal-close="closeModal"> {% block novalnet_payment_order_zero_amount_modal_content %} <template #default> {% block novalnet_payment_order_zero_amount_modal_content_info_text %} <sw-container columns="1fr" gap="0px 30px"> <sw-number-field v-model:value="bookAmount" :min="0" :allowEmpty="false" numberType="int" :label="$tc('novalnet-payment.settingForm.extension.zeroAmountTitle')" :helpText="$tc('novalnet-payment.settingForm.extension.zeroAmountDescription')" > </sw-number-field> </sw-container> {% endblock %} </template> {% endblock %} {% block novalnet_payment_order_zero_amount_modal_actions %} <template #modal-footer> {% block novalnet_payment_order_zero_amount_modal_confirm %} <sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetBookAmount"> {{ $tc('novalnet-payment.settingForm.extension.bookButton') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:U,Mixin:w}=Shopware;U.register("novalnet-payment-book-amount-modal",{template:q,props:{orderAmount:{type:Number,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[w.getByName("notification"),w.getByName("sw-inline-snippet")],data(){return{reason:"",disable:!1,bookAmount:this.orderAmount}},methods:{closeModal(){this.$emit("modal-close")},novalnetBookAmount(){const e=this.order.orderNumber;if(this.bookAmount==0){this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.amountError")});return}this.disable=!0,this.NovalPaymentApiCredentialsService.BookOrderAmount(e,this.bookAmount).then(n=>{n.result!=null&&n.result!=null?n.result.status!=null&&n.result.status!=null&&n.result.status=="SUCCESS"?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.bookedSuccess")}):n.result.status_text!=null&&n.result.status_text!=null&&n.result.status_text!=""?this.createNotificationError({message:n.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(n=>{this.createNotificationError({message:`${n.title}: ${n.message}`,autoClose:!1}),this.$emit("modal-close")})}}});const z=`{% block novalnet_payment_order_cancel_modal %} <sw-modal :title="$tc('novalnet-payment.settingForm.extension.instalmentCancelLabel')" @modal-close="closeModal"> {% block novalnet_payment_order_cancel_modal_content %} <template #default> {% block novalnet_payment_order_cancel_modal_content_info_text %} <sw-container columns="1fr" gap="0px 30px"> <div v-if="cancelType == 'CANCEL_ALL_CYCLES' "> {{ $tc('novalnet-payment.settingForm.extension.cancelAllCycleMessage') }} </div> <div v-if="cancelType == 'CANCEL_REMAINING_CYCLES' "> {{ $tc('novalnet-payment.settingForm.extension.cancelRemainingCycleMessage') }} </div> </sw-container> {% endblock %} </template> {% endblock %} {% block novalnet_payment_order_cancel_modal_actions %} <template #modal-footer> {% block novalnet_payment_order_cancel_modal_confirm %} <sw-button secondary slim variant="primary" :disabled="disable" :square="false" :block="false" :isLoading="false" @click="novalnetInstalmentCancel"> {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }} </sw-button> {% endblock %} </template> {% endblock %} </sw-modal> {% endblock %}`,{Component:H,Mixin:k}=Shopware;H.register("novalnet-payment-instalment-cancel-modal",{template:z,props:{cancelType:{type:String,required:!0},order:{type:Object,required:!0}},inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[k.getByName("notification"),k.getByName("sw-inline-snippet")],data(){return{disable:!1}},methods:{closeModal(){this.$emit("modal-close")},novalnetInstalmentCancel(){const e=this.order.orderNumber,n=this.cancelType;this.disable=!0,this.NovalPaymentApiCredentialsService.instalmentCancel(e,n).then(t=>{t.result!=""?t.result.status!=null&&t.result.status!=null&&t.result.status=="SUCCESS"?this.createNotificationSuccess({message:this.$tc("novalnet-payment.settingForm.extension.instalmentSuccessMsg")}):t.result.status_text!=null&&t.result.status_text!=null&&t.result.status_text!=""?this.createNotificationError({message:t.result.status_text}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}):this.createNotificationError({message:this.$tc("novalnet-payment.settingForm.failureMessage")}),this.$emit("modal-close"),setTimeout(this.$router.go,3e3)}).catch(t=>{this.createNotificationError({message:`${t.title}: ${t.message}`,autoClose:!1}),this.$emit("modal-close")})}}});const W=`{% block sw_order_create_details_payment %} {% parent %} {% block sw_order_create_details_payment_novalnet_seaction %} <template v-if="novalnetPayment" > <sw-card rows="2" :isLoading="isLoading" :title="$tc('novalnet-payment.module.title')" > <div > <iframe v-if="loaded" id ="adminnovalnetPaymentiframe" width="100%" title="Novalnet Payment Form" style="border: 0px;" :src="iframe.src"> </iframe> </div> </sw-card> </template> {% endblock %} {% endblock %}`,{Component:Y,Store:p,Mixin:Z,Context:G}=Shopware,N=Shopware.Data.Criteria;Y.override("sw-order-create-details",{template:W,inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:[Z.getByName("notification")],data(){return{isLoading:!1,loaded:!1,shouldDisable:!0,iframe:{src:""},paymentformurl:"",novalnetPayment:!1}},computed:{customer(){return p.get("swOrder").customer},cart(){return p.get("swOrder").cart},currency(){return p.get("swOrder").context.currency},cartPrice(){return this.cart.price},salesChannelContext(){return p.get("swOrder").context},salesChannelId(){var e;return((e=this.salesChannelContext)==null?void 0:e.salesChannel.id)||""}},watch:{salesChannelContext:{deep:!0,handler(){if(!this.customer||!this.isCartTokenAvailable)return;this.isLoading=!0;const e=this.repositoryFactory.create("payment_method"),n=new N(1,1);n.addFilter(N.equals("id",this.salesChannelContext.paymentMethod.id)),e.search(n,G.api).then(t=>{const a=t.first();if(a&&(this.novalnetPayment=!1,a.customFields!=null&&a.customFields.novalnet_payment_method_name=="novalnetpay")){if(this.currency==null){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.currencyFailureMessage")});return}if(this.cartPrice!=null&&(this.cartPrice.totalPrice==0||this.cartPrice.totalPrice==null)){this.createNotificationError({title:this.$tc("novalnet-payment.settingForm.titleError"),message:this.$tc("novalnet-payment.settingForm.lineitemFailureMessage")});return}this.novalnetPayment=!0;let o="",l="";this.salesChannelContext.customer.defaultBillingAddress!==null?o=this.salesChannelContext.customer.defaultBillingAddress:this.context.billingAddressId!=null&&this.customer.addresses.forEach(i=>{i.id==this.context.billingAddressId&&(o=i)}),this.salesChannelContext.customer.defaultShippingAddress!==null?l=this.salesChannelContext.customer.defaultShippingAddress:this.context.shippingAddressId!=null&&this.customer.addresses.forEach(i=>{i.id==this.context.shippingAddressId&&(o=i)});let m=this.NovalPaymentApiCredentialsService,s=this.customer;this.NovalPaymentApiCredentialsService.novalnetPayment(l,o,this.cartPrice.totalPrice,this.currency.isoCode,this.customer).then(i=>{if(i!=""&&i!=null&&i.result.status=="SUCCESS"&&i.result.redirect_url!=""&&i.result.redirect_url!=null){this.iframe.src=i.result.redirect_url,this.loaded=!0;const r=document.createElement("script");r.setAttribute("src","https://cdn.novalnet.de/js/pv13/checkout.js?"+new Date().getTime()),r.type="text/javascript",document.head.appendChild(r),this.paymentformurl=r,this.paymentformurl.addEventListener("load",()=>{document.querySelector(".sw-button-process").disabled=!1,this.onWindowLoad(m,s)})}}).catch(i=>{this.createNotificationError({message:`${i.title}: ${i.message}`})})}})}},customer:{deep:!0,handler(){this.customer!=null},immediate:!0}},methods:{onWindowLoad(e,n){const t=new NovalnetPaymentForm,a=document.querySelector(".sw-button-process");let o={iframe:"#adminnovalnetPaymentiframe",initForm:{uncheckPayments:!1,showButton:!1}};t.initiate(o),t.validationResponse(()=>{t.initiate(o)}),a.addEventListener("click",l=>{l.preventDefault(),l.stopImmediatePropagation(),t.getPayment(function(m){let s=JSON.stringify(m);e.paymentValue(s,n).then(()=>{})})})}}});const{Component:J,Store:h,Mixin:Q,Context:X}=Shopware,$=Shopware.Data.Criteria;J.override("sw-order-create-general",{inject:["NovalPaymentApiCredentialsService","repositoryFactory","acl"],mixins:[Q.getByName("notification")],data(){return{isLoading:!1}},computed:{customer(){return h.get("swOrder").customer},cart(){return h.get("swOrder").cart},currency(){return h.get("swOrder").context.currency},cartPrice(){return this.cart.price},salesChannelContext(){return h.get("swOrder").context}},watch:{salesChannelContext:{deep:!0,handler(){if(!this.customer)return;this.isLoading=!0;const e=this.repositoryFactory.create("payment_method"),n=new $(1,1);n.addFilter($.equals("id",this.salesChannelContext.paymentMethod.id)),e.search(n,X.api).then(t=>{const a=t.first();a&&(this.novalnetPayment=!1,a.customFields!=null&&a.customFields.novalnet_payment_method_name=="novalnetpay"&&this.onWindowLoad())})}},customer:{deep:!0,handler(){this.customer!=null},immediate:!0}},methods:{onWindowLoad(){document.querySelector(".sw-button-process").disabled=!0}}});const ee=`{% block sw_order_detail_base_secondary_info_payment %} <template v-if="currentOrder.transactions.length > 0"> <dl> <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt> <dd> {{ paymentMethod }} </dd> </dl> </template> {% endblock %}`,{Component:te,Mixin:ne}=Shopware;te.override("sw-order-user-card",{template:ee,inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[ne.getByName("notification")],props:{currentOrder:{type:Object,required:!0},isLoading:{type:Boolean,required:!0}},data(){return{paymentMethod:""}},watch:{currentOrder:{deep:!0,handler(){this.currentOrder!=""&&(this.currentOrder.transactions.last().paymentMethod.customFields!=null&&this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name!=null&&this.currentOrder.transactions.last().paymentMethod.customFields.novalnet_payment_method_name=="novalnetpay"?this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.currentOrder.orderNumber).then(e=>{e!=null&&e!=null?e.paymentName!=null&&e.paymentName!=null?this.paymentMethod=e.paymentName:this.paymentMethod=this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName:this.paymentMethod=this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName)},immediate:!0}}});const ae=`{% block sw_order_detail_base_general_info_summary_sub_description %} <div class="sw-order-general-info__summary-sub-description"> {{ $tc('sw-order.generalTab.info.summary.on') }} {{ dateFilter(order.orderDateTime, { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' }) }} {{ $tc('sw-order.generalTab.info.summary.with') }} {{ paymentMethod }} <template v-if="order.deliveries.last()"> {{ $tc('sw-order.generalTab.info.summary.and') }} {{ order.deliveries.last().shippingMethod.translated.name }} </template> </div> {% endblock %}`,{Component:se,Mixin:oe}=Shopware;se.override("sw-order-general-info",{template:ae,inject:["NovalPaymentApiCredentialsService","repositoryFactory"],mixins:[oe.getByName("notification")],props:{order:{type:Object,required:!0}},data(){return{paymentMethod:""}},watch:{order:{deep:!0,handler(){this.order!=""&&(this.order.transactions.last().paymentMethod.customFields!=null&&this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name!=null&&this.order.transactions.last().paymentMethod.customFields.novalnet_payment_method_name=="novalnetpay"?this.order.transactions.last().customFields!=null&&this.order.transactions.last().customFields.novalnet_payment_name!=null&&this.order.transactions.last().customFields.novalnet_payment_name!=""?this.paymentMethod=this.order.transactions.last().customFields.novalnet_payment_name:this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(this.order.orderNumber).then(e=>{e!=null&&e!=null?e.paymentName!=null&&e.paymentName!=null?this.paymentMethod=e.paymentName:this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName:this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName}).catch(e=>{this.createNotificationError({message:`${e.title}: ${e.message}`})}):this.paymentMethod=this.order.transactions.last().paymentMethod.translated.distinguishableName)},immediate:!0}}});const{Module:ie}=Shopware;ie.register("novalnet-payment",{type:"plugin",name:"NovalnetPayment",title:"novalnet-payment.module.title",description:"novalnet-payment.module.description",routes:{index:{component:"novalnet-payment-settings",path:"index",meta:{parentPath:"sw.settings.index",privilege:"novalnet_payment.viewer"}},detail:{component:"novalnet-payment-settings",path:"settings",redirect:{name:"novalnet.payment.credentials"},children:{credentials:{component:"novalnet-payment-credentials",path:"credentials",meta:{parentPath:"sw.settings.index",privilege:"novalnet_payment.viewer"}}}}},settingsItem:{group:"plugins",to:"novalnet.payment.detail.credentials",iconComponent:"novalnet-payment-settings-icon",backgroundEnabled:!0,privilege:"novalnet_payment.viewer"}});const c=Shopware.Classes.ApiService;class le extends c{constructor(n,t,a="novalnet-payment"){super(n,t,a)}validateApiCredentials(n,t){return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-api-credentials`,{clientId:n,accessKey:t},{headers:this.getBasicHeaders()}).then(a=>c.handleResponse(a))}getNovalnetAmount(n){return this.httpClient.post(`_action/${this.getApiBasePath()}/transaction-amount`,{orderNumber:n},{headers:this.getBasicHeaders()}).then(t=>c.handleResponse(t))}refundPayment(n,t,a,o){return this.httpClient.post(`_action/${this.getApiBasePath()}/refund-amount`,{orderNumber:n,refundAmount:t,reason:a,instalmentCycleTid:o},{headers:this.getBasicHeaders()}).then(l=>c.handleResponse(l))}managePayment(n,t){return this.httpClient.post(`_action/${this.getApiBasePath()}/manage-payment`,{orderNumber:n,status:t},{headers:this.getBasicHeaders()}).then(a=>c.handleResponse(a))}instalmentCancel(n,t){return this.httpClient.post(`_action/${this.getApiBasePath()}/instalment-cancel`,{orderNumber:n,cancelType:t},{headers:this.getBasicHeaders()}).then(a=>c.handleResponse(a))}BookOrderAmount(n,t){const a=`_action/${this.getApiBasePath()}/book-amount`;return this.httpClient.post(a,{orderNumber:n,bookAmount:t},{headers:this.getBasicHeaders()}).then(o=>c.handleResponse(o))}getNovalnetPaymentMethod(n){const t=`_action/${this.getApiBasePath()}/novalnet-paymentmethod`;return this.httpClient.post(t,{orderNumber:n},{headers:this.getBasicHeaders()}).then(a=>c.handleResponse(a))}configureWebhookUrl(n,t,a){const o=`_action/${this.getApiBasePath()}/webhook-url-configure`;return this.httpClient.post(o,{url:n,productActivationKey:t,paymentAccessKey:a},{headers:this.getBasicHeaders()}).then(l=>c.handleResponse(l))}novalnetPayment(n,t,a,o,l){const m=`_action/${this.getApiBasePath()}/load-payment-form`;return this.httpClient.post(m,{shippingaddress:n,billingaddress:t,amount:a,currency:o,customer:l},{headers:this.getBasicHeaders()}).then(s=>c.handleResponse(s))}paymentValue(n,t){const a=`_action/${this.getApiBasePath()}/payment-value-data`;return this.httpClient.post(a,{value:n,customer:t},{headers:this.getBasicHeaders()}).then(o=>c.handleResponse(o))}getCustomerPaymentMethod(n){const t=`_action/${this.getApiBasePath()}/customer-payment-data`;return this.httpClient.post(t,{customerNo:n},{headers:this.getBasicHeaders()}).then(a=>c.handleResponse(a))}}const{Application:x}=Shopware;x.addServiceProvider("NovalPaymentApiCredentialsService",e=>{const n=x.getContainer("init");return new le(n.httpClient,e.loginService)});Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"orders",key:"novalnet_extension",roles:{viewer:{privileges:["novalnet_transaction_details:read"],dependencies:[]},editor:{privileges:["novalnet_transaction_details:update","order_transaction:read","order_transaction:update"],dependencies:["novalnet_extension.viewer","order.editor"]},creator:{privileges:["novalnet_transaction_details:create"],dependencies:["novalnet_extension.viewer","novalnet_extension.editor"]},deleter:{privileges:["novalnet_transaction_details:delete"],dependencies:["novalnet_extension.viewer"]}}});Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"novalnet_payment",key:"novalnet_payment",roles:{viewer:{privileges:["system_config:read","sales_channel:read"],dependencies:[]},editor:{privileges:["system_config:update","system_config:create","system_config:delete","sales_channel:update"],dependencies:["novalnet_payment.viewer"]}}});
//# sourceMappingURL=novalnet-payment-CZiVICOz.js.map
