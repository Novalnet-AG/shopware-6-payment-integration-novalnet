{"version":3,"file":"novalnet-payment-CxLmX22j.js","sources":["../../../app/administration/src/module/novalnet-payment/page/novalnet-payment-settings/novalnet-payment-settings.html.twig","../../../app/administration/src/module/novalnet-payment/page/novalnet-payment-settings/index.js","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-credentials/novalnet-payment-credentials.html.twig","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-credentials/index.js","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-settings-icon/novalnet-payment-settings-icon.html.twig","../../../app/administration/src/module/novalnet-payment/components/novalnet-payment-settings-icon/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-customer/component/sw-customer-base-info/sw-customer-base-info.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-customer/component/sw-customer-base-info/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-detail-details/sw-order-detail-details.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-detail-details/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-refund-modal/novalnet-payment-refund-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-refund-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-manage-transaction-modal/novalnet-payment-manage-transaction-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-manage-transaction-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-book-amount-modal/novalnet-payment-book-amount-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-book-amount-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-instalment-cancel-modal/novalnet-payment-instalment-cancel-modal.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/novalnet-payment-instalment-cancel-modal/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-details/sw-order-create-details.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-details/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/view/sw-order-create-general/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-user-card/sw-order-user-card.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-user-card/index.js","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-general-info/sw-order-general-info.html.twig","../../../app/administration/src/module/novalnet-payment/extension/sw-order/component/sw-order-general-info/index.js","../../../app/administration/src/module/novalnet-payment/index.js","../../../app/administration/src/core/service/api/novalnet-payment-api-credentials.service.js","../../../app/administration/src/init/api-service.init.js","../../../app/administration/src/acl/index.js"],"sourcesContent":["{% block novalnet_payment_settings %}\n    <sw-page class=\"novalnet-payment\">\n        {% block novalnet_payment_settings_header %}\n        <template #smart-bar-header>\n            <h2>\n                {{ $tc('sw-settings.index.title') }}\n                <mt-icon\n                    name=\"regular-chevron-right-xs\"\n                    size=\"16px\"\n                ></mt-icon>\n                {{ $tc('novalnet-payment.settingForm.title') }}\n            </h2>\n        </template>\n        {% endblock %}\n\n\t{% block novalnet_payment_settings_actions %}\n        <template #smart-bar-actions>\n            {% block novalnet_payment_actions_save %}\n            <sw-button-process\n                v-model:value=\"isSaveSuccessful\"\n                class=\"sw-settings-login-registration__save-action\"\n                variant=\"primary\"\n                :isLoading=\"isLoading\"\n                :disabled=\"isLoading || !acl.can('novalnet_payment.editor')\"\n                @click=\"onSave\">\n                {{ $tc('novalnet-payment.settingForm.buttons.save') }}\n            </sw-button-process>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    \n        {% block novalnet_payment_content %}\n        <template #content>\n            {% block novalnet_payment_content_card_view %}\n            <sw-card-view>\n                {% block novalnet_payment_content_sales_channel_config %}\n                <sw-sales-channel-config\n                    v-model:value=\"config\"\n                    ref=\"configComponent\"\n                    domain=\"NovalnetPayment.settings\"\n                >\n                    {% block novalnet_payment_content_sales_channelconfig_card %}\n                    <template\n                        #select=\"{ onInput, selectedSalesChannelId, salesChannel}\"\n                    >\n                        {% block novalnet_payment_content_sales_channelconfig_card_sales_channel %}\n                        <sw-container class=\"novalnet-sales-channel\">\n                            <sw-single-select\n                                v-model:value=\"selectedSalesChannelId\"\n                                labelProperty=\"translated.name\"\n                                valueProperty=\"id\"\n                                :disabled=\"!acl.can('novalnet_payment.editor')\"\n                                :options=\"salesChannel\"\n                                show-clearable-button\n                                @update:value=\"onInput\">\n                            </sw-single-select>\n                        </sw-container>\n                        {% endblock %}\n                    </template>\n                    {% endblock %}\n\t\t\t\t\t\t\t\t\n\t\t {% block novalnet_payment_config_content_channel_config_cards %}\n                    <template\n                        #content=\"{ actualConfigData, allConfigs, selectedSalesChannelId }\"\n                    >\n                        {% block novalnet_payment_config_content_tabs %}\n                        <sw-tabs>\n                            {% block novalnet_payment_content_card_channel_config_credentials_card %}\n                            <sw-tabs-item\n                                class=\"novalnet-payment-configuration-global-config\"\n                                :route=\"{ name: 'novalnet.payment.detail.credentials', params: { id: $route.params.id }}\"\n                                :title=\"$tc('novalnet-payment.module.globalTitle')\"\n                            >\n                                {{ $tc('novalnet-payment.module.globalTitle') }}\n                            </sw-tabs-item>\n                            {% endblock %}\n                        </sw-tabs>\n                        {% endblock %}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t{% block novalnet_payment_configuration_content_router_view %}\n                        <router-view v-slot=\"{ Component }\">\n                            <component\n                                :is=\"Component\"\n                                :actualConfigData=\"actualConfigData\"\n                                :allConfigs=\"allConfigs\"\n                                :selectedSalesChannelId=\"selectedSalesChannelId\"\n                            />\n                        </router-view>\n                        {% endblock %}\n                    </template>\n                    {% endblock %}\n                </sw-sales-channel-config>\n                {% endblock %}\n\n\t\t{% block novalnet_payment_content_card_loading %}\n                <mt-loader v-if=\"isLoading\"></mt-loader>\n                {% endblock %}\n            </sw-card-view>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n","import template from './novalnet-payment-settings.html.twig';\nimport './novalnet-payment-settings.scss';\n\nconst { Component, Mixin, Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('novalnet-payment-settings', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    inject: ['acl', 'NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    data() {\n        return {\n            isLoading: false,\n            config: {},\n            salesChannels: [],\n            isSaveSuccessful: false,\n            clientIdFilled: false,\n            clientSecretFilled: false\n        };\n    },\n\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    watch: {\n        config: {\n            handler(configData) {\n                if (!configData) {\n                    return;\n                }\n                const defaultConfig =\n                    this.$refs.configComponent.allConfigs.null;\n                const salesChannelId =\n                    this.$refs.configComponent.selectedSalesChannelId;\n\n                if (salesChannelId !== null) {\n                    if (!this.config['NovalnetPayment.settings.clientId']) {\n                        this.config['NovalnetPayment.settings.clientId'] =\n                            defaultConfig['NovalnetPayment.settings.clientId'];\n                    }\n\n                    if (!this.config['NovalnetPayment.settings.accessKey']) {\n                        this.config['NovalnetPayment.settings.accessKey'] =\n                            defaultConfig['NovalnetPayment.settings.accessKey'];\n                    }\n                }\n\n                this.$emit('salesChannelChanged');\n                this.$emit('update:value', configData);\n            },\n            deep: true,\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n            const criteria = new Criteria();\n            criteria.addFilter(\n                Criteria.equalsAny('typeId', [\n                    Defaults.storefrontSalesChannelTypeId,\n                    Defaults.apiSalesChannelTypeId\n                ])\n            );\n            this.salesChannelRepository\n                .search(criteria, Shopware.Context.api)\n                .then((res) => {\n                    res.add({\n                        id: null,\n                        translated: {\n                            name: this.$tc(\n                                'sw-sales-channel-switch.labelDefaultOption'\n                            ),\n                        },\n                    });\n                    this.salesChannels = res;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n        onSave() {\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            var clientId = this.getConfigValue('clientId');\n            var accessKey = this.getConfigValue('accessKey');\n\n            if (\n                this.getConfigValue('clientId') !== '' &&\n                typeof this.getConfigValue('clientId') !== 'undefined'\n            ) {\n                clientId = this.getConfigValue('clientId').replace(/\\s/g, '');\n            }\n\n            if (\n                this.getConfigValue('accessKey') !== '' &&\n                typeof this.getConfigValue('accessKey') !== 'undefined'\n            ) {\n                accessKey = this.getConfigValue('accessKey').replace(/\\s/g, '');\n            }\n\n            if (typeof clientId === 'undefined' || clientId == '') {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: this.$tc('novalnet-payment.settingForm.titleError'),\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.emptyMessage'\n                    ),\n                });\n\n                return;\n            } else if (typeof accessKey === 'undefined' || accessKey == '') {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: this.$tc('novalnet-payment.settingForm.titleError'),\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.emptyAccessKeyMessage'\n                    ),\n                });\n\n                return;\n            }\n\n            this.checkBackendConfiguration();\n        },\n\n        getConfigValue(field) {\n            const defaultConfig = this.$refs.configComponent.allConfigs.null;\n            const salesChannelId =\n                this.$refs.configComponent.selectedSalesChannelId;\n\n            if (salesChannelId === null) {\n                return this.config[`NovalnetPayment.settings.${field}`];\n            }\n\n            return (\n                this.config[`NovalnetPayment.settings.${field}`] ||\n                defaultConfig[`NovalnetPayment.settings.${field}`]\n            );\n        },\n\n        checkBackendConfiguration() {\n            const clientId = this.getConfigValue('clientId').replace(/\\s/g, '');\n            const accessKey = this.getConfigValue('accessKey').replace(\n                /\\s/g,\n                ''\n            );\n\n            this.NovalPaymentApiCredentialsService.validateApiCredentials(\n                clientId,\n                accessKey\n            )\n                .then((response) => {\n                    if (\n                        response.serverResponse == undefined ||\n                        response.serverResponse == ''\n                    ) {\n                        this.createNotificationError({\n                            title: this.$tc(\n                                'novalnet-payment.settingForm.titleError'\n                            ),\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.apiFailureMessage'\n                            ),\n                        });\n\n                        return;\n                    }\n\n                    const status = response.serverResponse.result.status_code;\n                    if (status != 100) {\n                        this.createNotificationError({\n                            title: this.$tc(\n                                'novalnet-payment.settingForm.titleError'\n                            ),\n                            message: response.serverResponse.result.status_text,\n                        });\n\n                        return;\n                    } else {\n                        response.tariffResponse.forEach((tariff) => {\n                            if (\n                                this.config[\n                                    'NovalnetPayment.settings.tariff'\n                                ] == undefined ||\n                                this.config[\n                                    'NovalnetPayment.settings.tariff'\n                                ] == ''\n                            ) {\n                                this.config['NovalnetPayment.settings.tariff'] =\n                                    tariff.id;\n                            }\n                        });\n\n                        this.config['NovalnetPayment.settings.clientKey'] =\n                            response.serverResponse.merchant.client_key;\n                        this.$refs.configComponent\n                            .save()\n                            .then((res) => {\n                                this.isSaveSuccessful = true;\n\n                                if (res) {\n                                    this.config = res;\n                                }\n                                this.isLoading = false;\n                            })\n                            .catch(() => {\n                                this.isLoading = false;\n                            });\n\n                        this.createNotificationSuccess({\n                            title: this.$tc(\n                                'novalnet-payment.settingForm.titleSuccess'\n                            ),\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.successMessage'\n                            ),\n                        });\n\n                        return;\n                    }\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        title: this.$tc(\n                            'novalnet-payment.settingForm.titleError'\n                        ),\n                        message: this.$tc(\n                            'novalnet-payment.settingForm.errorMessage'\n                        ),\n                    });\n                    this.isLoading = false;\n                    this.isTestSuccessful = false;\n                });\n        }\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    }\n});\n","{% block novalnet_payment_content_card_channel_config_credentials %}\n\t<mt-card class=\"sw-card--grid\" \n\t\t\t :title=\"$tc('novalnet-payment.settingForm.credentials.cardTitle')\">\n\t\t\t \n        {% block novalnet_payment_content_card_channel_config_credentials_card_container %}\n            <sw-container>\n                {% block novalnet_payment_content_card_channel_config_credentials_card_container_settings %}\n                    <div v-if=\"actualConfigData\" class=\"novalnet_payment-settings-credentials\">\n\t\t\t\t\t\t<mt-banner v-if=\"projectMode\" variant=\"info\" appearance=\"default\" :showIcon=\"true\" :closable=\"false\">\n\t\t\t\t\t\t\t{{ $tc('novalnet-payment.module.projectInfo') }}\n\t\t\t\t\t\t</mt-banner>\n\n\t\t\t\t\t\t<div v-html = \"$tc('novalnet-payment.module.generalInfo')\" class=\"novalnet_payment-settings-project\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div v-html = \"$tc('novalnet-payment.module.PaymentConfiguration')\" class=\"novalnet_payment-settings-project\">\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_break %}\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_id %}\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.clientId']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientId']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.clientId\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"apiActivationKey == null ? props.currentValue : apiActivationKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.activationKey.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.activationKey.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"onCheckApi\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.accessKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.accessKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.accessKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"paymentAccessKey == null ? props.currentValue : paymentAccessKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t    autocomplete=\"off\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.accessKey.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.accessKey.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"onCheckApi\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_credentials_card_container_settings_client_secret %}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.clientKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.clientKey']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.clientKey\"\n\t\t\t\t\t\t\t\t\t\t\t\t   v-show=\"shouldDisable\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.tariff']\"\n\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.tariff']\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.tariff\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"tariffOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.tariff.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.tariff.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :disabled=\"!acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.emailMode']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t    :customInheritationCheckFunction=\"checkBoolFieldInheritance\">\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-switch-field name=\"NovalnetPayment.settings.emailMode\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.credentials.orderEmailMode.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.credentials.orderEmailMode.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-switch-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.onHoldStatus']\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.onHoldStatus']\">\n\t\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.onHoldStatus\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"onHoldOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.onHold.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.onHold.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :placeholder=\"$tc('novalnet-payment.onhold.select')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue != null ? props.currentValue : onhold\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.completeStatus']\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.completeStatus']\">\n\t\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t\t<sw-single-select name=\"NovalnetPayment.settings.completeStatus\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :options=\"completeOptions\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :label=\"$tc('novalnet-payment.settingForm.credentials.complete.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :placeholder=\"$tc('novalnet-payment.onhold.select')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :helpText=\"$tc('novalnet-payment.settingForm.credentials.complete.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  :value=\"props.currentValue != null ? props.currentValue : completed\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t</sw-single-select>\n\t\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t</div>\n\t\t\t\t{% endblock %}\n\t\t\t</sw-container>\n\t\t{% endblock %}\n\n\t\t{% block novalnet_payment_content_card_channel_loading %}\n            <sw-loader v-if=\"isLoading\"></sw-loader>\n        {% endblock %}\n\t</mt-card>\n{% endblock %}\n\n{% block novalnet_payment_content_card_channel_config_merchant_credentials %}\n\t<mt-card class=\"sw-card--grid\"\n\t\t\t :title=\"$tc('novalnet-payment.settingForm.merchantSettings.cardTitle')\">\n\t\t\n\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container %}\n\t\t\t<sw-container>\n\t\t\t\n\t\t\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings %}\n\t\t\t\t\t<div v-if=\"actualConfigData\" class=\"novalnet_payment-settings-merchant-credentials\">\n\n\t\t\t\t\t\t{% block novalnet_payment_content_card_channel_config_merchant_credentials_card_container_settings_ip %}\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.callbackUrl']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.callbackUrl']\"\n                                                >\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.callbackUrl\"\n\t\t\t\t\t\t\t\t\t\t\t\t   class=\"novalnet-payment-callback-field\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-button-process :disabled=\"false || !acl.can('novalnet_payment.editor')\" :isLoading=\"buttonLoad\"  @click=\"configureWebhookUrl()\">\n\t\t\t\t\t\t\t\t\t\t{{ $tc('novalnet-payment.settingForm.merchantSettings.callbackUrl.button') }}\n\t\t\t\t\t\t\t</sw-button-process>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.deactivateIp']\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-switch-field name=\"NovalnetPayment.settings.deactivateIp\"\n\t\t\t\t\t\t\t\t\t                 :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :label=\"$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.deactivateIp.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-switch-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t\t<sw-inherit-wrapper v-model:value=\"actualConfigData['NovalnetPayment.settings.mailTo']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:inheritedValue=\"selectedSalesChannelId == null ? null : allConfigs['null']['NovalnetPayment.settings.mailTo']\"\n\t\t\t\t\t\t\t\t\t\t\t\t:customInheritationCheckFunction=\"checkTextFieldInheritance\" >\n\t\t\t\t\t\t\t\t<template #content=\"props\">\n\t\t\t\t\t\t\t\t\t<sw-text-field name=\"NovalnetPayment.settings.mailTo\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :mapInheritance=\"props\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :isInherited=\"props.isInherited\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :label=\"$tc('novalnet-payment.settingForm.merchantSettings.mailTo.label')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :helpText=\"$tc('novalnet-payment.settingForm.merchantSettings.mailTo.tooltipText')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :disabled=\"props.isInherited || !acl.can('novalnet_payment.editor')\"\n\t\t\t\t\t\t\t\t\t\t\t\t   :value=\"props.currentValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t   @update:value=\"props.updateCurrentValue\">\n\t\t\t\t\t\t\t\t\t</sw-text-field>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</sw-inherit-wrapper>\n\t\t\t\t\t\t{% endblock %}\n\t\t\t\t\t</div>\n\t\t\t\t{% endblock %}\n\t\t\t</sw-container>\n\t\t{% endblock %}\n\t</mt-card>\n{% endblock %}\n","import template from './novalnet-payment-credentials.html.twig';\nimport './novalnet-payment-credentials.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-credentials', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    inject: [\n        'NovalPaymentApiCredentialsService',\n        'repositoryFactory',\n        'acl',\n        'systemConfigApiService',\n    ],\n\n    name: 'NovalnetPaymentCredentials',\n    icon: 'default-action-settings',\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true\n        },\n        allConfigs: {\n            type: Object,\n            required: true\n        },\n        selectedSalesChannelId: {\n            required: true\n        }\n    },\n\n    data() {\n        const url =\n            window.location.protocol +\n            '//' +\n            window.location.host +\n            window.location.pathname;\n        const generatedUrl = url.split('/admin').join('');\n        return {\n            onHoldOptions: [],\n            completeOptions: [],\n            onhold: 'authorized',\n            completed: 'paid',\n            shouldDisable: false,\n            projectMode: false,\n            apiActivationKey: '',\n            paymentAccessKey: '',\n            isLoading: false,\n            isRequested: '',\n            showMessage: false,\n            buttonLoad: false,\n            tariffId: '',\n            tariffOptions: [],\n            NovalnetPaymentCallBackUrl: generatedUrl + '/novalnet/callback',\n        };\n    },\n\n    watch: {\n        actualConfigData: {\n            handler(configData) {\n                if (!configData) {\n                    return;\n                }\n                this.$emit('update:value', configData);\n            },\n            deep: true\n        }\n    },\n\n    computed: {\n        actualConfigData: {\n            get() {\n                return this.allConfigs[this.selectedSalesChannelId];\n            },\n            set(config) {\n                this.allConfigs = {\n                    ...this.allConfigs,\n                    [this.selectedSalesChannelId]: config\n                };\n            }\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    updated() {\n        this.createdComponent();\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        getInheritValue(key) {\n            if (this.selectedSalesChannelId == null) {\n                return this.actualConfigData[key];\n            } else {\n                return this.allConfigs['null'][key];\n            }\n        },\n\n        onCheckApi() {\n            if (event.target.name === 'NovalnetPayment.settings.clientId') {\n                this.apiActivationKey = this.actualConfigData[\n                    'NovalnetPayment.settings.clientId'\n                ] = event.target.value;\n            } else if (\n                event.target.name === 'NovalnetPayment.settings.accessKey'\n            ) {\n                this.paymentAccessKey = this.actualConfigData[\n                    'NovalnetPayment.settings.accessKey'\n                ] = event.target.value;\n            }\n\n            if (this.apiActivationKey === '' && this.paymentAccessKey === '') {\n                this.createNotificationError({\n                    title: this.$tc('novalnet-payment.settingForm.titleError'),\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.apiFailureMessage'\n                    ),\n                });\n                return;\n            }\n            this.isRequested = '';\n            this.showMessage = true;\n            this.createdComponent();\n        },\n\n        createdComponent() {\n            const me = this;\n\n            if (\n                this.actualConfigData !== undefined &&\n                this.isRequested !== this.selectedSalesChannelId\n            ) {\n                this.isRequested = this.selectedSalesChannelId;\n                this.apiActivationKey =\n                    this.actualConfigData[\n                        'NovalnetPayment.settings.clientId'\n                    ] ||\n                    this.allConfigs.null['NovalnetPayment.settings.clientId'];\n                this.paymentAccessKey =\n                    this.actualConfigData[\n                        'NovalnetPayment.settings.accessKey'\n                    ] ||\n                    this.allConfigs.null['NovalnetPayment.settings.accessKey'];\n\n                if (\n                    this.apiActivationKey !== undefined &&\n                    this.apiActivationKey !== '' &&\n                    this.paymentAccessKey !== undefined &&\n                    this.paymentAccessKey !== ''\n                ) {\n                    this.apiActivationKey = this.apiActivationKey.replace(\n                        /\\s/g,\n                        ''\n                    );\n                    this.paymentAccessKey = this.paymentAccessKey.replace(\n                        /\\s/g,\n                        ''\n                    );\n                    this.isLoading = true;\n                    this.NovalPaymentApiCredentialsService.validateApiCredentials(\n                        this.apiActivationKey,\n                        this.paymentAccessKey\n                    )\n                        .then((response) => {\n                            const status =\n                                response.serverResponse.result.status_code;\n                            this.isLoading = false;\n                            if (status !== 100) {\n                                if (this.showMessage === true) {\n                                    this.createNotificationError({\n                                        title: this.$tc(\n                                            'novalnet-payment.settingForm.titleError'\n                                        ),\n                                        message:\n                                            response.serverResponse.result\n                                                .status_text,\n                                        autoClose: true,\n                                    });\n                                }\n                                this.showMessage = false;\n                            } else {\n                                me.tariffOptions = [];\n                                response.tariffResponse.forEach((tariff) => {\n                                    this.actualConfigData[\n                                        'NovalnetPayment.settings.clientKey'\n                                    ] =\n                                        response.serverResponse.merchant.client_key;\n\n                                    me.tariffOptions.push({\n                                        value: tariff.id,\n                                        label: tariff.name,\n                                    });\n\n                                    if (\n                                        this.tariffId === undefined ||\n                                        this.tariffId === ''\n                                    ) {\n                                        this.tariffId = {\n                                            value: tariff.id,\n                                            label: tariff.name,\n                                        };\n                                    }\n\n                                    if (this.showMessage === true) {\n                                        this.createNotificationSuccess({\n                                            title: this.$tc(\n                                                'novalnet-payment.settingForm.titleSuccess'\n                                            ),\n                                            message: this.$tc(\n                                                'novalnet-payment.settingForm.successMessage'\n                                            ),\n                                            autoClose: true,\n                                        });\n                                    }\n\n                                    this.showMessage = false;\n                                    if (\n                                        response.serverResponse.merchant\n                                            .test_mode === 1\n                                    ) {\n                                        this.projectMode = true;\n                                    }\n                                });\n                            }\n                        })\n                        .catch(() => {\n                            this.isLoading = false;\n                        });\n                }\n\n                if (\n                    this.actualConfigData[\n                        'NovalnetPayment.settings.callbackUrl'\n                    ] === undefined ||\n                    null\n                ) {\n                    this.actualConfigData[\n                        'NovalnetPayment.settings.callbackUrl'\n                    ] = this.NovalnetPaymentCallBackUrl;\n                }\n            }\n\n            this.onHoldOptions = [\n                {\n                    value: 'open',\n                    label: this.$tc('novalnet-payment.onhold.open')\n                },\n                {\n                    value: 'process',\n                    label: this.$tc('novalnet-payment.onhold.process')\n                },\n                {\n                    value: 'authorized',\n                    label: this.$tc('novalnet-payment.onhold.authorized')\n                },\n                {\n                    value: 'cancel',\n                    label: this.$tc('novalnet-payment.onhold.cancel')\n                },\n                {\n                    value: 'failed',\n                    label: this.$tc('novalnet-payment.onhold.failed'),\n                },\n            ];\n\n            this.completeOptions = [\n                {\n                    value: 'paid',\n                    label: this.$tc('novalnet-payment.onhold.paid'),\n                },\n                {\n                    value: 'paidPartially',\n                    label: this.$tc('novalnet-payment.onhold.paidPartially'),\n                },\n                {\n                    value: 'cancel',\n                    label: this.$tc('novalnet-payment.onhold.cancel'),\n                },\n                {\n                    value: 'failed',\n                    label: this.$tc('novalnet-payment.onhold.failed'),\n                },\n            ];\n        },\n\n        configureWebhookUrl() {\n            const productActivationKey =\n                this.actualConfigData['NovalnetPayment.settings.clientId'] ||\n                this.allConfigs.null['NovalnetPayment.settings.clientId'];\n            const accessKey =\n                this.actualConfigData['NovalnetPayment.settings.accessKey'] ||\n                this.allConfigs.null['NovalnetPayment.settings.accessKey'];\n            const callbackUrl =\n                this.actualConfigData['NovalnetPayment.settings.callbackUrl'] ||\n                this.allConfigs.null['NovalnetPayment.settings.callbackUrl'];\n\n            if (\n                productActivationKey === undefined ||\n                productActivationKey === '' ||\n                accessKey === undefined ||\n                accessKey === ''\n            ) {\n                this.createNotificationError({\n                    title: this.$tc('novalnet-payment.settingForm.titleError'),\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.apiFailureMessage'\n                    ),\n                });\n\n                return;\n            }\n\n            if (callbackUrl) {\n                if (\n                    /^(http|https):\\/\\/[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)?$/i.test(\n                        callbackUrl\n                    ) === false\n                ) {\n                    this.createNotificationError({\n                        message: this.$tc(\n                            'novalnet-payment.settingForm.webhookUrlFailure'\n                        ),\n                    });\n                    return false;\n                }\n\n                this.buttonLoad = true;\n\n                this.NovalPaymentApiCredentialsService.configureWebhookUrl(\n                    callbackUrl,\n                    productActivationKey,\n                    accessKey\n                )\n                    .then((response) => {\n                        if (\n                            response.result.status !== undefined &&\n                            response.result.status != null &&\n                            response.result.status !== '' &&\n                            response.result.status === 'SUCCESS'\n                        ) {\n                            this.createNotificationSuccess({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.webhookUrlSuccess'\n                                ),\n                            });\n                        } else if (\n                            response.result.status_text !== undefined &&\n                            response.result.status_text != null &&\n                            response.result.status_text !== ''\n                        ) {\n                            this.createNotificationError({\n                                message: response.result.status_text,\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.webhookUrlFailure'\n                                ),\n                            });\n                        }\n                        this.buttonLoad = false;\n                    })\n                    .catch(() => {\n                        this.buttonLoad = false;\n                    });\n            }\n        },\n    },\n});\n","{% block novalnet_payment_settings_icon %}\n    <img\n        class=\"sw-settings-index__novalnet-payment-icon\"\n        :src=\"assetFilter('novalnetpayment/administration/static/img/plugin.png')\"\n        alt\n    />\n{% endblock %}\n","import template from './novalnet-payment-settings-icon.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('novalnet-payment-settings-icon', {\n    template,\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","{% block sw_customer_base_metadata_default_payment_content %}\n    <dd\n        v-if=\"!customerEditMode\"\n        class=\"sw-customer-base__label-default-payment-method\"\n    >       \n            {{ paymentMethod }}\n    </dd>\n{% endblock %}\n","import template from './sw-customer-base-info.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-customer-base-info', {\n    template,\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    props: {\n        customer: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            paymentMethod: '',\n        };\n    },\n\n    watch: {\n        customer: {\n            deep: true,\n            handler() {\n                if (this.customer == '') {\n                    return;\n                }\n\n                if (\n                    this.customer.defaultPaymentMethod.customFields != null &&\n                    this.customer.defaultPaymentMethod.customFields\n                        .novalnet_payment_method_name != undefined &&\n                    this.customer.defaultPaymentMethod.customFields\n                        .novalnet_payment_method_name == 'novalnetpay'\n                ) {\n                    this.NovalPaymentApiCredentialsService.getCustomerPaymentMethod(\n                        this.customer.customerNumber\n                    )\n                        .then((paymentDetails) => {\n                            if (\n                                paymentDetails != undefined &&\n                                paymentDetails != null\n                            ) {\n                                if (\n                                    paymentDetails.paymentName != undefined &&\n                                    paymentDetails.paymentName != null\n                                ) {\n                                    this.paymentMethod =\n                                        paymentDetails.paymentName;\n                                } else {\n                                    this.paymentMethod =\n                                        this.customer.defaultPaymentMethod.translated.distinguishableName;\n                                }\n                            } else {\n                                this.paymentMethod =\n                                    this.customer.defaultPaymentMethod.translated.distinguishableName;\n                            }\n                        })\n                        .catch((errorResponse) => {\n                            this.createNotificationError({\n                                message: `${errorResponse.title}: ${errorResponse.message}`,\n                            });\n                        });\n                } else {\n                    this.paymentMethod =\n                        this.customer.defaultPaymentMethod.translated.distinguishableName;\n                }\n            },\n            immediate: true,\n        },\n    },\n});\n","{% block sw_order_detail_details_payment %}\n    <sw-order-details-state-card\n        v-if=\"transaction\"\n        :title=\"$tc('sw-order.detailsTab.labelTransactionCard')\"\n        :order=\"order\"\n        :entity=\"transaction\"\n        :state-label=\"$tc('sw-order.stateCard.headlineTransactionState')\"\n        :disabled=\"!acl.can('order.editor')\"\n        @show-status-history=\"showStateHistoryModal = true\"\n        @save-edits=\"onSaveEdits\"\n    >\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_details_payment_billing_address %}\n        <sw-order-address-selection\n            class=\"sw-order-detail-details__billing-address\"\n            type=\"billing\"\n            :address=\"billingAddress\"\n            :address-id=\"selectedBillingAddressId\"\n            :disabled=\"!acl.can('order.editor')\"\n            :label=\"$tc('sw-order.createBase.detailsBody.labelBillingAddress')\"\n            @change-address=\"onChangeOrderAddress\"\n        />\n        {% endblock %}\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_order_detail_details_payment_method_select %}\n        \n        {% if paymentMethod !='' %}\n        <mt-text-field\n            type=\"text\"\n            :label=\"$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')\"\n            :placeholder=\"$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')\"\n            disabled\n            v-model=\"paymentMethod\"\n        >\n        </mt-text-field>\n        {% else %}\n        <sw-entity-single-select\n            v-model:value=\"transaction.paymentMethodId\"\n            entity=\"payment_method\"\n            label-property=\"distinguishableName\"\n            disabled\n            :criteria=\"paymentMethodCriteria\"\n            :label=\"$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')\"\n            :placeholder=\"$tc('sw-order.createBase.detailsFooter.placeholderPaymentMethod')\"\n            show-clearable-button\n        />\n        {% endif %}\t\n        \n        {% endblock %}\n    </sw-order-details-state-card>\n\n    {% block sw_order_detail_details_payment_novalnet_seaction %}\n        <template v-if=\"isNovalnetPayment\">\n            <sw-order-details-state-card\n                v-if=\"transaction\"\n                :title=\"$tc('novalnet-payment.module.title')\"\n                :order=\"order\"\n                :entity=\"transaction\"\n                :state-label=\"$tc('sw-order.stateCard.headlineTransactionState')\"\n                :disabled=\"!acl.can('order.editor')\"\n                @show-status-history=\"showStateHistoryModal = true\"\n                @save-edits=\"onSaveEdits\"\n            >\n                <div class=\"novalnet-payment-buyer-notification\">\n                    {# Logo #}\n\t\t\t\t\t{% block novalnet_payment_order_buyer_info %}\n                    <div\n                        class=\"novalnet-payment-buyer-notification-icon-container\"\n                    >\n                        <img\n                            class=\"novalnet-payment-buyer-info-icon\"\n                            :src=\"assetFilter('novalnetpayment/static/img/plugin.png')\"\n                            alt\n                        />\n                    </div>\n                    {% endblock %}\n\n\t\t\t\t\t{# Full name and E-Mail address #}\n\t\t\t\t\t{% block novalnet_payment_order_buyer_info_name_container %}\n                    <div class=\"novalnet-payment-buyer-info-name\">\n                        {% block novalnet_payment_order_buyer_info_name_container_name %}\n                        <div class=\"novalnet-payment-buyer-info-full-name\">\n                            {{ order.orderCustomer.firstName }}\n                            {{ order.orderCustomer.lastName }}\n                        </div>\n                        {% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_buyer_info_name_container_email %}\n                        <div class=\"novalnet-payment-buyer-info-email\">\n                            {{ order.orderCustomer.email }}\n                        </div>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </div>\n                <sw-container\n                    class=\"novalnet-payment-amount-info\"\n                    columns=\"1fr\"\n                >\n                    {% block novalnet_payment_order_component_amount_info %}\n                    <div class=\"novalnet-payment-amount-info-total-amount\">\n\t\t\t\t\t\t\t{{ displayOrderAmount }}\n\t\t\t\t\t\t</div>\n                    {% endblock %}\n\t\t\t\t\t\n\t\t\t\t\t{% block novalnet_payment_amount_info_captured_amount %}\n                    <div class=\"novalnet-payment-amount-captured-amount\">\n                        {% block novalnet_payment_amount_info_captured_amount %}\n\t\t\t\t\t\t\t\t+\n                        {{ displayPaidAmount }}\n                        {% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_amount_info_captured_amount_help %}\n                        <sw-help-text\n                            class=\"novalnet-payment-captured-amount-help-icon\"\n                            tooltipPosition=\"top\"\n                            :text=\"$tc('novalnet-payment.settingForm.extension.paidTooltip')\"\n                        >\n\t\t\t\t\t\t\t\t</sw-help-text>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n\t\t\t\t\t\n\t\t\t\t\t{% block novalnet_payment_order_compoenent_amount_info_refuned %}\n                    <div class=\"novalnet-payment-refuned-amount\">\n                        {% block novalnet_payment_order_compoenent_amount_info_refuned_amount %}\n\t\t\t\t\t\t\t\t-\n                        {{ refundedAmount }}\n                        {% endblock %}\n\n\t\t\t\t\t\t\t{% block novalnet_payment_order_compoenent_amount_info_refuned_help %}\n                        <sw-help-text\n                            class=\"novalnet-payment-refuned-amount-help-icon\"\n                            tooltipPosition=\"top\"\n                            :text=\"$tc('novalnet-payment.settingForm.extension.refundTooltip')\"\n                        >\n\t\t\t\t\t\t\t\t</sw-help-text>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n\n\t\t\t\t\t{% block novalnet_payment_order_info_date %}\n                    <div class=\"novalnet-payment-amount-info-charge-date\">\n                        {{ dateFilter(transaction.createdAt) }}\n                    </div>\n                    {% endblock %}\n                </sw-container>\n                <sw-container\n                    class=\"novalnet-payment-action-toolbar\"\n                    rows=\"1\"\n                    columns=\"1fr 1fr 1fr 1fr 1fr\"\n                    gap=\"10px\"\n                >\n                    {% block novalnet_payment_order_container_toolbar_refund_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canRefund\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showRefundModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n                    </mt-button>\n                    {% endblock %}\n\n                    {% block novalnet_payment_order_container_toolbar_instalment_cancel_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canInstalmentCancel\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showInstalmentCancelModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.instalmentCancelLabel') }}\n                    </mt-button>\n                    {% endblock %}\n               \n                    {% block novalnet_payment_order_container_toolbar_instalment_all_cancel_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canInstalmentAllCancel\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showInstalmentAllCancelModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.instalmentAllCancelLabel') }}\n                    </mt-button>\n                    {% endblock %}\n                    \n                    {% block novalnet_payment_order_container_toolbar_instalment_remain_cancel_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canInstalmentRemainCancel\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showInstalmentRemainCancelModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.instalmentRemainCancelLabel') }}\n                    </mt-button>\n                    {% endblock %}\n\n\t\t\t\t\t{% block novalnet_payment_order_container_toolbar_capture_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canCaptureVoid\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showConfirmModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n                    </mt-button>\n                    {% endblock %}\n\n\t\t    {% block novalnet_payment_order_container_toolbar_cancel_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canCaptureVoid\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showCancelModal\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.cancelLabel') }}\n                    </mt-button>\n                    {% endblock %}\n\t\t    {% block novalnet_payment_order_container_toolbar_zero_amount_button %}\n                    <mt-button\n                        size=\"small\"\n                        class=\"novalnet-payment-pay-action-toolbar__button\"\n                        v-if=\"canZeroAmountBooking\"\n                        :disabled=\"!acl.can('novalnet_extension.editor')\"\n                        @click=\"showZeroAmountBlock\"\n                    >\n                        {{ $tc('novalnet-payment.settingForm.extension.zeroAmountButton') }}\n                    </mt-button>\n                    {% endblock %}\n                </sw-container>\n                <sw-container\n                    class=\"novalnet-payment-pay-empty-container\"\n                    columns=\"1fr\"\n                >\n\t\t\t\t</sw-container>\n                <sw-container\n                    class=\"novalnet-payment-pay-info-container\"\n                    columns=\"1fr\"\n                >\n                    <hr class=\"sw-order-detail-state-card__divider\"/>\n                    {% block novalnet_payment_order_component_checkout_info_billing_container %}\n                    <div\n                        class=\"novalnet-payment_chechout-info-customer-comments\"\n                        v-if=\"isNovalnetPayment\"\n                    >\n                        {% block novalnet_payment_order_component_checkout_info_billing_container_headline %}\n                        <div class=\"novalnet-payment-checkout-info-header\">\n                            {{ $tc('novalnet-payment.module.comments') }}\n                        </div>\n                        {% endblock %}\n\t\n\t\t\t\t\t\t\t{% block novalnet_payment_order_component_billing_value %}\n                        <span\n                            class=\"novalnet-payment-checkout-info-comments\"\n                            v-html=\"novalnetComments\"\n                            style=\"line-height:22px;\"\n                        >\n\t\t\t\t\t\t\t\t</span>\n                        {% endblock %}\n                    </div>\n                    {% endblock %}\n                </sw-container>\n                {% block novalnet_payment_order_component_action_toolbar_modals %}\n                <novalnet-payment-refund-modal\n                    v-if=\"refundModalVisible\"\n                    :refundableAmount=\"refundableAmount\"\n                    :order=\"order\"\n                    :item=\"item\"\n                    @modal-close=\"closeModals\"\n                    @reload-payment=\"reloadPaymentDetails\"\n                >\n\t\t\t\t\t</novalnet-payment-refund-modal>\n                <novalnet-payment-manage-transaction-modal\n                    v-if=\"confirmModalVisible\"\n                    :status=\"status\"\n                    :order=\"order\"\n                    @modal-close=\"closeModals\"\n                    @reload-payment=\"reloadPaymentDetails\"\n                >\n\t\t\t\t\t</novalnet-payment-manage-transaction-modal>\n                <novalnet-payment-manage-transaction-modal\n                    v-if=\"cancelModalVisible\"\n                    :status=\"status\"\n                    :order=\"order\"\n                    @modal-close=\"closeModals\"\n                    @reload-payment=\"reloadPaymentDetails\"\n                >\n\t\t\t\t\t</novalnet-payment-manage-transaction-modal>\n                <novalnet-payment-book-amount-modal\n                    v-if=\"zeroAmountVisible\"\n                    :orderAmount=\"orderAmount\"\n                    :order=\"order\"\n                    @modal-close=\"closeModals\"\n                    @reload-payment=\"reloadPaymentDetails\"\n                >\n\t\t\t\t\t</novalnet-payment-book-amount-modal>\n                <novalnet-payment-instalment-cancel-modal\n                    v-if=\"instalmentRefundModalVisible\"\n                    :item=\"item\"\n                    :cancelType=\"cancelType\"\n                    :order=\"order\"\n                    @modal-close=\"closeModals\"\n                    @reload-payment=\"reloadPaymentDetails\"\n                >\n\t\t\t\t\t</novalnet-payment-instalment-cancel-modal>\n                {% endblock %}\n            </sw-order-details-state-card>\n            <mt-card\n                :title=\"$tc('novalnet-payment.settingForm.instalmentInfo')\"\n                v-if=\"canInstalmentShow\"\n            >\n                <template #grid>\n                    <sw-data-grid\n                        :dataSource=\"InstalmentInfo\"\n                        :columns=\"getInstalmentColums\"\n                        :compactMode=\"false\"\n                        :allowInlineEdit=\"true\"\n                        :showSelection=\"false\"\n                    >\n                        {% block sw_product_detail_base_ratings_actions %}\n                        <template #actions=\"{ item }\">\n                            {% block sw_product_detail_base_ratings_actions_edit %}\n                            <sw-context-menu-item\n                                class=\"sw-product-detail-base__review-edit\"\n                                @click=\"instalmentRefund(item)\"\n                                :disabled=\"disableInstalmentRefund(item)\"\n                            >\n                                {{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n                            </sw-context-menu-item>\n                            {% endblock %}\n                        </template>\n                        {% endblock %}\n                    </sw-data-grid>\n                </template>\n            </mt-card>\n        </template>\n    {% endblock %}\n{% endblock %}\n","import template from './sw-order-detail-details.html.twig';\nimport './sw-order-detail-details.scss';\n\nconst { Context, Component } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { currency } = Shopware.Utils.format;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory', 'acl'],\n\n    mixins: ['notification'],\n\n    props: {\n        orderId: {\n            type: String,\n            required: true\n        },\n        paymentDetails: {\n            type: Object,\n            required: true\n        },\n    },\n\n    data() {\n        return {\n            status: 0,\n            displayPaidAmount: 0,\n            refundedAmount: 0,\n            orderAmount: 0,\n            displayOrderAmount: 0,\n            InstalmentInfo: [],\n            item: {},\n            novalnetComments: '',\n            isNovalnetPayment: false,\n            refundModalVisible: false,\n            confirmModalVisible: false,\n            zeroAmountVisible: false,\n            cancelModalVisible: false,\n            canInstalmentAllCancel: false,\n            canInstalmentRemainCancel: false,\n            instalmentRefundModalVisible: false,\n            canCaptureVoid: false,\n            canRefund: false,\n            canZeroAmountBooking: false,\n            canInstalmentCancel: false,\n            canInstalmentShow: false,\n            instalmentRefundAmount: 0,\n            paymentMethod: '',\n            payLater: ['INVOICE', 'MULTIBANCO', 'PREPAYMENT'],\n            instalmentPayments: [\n                'INSTALMENT_INVOICE',\n                'INSTALMENT_DIRECT_DEBIT_SEPA',\n            ],\n            onholdStatus: ['91', '99', '98', '85'],\n            refundableAmount: 0,\n        };\n    },\n\n    computed: {\n        getInstalmentColums() {\n            const columnDefinitions = [\n                {\n                    property: 'number',\n                    dataIndex: 'number',\n                    label: this.$tc(\n                        'novalnet-payment.settingForm.instalmentNumber'\n                    ),\n                    width: '50px',\n                },\n                {\n                    property: 'reference',\n                    dataIndex: 'reference',\n                    label: this.$tc(\n                        'novalnet-payment.settingForm.instalmentReference'\n                    ),\n                    width: '120px',\n                },\n                {\n                    property: 'amount',\n                    dataIndex: 'amount',\n                    label: this.$tc(\n                        'novalnet-payment.settingForm.instalmentAmount'\n                    ),\n                    width: '80px',\n                },\n                {\n                    property: 'totalAmount',\n                    dataIndex: 'totalAmount',\n                    visible: false,\n                },\n                {\n                    property: 'refundAmount',\n                    dataIndex: 'refundAmount',\n                    visible: false,\n                },\n                {\n                    property: 'nextCycle',\n                    dataIndex: 'nextCycle',\n                    label: this.$tc(\n                        'novalnet-payment.settingForm.instalmentDate'\n                    ),\n                    width: '120px',\n                },\n                {\n                    property: 'status',\n                    dataIndex: 'status',\n                    label: this.$tc(\n                        'novalnet-payment.settingForm.instalmentStatus'\n                    ),\n                    width: '80px',\n                },\n            ];\n\n            return columnDefinitions;\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                if (!this.orderId) {\n                    return;\n                }\n                const orderRepository = this.repositoryFactory.create('order');\n                const orderCriteria = new Criteria(1, 1);\n                orderCriteria.addAssociation('transactions');\n                orderCriteria.addAssociation('currency');\n\n                orderCriteria.addFilter(Criteria.equals('id', this.orderId));\n\n                orderRepository\n                    .search(orderCriteria, Context.api)\n                    .then((searchResult) => {\n                        const order = searchResult.first();\n\n                        if (!order) {\n                            return;\n                        }\n\n                        if (!this.identifier) {\n                            this.identifier = order.orderNumber;\n                        }\n                        let isNovalnet = false;\n                        let comments = '';\n                        let translation = this.$tc(\n                            'novalnet-payment.module.comments'\n                        );\n\n                        order.transactions\n                            .sort(\n                                (a, b) =>\n                                    new Date(b.createdAt) -\n                                    new Date(a.createdAt)\n                            )\n                            .forEach((orderTransaction) => {\n                                if (\n                                    orderTransaction.customFields &&\n                                    orderTransaction.customFields\n                                        .novalnet_comments\n                                ) {\n                                    isNovalnet = true;\n                                    if (comments != '') {\n                                        comments +=\n                                            '<dt>' + translation + '</dt>';\n                                    }\n                                    comments +=\n                                        orderTransaction.customFields.novalnet_comments\n                                            .split('/ ')\n                                            .join('<br />');\n\n                                    return true;\n                                }\n                            });\n                        if (isNovalnet) {\n                            this.novalnetComments = comments\n                                .split('&&')\n                                .join(\n                                    '<dt><strong>' +\n                                        translation +\n                                        '</strong></dt>'\n                                );\n                            this.setNovalnetPayment(true);\n                        } else {\n                            this.setNovalnetPayment(false);\n                        }\n\n                        if (\n                            this.order.transactions.last().paymentMethod\n                                .customFields != null &&\n                            this.order.transactions.last().paymentMethod\n                                .customFields.novalnet_payment_method_name !=\n                                undefined &&\n                            this.order.transactions.last().paymentMethod\n                                .customFields.novalnet_payment_method_name ==\n                                'novalnetpay'\n                        ) {\n                            if (\n                                this.order.transactions.last().customFields !=\n                                    null &&\n                                this.order.transactions.last().customFields\n                                    .novalnet_payment_name != undefined &&\n                                this.order.transactions.last().customFields\n                                    .novalnet_payment_name != ''\n                            ) {\n                                this.paymentMethod =\n                                    this.order.transactions.last().customFields.novalnet_payment_name;\n                            }\n                        } else {\n                            this.paymentMethod =\n                                this.order.transactions.last().paymentMethod.translated.distinguishableName;\n                        }\n\n                        this.orderAmount = Math.round(\n                            Number(order.price.totalPrice) * 100\n                        );\n                        this.displayOrderAmount = currency(\n                            order.price.totalPrice,\n                            order.currency.shortName\n                        );\n                        this.displayPaidAmount = currency(\n                            0,\n                            order.currency.shortName\n                        );\n                        this.refundedAmount = currency(\n                            0,\n                            order.currency.shortName\n                        );\n\n                        this.canCaptureVoid = false;\n                        this.canRefund = false;\n                        this.canZeroAmountBooking = false;\n                        this.canInstalmentCancel = false;\n                        this.canInstalmentShow = false;\n                        this.InstalmentInfo = [];\n                        this.canInstalmentAllCancel = false;\n                        this.canInstalmentRemainCancel = false;\n\n                        this.NovalPaymentApiCredentialsService.getNovalnetAmount(\n                            order.orderNumber\n                        )\n                            .then((payment) => {\n                                if (\n                                    payment.data != '' &&\n                                    payment.data != undefined\n                                ) {\n                                    if (payment.data.gatewayStatus) {\n                                        let additionalDetails = JSON.parse(\n                                            payment.data.additionalDetails\n                                        );\n\n                                        this.refundableAmount =\n                                            Number(payment.data.amount) -\n                                            Number(payment.data.refundedAmount);\n\n                                        if (payment.data.amount != 0) {\n                                            this.displayOrderAmount = currency(\n                                                payment.data.amount / 100,\n                                                order.currency.shortName\n                                            );\n                                        }\n                                        if (\n                                            payment.data.gatewayStatus ==\n                                                'ON_HOLD' ||\n                                            this.onholdStatus.includes(\n                                                payment.data.gatewayStatus\n                                            )\n                                        ) {\n                                            this.canCaptureVoid = true;\n                                        } else if (\n                                            ((payment.data.amount > 0 &&\n                                                payment.data.gatewayStatus ==\n                                                    'CONFIRMED' &&\n                                                !this.instalmentPayments.includes(\n                                                    payment.data.paymentType\n                                                ) &&\n                                                Number(\n                                                    payment.data.refundedAmount\n                                                ) <\n                                                    Number(\n                                                        payment.data.amount\n                                                    )) ||\n                                                (payment.data.gatewayStatus ==\n                                                    'PENDING' &&\n                                                    this.payLater.includes(\n                                                        payment.data.paymentType\n                                                    ))) &&\n                                            payment.data.paymentType !=\n                                                'MULTIBANCO'\n                                        ) {\n                                            this.canRefund = true;\n                                        } else if (\n                                            this.instalmentPayments.includes(\n                                                payment.data.paymentType\n                                            ) &&\n                                            payment.data.gatewayStatus ==\n                                                'CONFIRMED' &&\n                                            !additionalDetails.cancelType\n                                        ) {\n                                            this.canInstalmentCancel = true;\n                                        } else if (\n                                            (payment.data.paymentType ==\n                                                'CREDITCARD' ||\n                                                payment.data.paymentType ==\n                                                    'DIRECT_DEBIT_SEPA' ||\n                                                payment.data.paymentType ==\n                                                    'GOOGLEPAY' ||\n                                                payment.data.paymentType ==\n                                                    'APPLEPAY' ||\n                                                payment.data.paymentType ==\n                                                    'DIRECT_DEBIT_ACH') &&\n                                            Number(payment.data.amount) == 0 &&\n                                            this.orderAmount != 0 &&\n                                            payment.data.gatewayStatus !=\n                                                'FAILURE'\n                                        ) {\n                                            this.canZeroAmountBooking = true;\n                                        }\n\n                                        if (\n                                            this.paymentMethod == '' &&\n                                            additionalDetails.payment_name !=\n                                                undefined &&\n                                            additionalDetails.payment_name != ''\n                                        ) {\n                                            this.paymentMethod =\n                                                additionalDetails.payment_name;\n                                        }\n\n                                        if (payment.data.paidAmount != 0) {\n                                            this.displayPaidAmount = currency(\n                                                payment.data.paidAmount / 100,\n                                                order.currency.shortName\n                                            );\n                                        }\n\n                                        if (payment.data.refundedAmount != 0) {\n                                            this.refundedAmount = currency(\n                                                payment.data.refundedAmount /\n                                                    100,\n                                                order.currency.shortName\n                                            );\n                                        }\n\n                                        if (\n                                            this.instalmentPayments.includes(\n                                                payment.data.paymentType\n                                            ) &&\n                                            payment.data.gatewayStatus ==\n                                                'CONFIRMED' &&\n                                            additionalDetails.InstalmentDetails !=\n                                                ''\n                                        ) {\n                                            this.canInstalmentShow = true;\n                                            this.instalmentRefundAmount =\n                                                payment.data.refundedAmount;\n                                            var counter = 1;\n\n                                            Object.values(\n                                                additionalDetails.InstalmentDetails\n                                            ).forEach((values) => {\n                                                this.InstalmentInfo.push({\n                                                    amount: currency(\n                                                        values.amount / 100,\n                                                        order.currency.shortName\n                                                    ),\n                                                    totalAmount: values.amount,\n                                                    nextCycle: values.cycleDate,\n                                                    reference: values.reference,\n                                                    status: values.status,\n                                                    refundAmount:\n                                                        values.refundAmount,\n                                                    number: counter,\n                                                });\n                                                counter++;\n                                            });\n\n                                            if (\n                                                payment.data.refundedAmount != 0\n                                            ) {\n                                                this.canInstalmentCancel = false;\n                                                this.canInstalmentAllCancel = false;\n                                            }\n\n                                            if (\n                                                this.InstalmentInfo !=\n                                                    undefined &&\n                                                this.InstalmentInfo != null\n                                            ) {\n                                                this.InstalmentInfo.forEach(\n                                                    (value) => {\n                                                        if (\n                                                            value[\n                                                                'reference'\n                                                            ] == '' ||\n                                                            value[\n                                                                'reference'\n                                                            ] == null\n                                                        ) {\n                                                            this.canInstalmentRemainCancel = true;\n                                                        }\n                                                    }\n                                                );\n                                            }\n\n                                            if (\n                                                additionalDetails.cancelType !=\n                                                    undefined &&\n                                                additionalDetails.cancelType !=\n                                                    ''\n                                            ) {\n                                                this.canInstalmentRemainCancel = false;\n                                            }\n\n                                            if (\n                                                this\n                                                    .canInstalmentRemainCancel ==\n                                                    false &&\n                                                payment.data.refundedAmount == 0\n                                            ) {\n                                                this.canInstalmentCancel = false;\n                                                this.canInstalmentAllCancel = true;\n                                            } else if (\n                                                this.canInstalmentCancel == true\n                                            ) {\n                                                this.canInstalmentRemainCancel = false;\n                                            }\n                                        }\n                                    }\n                                }\n                            })\n                            .catch((errorResponse) => {\n                                this.createNotificationError({\n                                    message: `${errorResponse.title}: ${errorResponse.message}`,\n                                });\n                            });\n                    })\n                    .finally(() => {\n                        this.setNovalnetPayment(false);\n                    });\n            },\n            immediate: true,\n        },\n    },\n    methods: {\n        setNovalnetPayment(novalnetPayment) {\n            if (novalnetPayment) {\n                this.isNovalnetPayment = novalnetPayment;\n            }\n        },\n        showConfirmModal() {\n            this.status = 100;\n            this.confirmModalVisible = true;\n        },\n\n        showRefundModal() {\n            this.refundModalVisible = true;\n        },\n\n        closeModals() {\n            this.refundModalVisible = false;\n            this.confirmModalVisible = false;\n            this.cancelModalVisible = false;\n            this.zeroAmountVisible = false;\n            this.instalmentRefundModalVisible = false;\n        },\n\n        showInstalmentAllCancelModal() {\n            this.instalmentRefundModalVisible = true;\n            this.cancelType = 'CANCEL_ALL_CYCLES';\n        },\n\n        showInstalmentRemainCancelModal() {\n            this.instalmentRefundModalVisible = true;\n            this.cancelType = 'CANCEL_REMAINING_CYCLES';\n        },\n\n        showCancelModal() {\n            this.status = 103;\n            this.cancelModalVisible = true;\n        },\n\n        showZeroAmountBlock() {\n            this.zeroAmountVisible = true;\n        },\n\n        reloadPaymentDetails() {\n            this.closeModals();\n            // Wait for the next tick to trigger the reload. Otherwise the Modal won't be hidden correctly.\n            this.$nextTick().then(() => {\n                this.$emit('reload-payment');\n            });\n        },\n\n        instalmentRefund(item) {\n            this.refundableAmount = item.totalAmount - item.refundAmount;\n            this.item = item;\n            this.refundModalVisible = true;\n        },\n\n        showInstalmentCancelModal() {\n            if (\n                this.InstalmentInfo != undefined &&\n                this.InstalmentInfo != null\n            ) {\n                this.InstalmentInfo.forEach((value) => {\n                    if (\n                        value['reference'] == '' ||\n                        value['reference'] == null\n                    ) {\n                        this.canInstalmentRemainCancel = true;\n                    }\n                });\n            }\n\n            if (this.instalmentRefundAmount == 0) {\n                this.canInstalmentAllCancel = true;\n            }\n            this.canInstalmentCancel = false;\n        },\n\n        disableInstalmentRefund(item) {\n            if (\n                item.reference == undefined ||\n                item.reference == '' ||\n                item.refundAmount >= item.totalAmount ||\n                !this.acl.can('novalnet_extension.editor')\n            ) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n});\n","{% block novalnet_payment_order_refund_modal %}\n    <sw-modal\n        :title=\"$tc('novalnet-payment.settingForm.extension.refundButton')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block novalnet_payment_order_refund_modal_content %}\n        <template #default>\n            {% block novalnet_payment_order_refund_modal_content_info_text %}\n            <sw-container\n                columns=\"1fr\"\n                gap=\"0px 30px\"\n            >\n                <mt-number-field\n                    v-model=\"refundAmount\"\n                    :max=\"item.amount\"\n                    :min=\"0\"\n                    :allowEmpty=\"false\"\n                    numberType=\"int\"\n                    :label=\"$tc('novalnet-payment.settingForm.extension.amountTitle')\"\n                    :helpText=\"$tc('novalnet-payment.settingForm.extension.refundDescription')\"\n                >\n\t\t</mt-number-field>\n                <mt-text-field\n                    v-model=\"reason\"\n                    :placeholder=\"$tc('novalnet-payment.settingForm.extension.refundReference')\"\n                    :label=\"$tc('novalnet-payment.settingForm.extension.refundReference')\"\n                >\n\t\t</mt-text-field>\n            </sw-container>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n\t{% block novalnet_payment_order_refund_modal_actions %}\n        <template #modal-footer>\n            {% block novalnet_payment_order_refund_modal_confirm %}\n            <mt-button\n                secondary\n                slim\n                variant=\"primary\"\n                :disabled=\"disable\"\n                :square=\"false\"\n                :block=\"false\"\n                :isLoading=\"false\"\n                @click=\"novalnetRefund\"\n            >\n                {{ $tc('novalnet-payment.settingForm.extension.refundButton') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-refund-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-refund-modal', {\n    template,\n\n    props: {\n        refundableAmount: {\n            type: Number,\n            required: true,\n        },\n\n        order: {\n            type: Object,\n            required: true,\n        },\n\n        item: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            reason: '',\n            disable: false,\n            refundAmount: this.refundableAmount,\n        };\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        novalnetRefund() {\n            const reason = this.reason;\n            const orderNumber = this.order.orderNumber;\n\n            if (this.refundAmount == '0') {\n                this.createNotificationError({\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.amountRefundError'\n                    ),\n                });\n                return;\n            }\n\n            this.disable = true;\n\n            this.NovalPaymentApiCredentialsService.refundPayment(\n                orderNumber,\n                this.refundAmount,\n                reason,\n                this.item.reference\n            )\n                .then((response) => {\n                    if (\n                        response.result != undefined &&\n                        response.result != null\n                    ) {\n                        if (\n                            response.result.status != undefined &&\n                            response.result.status != null &&\n                            response.result.status == 'SUCCESS'\n                        ) {\n                            this.createNotificationSuccess({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.extension.refundSuccess'\n                                ),\n                            });\n                        } else if (\n                            response.result.status_text != undefined &&\n                            response.result.status_text != null &&\n                            response.result.status_text != ''\n                        ) {\n                            this.createNotificationError({\n                                message: response.result.status_text,\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.failureMessage'\n                                ),\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.failureMessage'\n                            ),\n                        });\n                    }\n                    this.$emit('modal-close');\n                    setTimeout(this.$router.go, 3000);\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                    this.$emit('modal-close');\n                });\n        },\n    },\n});\n","{% block novalnet_payment_order_manage_modal %}\n    <sw-modal\n        :title=\"$tc('novalnet-payment.settingForm.extension.Managetitle')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block novalnet_payment_order_manage_modal_content %}\n        <template #default>\n            {% block novalnet_payment_order_manage_modal_content_info_text %}\n            <sw-container\n                columns=\"1fr\"\n                gap=\"0px 30px\"\n            >\n                <div v-if=\"status == 100\">\n                    {{ $tc('novalnet-payment.settingForm.extension.confirmMessage') }}\n                </div>\n                <div v-if=\"status == 103\">\n                    {{ $tc('novalnet-payment.settingForm.extension.cancelMessage') }}\n                </div>\n            </sw-container>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n        {% block novalnet_payment_order_manage_modal_actions %}\n        <template #modal-footer>\n            {% block novalnet_payment_order_manage_modal_confirm %}\n            <mt-button\n                secondary\n                slim\n                variant=\"primary\"\n                :disabled=\"disable\"\n                :square=\"false\"\n                :block=\"false\"\n                :isLoading=\"false\"\n                @click=\"novalnetOnhold\"\n            >\n                {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-manage-transaction-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-manage-transaction-modal', {\n    template,\n\n    props: {\n        status: {\n            type: Number,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            confirm: true,\n            cancel: false,\n            disable: false,\n        };\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        novalnetOnhold() {\n            let status = this.status;\n            const orderNumber = this.order.orderNumber;\n\n            if (status == '' || status == undefined) {\n                this.createNotificationError({\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.extension.onholdLabel'\n                    ),\n                });\n                return;\n            }\n\n            this.disable = true;\n\n            this.NovalPaymentApiCredentialsService.managePayment(\n                orderNumber,\n                status\n            )\n                .then((response) => {\n                    if (response != '') {\n                        if (response.result.status == 'SUCCESS') {\n                            if (status == 100) {\n                                this.createNotificationSuccess({\n                                    message: this.$tc(\n                                        'novalnet-payment.settingForm.extension.onholdSuccess'\n                                    ),\n                                });\n                            } else {\n                                this.createNotificationSuccess({\n                                    message: this.$tc(\n                                        'novalnet-payment.settingForm.extension.onholdCancel'\n                                    ),\n                                });\n                            }\n                        } else if (\n                            response.result.status_text != undefined &&\n                            response.result.status_text != null &&\n                            response.result.status_text != ''\n                        ) {\n                            this.createNotificationError({\n                                message: response.result.status_text,\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.failureMessage'\n                                ),\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.failureMessage'\n                            ),\n                        });\n                    }\n                    this.$emit('modal-close');\n                    setTimeout(this.$router.go, 3000);\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                    this.$emit('modal-close');\n                });\n        },\n    },\n});\n","{% block novalnet_payment_order_refund_modal %}\n    <sw-modal\n        :title=\"$tc('novalnet-payment.settingForm.extension.zeroAmountButton')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block novalnet_payment_order_zero_amount_modal_content %}\n        <template #default>\n            {% block novalnet_payment_order_zero_amount_modal_content_info_text %}\n            <sw-container\n                columns=\"1fr\"\n                gap=\"0px 30px\"\n            >\n                <mt-number-field\n                    v-model=\"bookAmount\"\n                    :min=\"0\"\n                    :allowEmpty=\"false\"\n                    numberType=\"int\"\n                    :label=\"$tc('novalnet-payment.settingForm.extension.zeroAmountTitle')\"\n                    :helpText=\"$tc('novalnet-payment.settingForm.extension.zeroAmountDescription')\"\n                >\n                </mt-number-field>\n            </sw-container>\n            {% endblock %}\n        </template>\n        {% endblock %}\n        \n        {% block novalnet_payment_order_zero_amount_modal_actions %}\n        <template #modal-footer>\n            {% block novalnet_payment_order_zero_amount_modal_confirm %}\n            <mt-button\n                secondary\n                slim\n                variant=\"primary\"\n                :disabled=\"disable\"\n                :square=\"false\"\n                :block=\"false\"\n                :isLoading=\"false\"\n                @click=\"novalnetBookAmount\"\n            >\n                {{ $tc('novalnet-payment.settingForm.extension.bookButton') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-book-amount-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-book-amount-modal', {\n    template,\n\n    props: {\n        orderAmount: {\n            type: Number,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            reason: '',\n            disable: false,\n            bookAmount: this.orderAmount,\n        };\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        novalnetBookAmount() {\n            const orderNumber = this.order.orderNumber;\n\n            if (this.bookAmount == 0) {\n                this.createNotificationError({\n                    message: this.$tc(\n                        'novalnet-payment.settingForm.amountError'\n                    ),\n                });\n                return;\n            }\n\n            this.disable = true;\n            this.NovalPaymentApiCredentialsService.BookOrderAmount(\n                orderNumber,\n                this.bookAmount\n            )\n                .then((response) => {\n                    if (\n                        response.result != undefined &&\n                        response.result != null\n                    ) {\n                        if (\n                            response.result.status != undefined &&\n                            response.result.status != null &&\n                            response.result.status == 'SUCCESS'\n                        ) {\n                            this.createNotificationSuccess({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.extension.bookedSuccess'\n                                ),\n                            });\n                        } else if (\n                            response.result.status_text != undefined &&\n                            response.result.status_text != null &&\n                            response.result.status_text != ''\n                        ) {\n                            this.createNotificationError({\n                                message: response.result.status_text,\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.failureMessage'\n                                ),\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.failureMessage'\n                            ),\n                        });\n                    }\n                    this.$emit('modal-close');\n                    setTimeout(this.$router.go, 3000);\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                    this.$emit('modal-close');\n                });\n        },\n    },\n});\n","{% block novalnet_payment_order_cancel_modal %}\n    <sw-modal\n        :title=\"$tc('novalnet-payment.settingForm.extension.instalmentCancelLabel')\"\n        @modal-close=\"closeModal\"\n    >\n        {% block novalnet_payment_order_cancel_modal_content %}\n        <template #default>\n            {% block novalnet_payment_order_cancel_modal_content_info_text %}\n            <sw-container\n                columns=\"1fr\"\n                gap=\"0px 30px\"\n            >\n                <div v-if=\"cancelType == 'CANCEL_ALL_CYCLES' \">\n                    {{ $tc('novalnet-payment.settingForm.extension.cancelAllCycleMessage') }}\n                </div>\n                <div v-if=\"cancelType == 'CANCEL_REMAINING_CYCLES' \">\n                    {{ $tc('novalnet-payment.settingForm.extension.cancelRemainingCycleMessage') }}\n                </div>\n            </sw-container>\n            {% endblock %}\n        </template>\n        {% endblock %}\n\n\t\t\t{% block novalnet_payment_order_cancel_modal_actions %}\n        <template #modal-footer>\n            {% block novalnet_payment_order_cancel_modal_confirm %}\n            <mt-button\n                secondary\n                slim\n                variant=\"primary\"\n                :disabled=\"disable\"\n                :square=\"false\"\n                :block=\"false\"\n                :isLoading=\"false\"\n                @click=\"novalnetInstalmentCancel\"\n            >\n                {{ $tc('novalnet-payment.settingForm.extension.confirmLabel') }}\n            </mt-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}\n","import template from './novalnet-payment-instalment-cancel-modal.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('novalnet-payment-instalment-cancel-modal', {\n    template,\n\n    props: {\n        cancelType: {\n            type: String,\n            required: true,\n        },\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet'),\n    ],\n\n    data() {\n        return {\n            disable: false,\n        };\n    },\n\n    methods: {\n        closeModal() {\n            this.$emit('modal-close');\n        },\n\n        novalnetInstalmentCancel() {\n            const orderNumber = this.order.orderNumber;\n            const cancelType = this.cancelType;\n            this.disable = true;\n\n            this.NovalPaymentApiCredentialsService.instalmentCancel(\n                orderNumber,\n                cancelType\n            )\n                .then((response) => {\n                    if (response.result != '') {\n                        if (\n                            response.result.status != undefined &&\n                            response.result.status != null &&\n                            response.result.status == 'SUCCESS'\n                        ) {\n                            this.createNotificationSuccess({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.extension.instalmentSuccessMsg'\n                                ),\n                            });\n                        } else if (\n                            response.result.status_text != undefined &&\n                            response.result.status_text != null &&\n                            response.result.status_text != ''\n                        ) {\n                            this.createNotificationError({\n                                message: response.result.status_text,\n                            });\n                        } else {\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'novalnet-payment.settingForm.failureMessage'\n                                ),\n                            });\n                        }\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc(\n                                'novalnet-payment.settingForm.failureMessage'\n                            ),\n                        });\n                    }\n                    this.$emit('modal-close');\n                    setTimeout(this.$router.go, 3000);\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                    this.$emit('modal-close');\n                });\n        },\n    },\n});\n","{% block sw_order_create_details_payment %}\n    {% parent() %}\n\n    {% block sw_order_create_details_payment_novalnet_seaction %}\n        <template v-if=\"novalnetPayment\">\n            <mt-card\n                rows=\"2\"\n                :isLoading=\"isLoading\"\n                :title=\"$tc('novalnet-payment.module.title')\"\n            >\n                <div>\n                    <iframe\n                        v-if=\"loaded\"\n                        id=\"adminnovalnetPaymentiframe\"\n                        width=\"100%\"\n                        title=\"Novalnet Payment Form\"\n                        style=\"border: 0px;\"\n                        :src=\"iframe.src\"\n                    >\n\t\t\t\t\t</iframe>\n                </div>\n            </mt-card>\n        </template>\n    {% endblock %}\n{% endblock %}\n","import template from './sw-order-create-details.html.twig';\n\nconst { Component, Store, Mixin, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-create-details', {\n    template,\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory', 'acl'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: false,\n            loaded: false,\n            shouldDisable: true,\n            iframe: {\n                src: '',\n            },\n            paymentformurl: '',\n            novalnetPayment: false,\n        };\n    },\n    computed: {\n        customer() {\n            return Store.get('swOrder').customer;\n        },\n        cart() {\n            return Store.get('swOrder').cart;\n        },\n        currency() {\n            return Store.get('swOrder').context.currency;\n        },\n        cartPrice() {\n            return this.cart.price;\n        },\n        salesChannelContext() {\n            return Store.get('swOrder').context;\n        },\n\n        salesChannelId() {\n            return this.salesChannelContext?.salesChannel.id || '';\n        },\n    },\n\n    watch: {\n        salesChannelContext: {\n            deep: true,\n            handler() {\n                if (!this.customer || !this.isCartTokenAvailable) {\n                    return;\n                }\n\n                this.isLoading = true;\n                const paymentRepository =\n                    this.repositoryFactory.create('payment_method');\n                const paymentCriteria = new Criteria(1, 1);\n                paymentCriteria.addFilter(\n                    Criteria.equals(\n                        'id',\n                        this.salesChannelContext.paymentMethod.id\n                    )\n                );\n                paymentRepository\n                    .search(paymentCriteria, Context.api)\n                    .then((searchResult) => {\n                        const payment = searchResult.first();\n                        if (!payment) {\n                            return;\n                        }\n\n                        this.novalnetPayment = false;\n                        if (\n                            payment.customFields != null &&\n                            payment.customFields.novalnet_payment_method_name ==\n                                'novalnetpay'\n                        ) {\n                            if (this.currency == null) {\n                                this.createNotificationError({\n                                    title: this.$tc(\n                                        'novalnet-payment.settingForm.titleError'\n                                    ),\n                                    message: this.$tc(\n                                        'novalnet-payment.settingForm.currencyFailureMessage'\n                                    ),\n                                });\n\n                                return;\n                            }\n\n                            if (\n                                this.cartPrice != null &&\n                                (this.cartPrice.totalPrice == 0 ||\n                                    this.cartPrice.totalPrice == null)\n                            ) {\n                                this.createNotificationError({\n                                    title: this.$tc(\n                                        'novalnet-payment.settingForm.titleError'\n                                    ),\n                                    message: this.$tc(\n                                        'novalnet-payment.settingForm.lineitemFailureMessage'\n                                    ),\n                                });\n\n                                return;\n                            }\n\n                            this.novalnetPayment = true;\n                            let billingaddress = '';\n                            let shippingaddress = '';\n\n                            if (\n                                this.salesChannelContext.customer\n                                    .defaultBillingAddress !== null\n                            ) {\n                                billingaddress =\n                                    this.salesChannelContext.customer\n                                        .defaultBillingAddress;\n                            } else if (this.context.billingAddressId != null) {\n                                this.customer.addresses.forEach((value) => {\n                                    if (\n                                        value.id ==\n                                        this.context.billingAddressId\n                                    ) {\n                                        billingaddress = value;\n                                    }\n                                });\n                            }\n\n                            if (\n                                this.salesChannelContext.customer\n                                    .defaultShippingAddress !== null\n                            ) {\n                                shippingaddress =\n                                    this.salesChannelContext.customer\n                                        .defaultShippingAddress;\n                            } else if (this.context.shippingAddressId != null) {\n                                this.customer.addresses.forEach((value) => {\n                                    if (\n                                        value.id ==\n                                        this.context.shippingAddressId\n                                    ) {\n                                        billingaddress = value;\n                                    }\n                                });\n                            }\n\n                            let me = this.NovalPaymentApiCredentialsService;\n                            let customerPaymentDetails = this.customer;\n                            this.NovalPaymentApiCredentialsService.novalnetPayment(\n                                shippingaddress,\n                                billingaddress,\n                                this.cartPrice.totalPrice,\n                                this.currency.isoCode,\n                                this.customer\n                            )\n                                .then((payment) => {\n                                    if (payment != '' && payment != undefined) {\n                                        if (\n                                            payment.result.status ==\n                                                'SUCCESS' &&\n                                            payment.result.redirect_url != '' &&\n                                            payment.result.redirect_url !=\n                                                undefined\n                                        ) {\n                                            this.iframe.src =\n                                                payment.result.redirect_url;\n                                            this.loaded = true;\n                                            const recaptchaScript =\n                                                document.createElement(\n                                                    'script'\n                                                );\n                                            recaptchaScript.setAttribute(\n                                                'src',\n                                                'https://cdn.novalnet.de/js/pv13/checkout.js?' +\n                                                    new Date().getTime()\n                                            );\n                                            recaptchaScript.type =\n                                                'text/javascript';\n                                            document.head.appendChild(\n                                                recaptchaScript\n                                            );\n                                            this.paymentformurl =\n                                                recaptchaScript;\n                                            this.paymentformurl.addEventListener(\n                                                'load',\n                                                () => {\n                                                    document.querySelector(\n                                                        '.sw-button-process'\n                                                    ).disabled = false;\n                                                    this.onWindowLoad(\n                                                        me,\n                                                        customerPaymentDetails\n                                                    );\n                                                }\n                                            );\n                                        }\n                                    }\n                                })\n                                .catch((errorResponse) => {\n                                    this.createNotificationError({\n                                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                                    });\n                                });\n                        }\n                    });\n            },\n        },\n\n        customer: {\n            deep: true,\n            handler() {\n                if (this.customer == null) {\n                    return;\n                }\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        onWindowLoad(e, customer) {\n            const paymentForm = new NovalnetPaymentForm();\n            const submit = document.querySelector('.sw-button-process');\n\n            let request = {\n                iframe: '#adminnovalnetPaymentiframe',\n                initForm: {\n                    uncheckPayments: false,\n                    showButton: false,\n                },\n            };\n\n            paymentForm.initiate(request);\n            paymentForm.validationResponse(() => {\n                paymentForm.initiate(request);\n            });\n\n            submit.addEventListener('click', (event) => {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                paymentForm.getPayment(function (paymentDetails) {\n                    let value = JSON.stringify(paymentDetails);\n                    e.paymentValue(value, customer).then(() => {});\n                });\n            });\n        },\n    },\n});\n","const { Component, Store, Mixin, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-create-general', {\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory', 'acl'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        customer() {\n            return Store.get('swOrder').customer;\n        },\n        cart() {\n            return Store.get('swOrder').cart;\n        },\n        currency() {\n            return Store.get('swOrder').context.currency;\n        },\n        cartPrice() {\n            return this.cart.price;\n        },\n        salesChannelContext() {\n            return Store.get('swOrder').context;\n        },\n    },\n\n    watch: {\n        salesChannelContext: {\n            deep: true,\n            handler() {\n                if (!this.customer) {\n                    return;\n                }\n\n                this.isLoading = true;\n                const paymentRepository =\n                    this.repositoryFactory.create('payment_method');\n                const paymentCriteria = new Criteria(1, 1);\n                paymentCriteria.addFilter(\n                    Criteria.equals(\n                        'id',\n                        this.salesChannelContext.paymentMethod.id\n                    )\n                );\n                paymentRepository\n                    .search(paymentCriteria, Context.api)\n                    .then((searchResult) => {\n                        const payment = searchResult.first();\n                        if (!payment) {\n                            return;\n                        }\n                        this.novalnetPayment = false;\n                        if (\n                            payment.customFields != null &&\n                            payment.customFields.novalnet_payment_method_name ==\n                                'novalnetpay'\n                        ) {\n                            this.onWindowLoad();\n                        }\n                    });\n            },\n        },\n\n        customer: {\n            deep: true,\n            handler() {\n                if (this.customer == null) {\n                    return;\n                }\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        onWindowLoad() {\n            document.querySelector('.sw-button-process').disabled = true;\n        },\n    },\n});\n","{% block sw_order_detail_base_secondary_info_payment %}\n    <template v-if=\"currentOrder.transactions.length > 0\">\n        <dl>\n            <dt>\n                {{ $tc('sw-order.detailBase.labelPaymentMethod') }}\n            </dt>\n            <dd>\n\t\t\t\t\t{{ paymentMethod }} \n\t\t\t\t</dd>\n        </dl>\n    </template>\n{% endblock %}\n","import template from './sw-order-user-card.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-order-user-card', {\n    template,\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    props: {\n        currentOrder: {\n            type: Object,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            paymentMethod: '',\n        };\n    },\n\n    watch: {\n        currentOrder: {\n            deep: true,\n            handler() {\n                if (this.currentOrder == '') {\n                    return;\n                }\n\n                if (\n                    this.currentOrder.transactions.last().paymentMethod\n                        .customFields != null &&\n                    this.currentOrder.transactions.last().paymentMethod\n                        .customFields.novalnet_payment_method_name !=\n                        undefined &&\n                    this.currentOrder.transactions.last().paymentMethod\n                        .customFields.novalnet_payment_method_name ==\n                        'novalnetpay'\n                ) {\n                    this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(\n                        this.currentOrder.orderNumber\n                    )\n                        .then((payment) => {\n                            if (payment != undefined && payment != null) {\n                                if (\n                                    payment.paymentName != undefined &&\n                                    payment.paymentName != null\n                                ) {\n                                    this.paymentMethod = payment.paymentName;\n                                } else {\n                                    this.paymentMethod =\n                                        this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n                                }\n                            } else {\n                                this.paymentMethod =\n                                    this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n                            }\n                        })\n                        .catch((errorResponse) => {\n                            this.createNotificationError({\n                                message: `${errorResponse.title}: ${errorResponse.message}`,\n                            });\n                        });\n                } else {\n                    this.paymentMethod =\n                        this.currentOrder.transactions.last().paymentMethod.translated.distinguishableName;\n                }\n            },\n            immediate: true,\n        },\n    },\n});\n","{% block sw_order_detail_base_general_info_summary_sub_description %}\n    <div class=\"sw-order-general-info__summary-sub-description\">\n        {{ $tc('sw-order.generalTab.info.summary.on') }}\n        {{ dateFilter(order.orderDateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                day: '2-digit',\n                month: '2-digit',\n                year: 'numeric'\n                }) }}\n        {{ $tc('sw-order.generalTab.info.summary.with') }}\n        {{ paymentMethod }}\n        <template v-if=\"order.deliveries.last()\">\n            {{ $tc('sw-order.generalTab.info.summary.and') }}\n            {{ order.deliveries.last().shippingMethod.translated.name }}\n        </template>\n    </div>\n{% endblock %}\n","import template from './sw-order-general-info.html.twig';\n\n/**\n * @package customer-order\n */\nconst { Component, Mixin } = Shopware;\n\nComponent.override('sw-order-general-info', {\n    template,\n\n    inject: ['NovalPaymentApiCredentialsService', 'repositoryFactory'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            paymentMethod: '',\n        };\n    },\n\n    watch: {\n        order: {\n            deep: true,\n            handler() {\n                if (this.order == '') {\n                    return;\n                }\n\n                if (\n                    this.order.transactions.last().paymentMethod.customFields !=\n                        null &&\n                    this.order.transactions.last().paymentMethod.customFields\n                        .novalnet_payment_method_name != undefined &&\n                    this.order.transactions.last().paymentMethod.customFields\n                        .novalnet_payment_method_name == 'novalnetpay'\n                ) {\n                    if (\n                        this.order.transactions.last().customFields != null &&\n                        this.order.transactions.last().customFields\n                            .novalnet_payment_name != undefined &&\n                        this.order.transactions.last().customFields\n                            .novalnet_payment_name != ''\n                    ) {\n                        this.paymentMethod =\n                            this.order.transactions.last().customFields.novalnet_payment_name;\n                    } else {\n                        this.NovalPaymentApiCredentialsService.getNovalnetPaymentMethod(\n                            this.order.orderNumber\n                        )\n                            .then((payment) => {\n                                if (payment != undefined && payment != null) {\n                                    if (\n                                        payment.paymentName != undefined &&\n                                        payment.paymentName != null\n                                    ) {\n                                        this.paymentMethod =\n                                            payment.paymentName;\n                                    } else {\n                                        this.paymentMethod =\n                                            this.order.transactions.last().paymentMethod.translated.distinguishableName;\n                                    }\n                                } else {\n                                    this.paymentMethod =\n                                        this.order.transactions.last().paymentMethod.translated.distinguishableName;\n                                }\n                            })\n                            .catch((errorResponse) => {\n                                this.createNotificationError({\n                                    message: `${errorResponse.title}: ${errorResponse.message}`,\n                                });\n                            });\n                    }\n                } else {\n                    this.paymentMethod =\n                        this.order.transactions.last().paymentMethod.translated.distinguishableName;\n                }\n            },\n            immediate: true,\n        },\n    },\n});\n","import './page/novalnet-payment-settings';\nimport './components/novalnet-payment-credentials';\nimport './components/novalnet-payment-settings-icon';\nimport './extension/sw-customer/component/sw-customer-base-info';\nimport './extension/sw-order/view/sw-order-detail-details';\nimport './extension/sw-order/view/novalnet-payment-refund-modal';\nimport './extension/sw-order/view/novalnet-payment-manage-transaction-modal';\nimport './extension/sw-order/view/novalnet-payment-book-amount-modal';\nimport './extension/sw-order/view/novalnet-payment-instalment-cancel-modal';\nimport './extension/sw-order/view/sw-order-create-details';\nimport './extension/sw-order/view/sw-order-create-general';\nimport './extension/sw-order/component/sw-order-user-card';\nimport './extension/sw-order/component/sw-order-general-info';\n\nconst { Module } = Shopware;\n\nModule.register('novalnet-payment', {\n    type: 'plugin',\n    name: 'NovalnetPayment',\n    title: 'novalnet-payment.module.title',\n    description: 'novalnet-payment.module.description',\n\n    routes: {\n        index: {\n            component: 'novalnet-payment-settings',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'novalnet_payment.viewer',\n            }\n        },\n        detail: {\n            component: 'novalnet-payment-settings',\n            path: 'settings',\n            redirect: {\n                name: 'novalnet.payment.credentials'\n            },\n            children: {\n                credentials: {\n                    component: 'novalnet-payment-credentials',\n                    path: 'credentials',\n                    meta: {\n                        parentPath: 'sw.settings.index',\n                        privilege: 'novalnet_payment.viewer'\n                    }\n                }\n            }\n        }\n    },\n    settingsItem: {\n        group: 'plugins',\n        to: 'novalnet.payment.detail.credentials',\n        iconComponent: 'novalnet-payment-settings-icon',\n        backgroundEnabled: true,\n        privilege: 'novalnet_payment.viewer'\n    }\n});\n","const ApiService = Shopware.Classes.ApiService;\n\nclass NovalPaymentApiCredentialsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'novalnet-payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateApiCredentials(clientId, accessKey) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/validate-api-credentials`,\n                {\n                    clientId,\n                    accessKey,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getNovalnetAmount(orderNumber) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/transaction-amount`,\n                {\n                    orderNumber,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    refundPayment(orderNumber, refundAmount, reason, instalmentCycleTid) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/refund-amount`,\n                {\n                    orderNumber,\n                    refundAmount,\n                    reason,\n                    instalmentCycleTid,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    managePayment(orderNumber, status) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/manage-payment`,\n                {\n                    orderNumber: orderNumber,\n                    status: status,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    instalmentCancel(orderNumber, cancelType) {\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/instalment-cancel`,\n                {\n                    orderNumber,\n                    cancelType,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    BookOrderAmount(orderNumber, bookAmount) {\n        const apiRoute = `_action/${this.getApiBasePath()}/book-amount`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    orderNumber,\n                    bookAmount,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getNovalnetPaymentMethod(orderNumber) {\n        const apiRoute = `_action/${this.getApiBasePath()}/novalnet-paymentmethod`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    orderNumber,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    configureWebhookUrl(url, productActivationKey, paymentAccessKey) {\n        const apiRoute = `_action/${this.getApiBasePath()}/webhook-url-configure`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    url,\n                    productActivationKey,\n                    paymentAccessKey,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    novalnetPayment(\n        shippingaddress,\n        billingaddress,\n        amount,\n        currency,\n        customer\n    ) {\n        const apiRoute = `_action/${this.getApiBasePath()}/load-payment-form`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    shippingaddress,\n                    billingaddress,\n                    amount,\n                    currency,\n                    customer,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    paymentValue(value, customer) {\n        const apiRoute = `_action/${this.getApiBasePath()}/payment-value-data`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    value,\n                    customer,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getCustomerPaymentMethod(customerNo) {\n        const apiRoute = `_action/${this.getApiBasePath()}/customer-payment-data`;\n\n        return this.httpClient\n            .post(\n                apiRoute,\n                {\n                    customerNo,\n                },\n                {\n                    headers: this.getBasicHeaders(),\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default NovalPaymentApiCredentialsService;\n","import NovalPaymentApiCredentialsService from '../../src/core/service/api/novalnet-payment-api-credentials.service';\n\nconst { Application } = Shopware;\n\nApplication.addServiceProvider(\n    'NovalPaymentApiCredentialsService',\n    (container) => {\n        const initContainer = Application.getContainer('init');\n\n        return new NovalPaymentApiCredentialsService(\n            initContainer.httpClient,\n            container.loginService\n        );\n    }\n);\n","Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'orders',\n    key: 'novalnet_extension',\n    roles: {\n        viewer: {\n            privileges: ['novalnet_transaction_details:read'],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'novalnet_transaction_details:update',\n                'order_transaction:read',\n                'order_transaction:update',\n            ],\n            dependencies: ['novalnet_extension.viewer', 'order.editor'],\n        },\n        creator: {\n            privileges: ['novalnet_transaction_details:create'],\n            dependencies: [\n                'novalnet_extension.viewer',\n                'novalnet_extension.editor',\n            ],\n        },\n        deleter: {\n            privileges: ['novalnet_transaction_details:delete'],\n            dependencies: ['novalnet_extension.viewer'],\n        },\n    },\n});\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'novalnet_payment',\n    key: 'novalnet_payment',\n    roles: {\n        viewer: {\n            privileges: ['system_config:read', 'sales_channel:read'],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'system_config:update',\n                'system_config:create',\n                'system_config:delete',\n                'sales_channel:update',\n            ],\n            dependencies: ['novalnet_payment.viewer'],\n        },\n    },\n});\n"],"names":["template$b","Component","Mixin","Defaults","Criteria","template","configData","defaultConfig","criteria","res","clientId","accessKey","field","response","tariff","template$a","generatedUrl","config","value","key","me","status","productActivationKey","callbackUrl","template$9","template$8","paymentDetails","errorResponse","template$7","Context","currency","orderRepository","orderCriteria","searchResult","order","isNovalnet","comments","translation","a","b","orderTransaction","payment","additionalDetails","counter","values","novalnetPayment","item","template$6","reason","orderNumber","template$5","template$4","template$3","cancelType","template$2","Store","_a","paymentRepository","paymentCriteria","billingaddress","shippingaddress","customerPaymentDetails","recaptchaScript","customer","paymentForm","submit","request","event","template$1","Module","ApiService","NovalPaymentApiCredentialsService","httpClient","loginService","apiEndpoint","refundAmount","instalmentCycleTid","bookAmount","apiRoute","url","paymentAccessKey","amount","customerNo","Application","container","initContainer"],"mappings":"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"}
